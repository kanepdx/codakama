
Lock_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800180  00800180  00000c12  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000015a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb8  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000297  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069d  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a2  00000000  00000000  00003413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	f7 c2       	rjmp	.+1518   	; 0x5f6 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ef       	ldi	r30, 0xFE	; 254
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 38       	cpi	r26, 0x80	; 128
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e8       	ldi	r26, 0x80	; 128
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 39       	cpi	r26, 0x96	; 150
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d3       	rcall	.+1540   	; 0x66c <main>
  68:	48 c5       	rjmp	.+2704   	; 0xafa <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  6c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	89 ef       	ldi	r24, 0xF9	; 249
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <pulseElatch+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <pulseElatch+0xc>
  78:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  7a:	44 98       	cbi	0x08, 4	; 8
}
  7c:	08 95       	ret

0000007e <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  86:	8c 01       	movw	r16, r24
  88:	00 7f       	andi	r16, 0xF0	; 240
  8a:	10 70       	andi	r17, 0x00	; 0
  8c:	15 95       	asr	r17
  8e:	07 95       	ror	r16
  90:	15 95       	asr	r17
  92:	07 95       	ror	r16
  94:	15 95       	asr	r17
  96:	07 95       	ror	r16
  98:	15 95       	asr	r17
  9a:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  9c:	ec 01       	movw	r28, r24
  9e:	cf 70       	andi	r28, 0x0F	; 15
  a0:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	80 2b       	or	r24, r16
  ac:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  ae:	de df       	rcall	.-68     	; 0x6c <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	00 95       	com	r16
  b4:	08 23       	and	r16, r24
  b6:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8c 2b       	or	r24, r28
  bc:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  be:	d6 df       	rcall	.-84     	; 0x6c <pulseElatch>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <writeLCDdata+0x46>
  c8:	00 c0       	rjmp	.+0      	; 0xca <writeLCDdata+0x4c>
  ca:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	c0 95       	com	r28
  d0:	c8 23       	and	r28, r24
  d2:	c8 b9       	out	0x08, r28	; 8
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
  e8:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  ea:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
  ec:	58 98       	cbi	0x0b, 0	; 11
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	c5 df       	rcall	.-118    	; 0x7e <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
  f4:	c2 30       	cpi	r28, 0x02	; 2
  f6:	d1 05       	cpc	r29, r1
  f8:	59 f4       	brne	.+22     	; 0x110 <cursorPosition+0x32>
	{
		writeLCDdata(0x2);			// Sending the cursor home
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	bf df       	rcall	.-130    	; 0x7e <writeLCDdata>
 100:	c8 e2       	ldi	r28, 0x28	; 40
 102:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ba df       	rcall	.-140    	; 0x7e <writeLCDdata>
 10a:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 10c:	d9 f7       	brne	.-10     	; 0x104 <cursorPosition+0x26>
 10e:	03 c0       	rjmp	.+6      	; 0x116 <cursorPosition+0x38>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	b4 df       	rcall	.-152    	; 0x7e <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	b1 df       	rcall	.-158    	; 0x7e <writeLCDdata>
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 122:	2f e3       	ldi	r18, 0x3F	; 63
 124:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 126:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 128:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 12a:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(character);		// Sending the character on the data lines
 12c:	a8 df       	rcall	.-176    	; 0x7e <writeLCDdata>
}
 12e:	08 95       	ret

00000130 <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	d9 2f       	mov	r29, r25
 13c:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 13e:	cf df       	rcall	.-98     	; 0xde <cursorPosition>
 140:	0c 2f       	mov	r16, r28
 142:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 148:	f8 01       	movw	r30, r16
 14a:	81 91       	ld	r24, Z+
 14c:	8f 01       	movw	r16, r30
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	e8 df       	rcall	.-48     	; 0x122 <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	d1 05       	cpc	r29, r1
 158:	b9 f7       	brne	.-18     	; 0x148 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 168:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 16a:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 16c:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(0x01);				// Writing clear instruction
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	85 df       	rcall	.-246    	; 0x7e <writeLCDdata>
}
 174:	08 95       	ret

00000176 <initializeLCD>:
#define LCD_PORT_2 PORTD		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRD			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	80 7c       	andi	r24, 0xC0	; 192
 182:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 184:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 186:	58 98       	cbi	0x0b, 0	; 11
 188:	c4 e0       	ldi	r28, 0x04	; 4
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 192:	6c df       	rcall	.-296    	; 0x6c <pulseElatch>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <initializeLCD+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <initializeLCD+0x28>
 19e:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 1a8:	89 f7       	brne	.-30     	; 0x18c <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 1aa:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 1ac:	5f df       	rcall	.-322    	; 0x6c <pulseElatch>
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <initializeLCD+0x3c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <initializeLCD+0x42>
 1b8:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 1ba:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	5e df       	rcall	.-324    	; 0x7e <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	5b df       	rcall	.-330    	; 0x7e <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	58 df       	rcall	.-336    	; 0x7e <writeLCDdata>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <BacklightLCD>:
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
}

// Turns the LCD back light on or off
void BacklightLCD (int on1_off0){
	LCD_DDR_2 |= (1 << BL);		// Making pin PB1 an output
 1d4:	51 9a       	sbi	0x0a, 1	; 10
	if (on1_off0 == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	11 f4       	brne	.+4      	; 0x1e0 <BacklightLCD+0xc>
		LCD_PORT_2 &= ~(1 << BL);		// Masking or clearing pin PB1 sinking current turning on Back light
 1dc:	59 98       	cbi	0x0b, 1	; 11
 1de:	08 95       	ret
	else
		LCD_PORT_2 |= (1 << BL);		// Setting PB1 allowing no current flow to turn bakc light off
 1e0:	59 9a       	sbi	0x0b, 1	; 11
 1e2:	08 95       	ret

000001e4 <writeTOeeprom>:

int short default_code[9] = {'0','0','0','0','\0','\0','\0','\0','\0'};		// Factory default code 


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
 1ea:	fc 01       	movw	r30, r24
 1ec:	60 81       	ld	r22, Z
 1ee:	71 81       	ldd	r23, Z+1	; 0x01
 1f0:	61 15       	cp	r22, r1
 1f2:	71 05       	cpc	r23, r1
 1f4:	81 f0       	breq	.+32     	; 0x216 <writeTOeeprom+0x32>

int short default_code[9] = {'0','0','0','0','\0','\0','\0','\0','\0'};		// Factory default code 


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
 1f6:	8c 01       	movw	r16, r24
 1f8:	0e 5f       	subi	r16, 0xFE	; 254
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 1fc:	c1 e0       	ldi	r28, 0x01	; 1
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
		eeprom_write_byte(temp_ee_address, code_to_save[add_count]);	// writing byte to specified address
 1fe:	8c 2f       	mov	r24, r28
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	6d d4       	rcall	.+2266   	; 0xade <__eewr_byte_m48a>
		temp_ee_address++;												// incrementing address counter
 204:	cf 5f       	subi	r28, 0xFF	; 255

// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
 206:	f8 01       	movw	r30, r16
 208:	61 91       	ld	r22, Z+
 20a:	71 91       	ld	r23, Z+
 20c:	8f 01       	movw	r16, r30
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	a9 f7       	brne	.-22     	; 0x1fe <writeTOeeprom+0x1a>
 214:	01 c0       	rjmp	.+2      	; 0x218 <writeTOeeprom+0x34>


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 216:	c1 e0       	ldi	r28, 0x01	; 1
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
		eeprom_write_byte(temp_ee_address, code_to_save[add_count]);	// writing byte to specified address
		temp_ee_address++;												// incrementing address counter
		add_count++;													// incrementing array counter
	}
	eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing the NULL character to the end of the pass code
 218:	8c 2f       	mov	r24, r28
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	60 d4       	rcall	.+2240   	; 0xade <__eewr_byte_m48a>
	eeprom_write_byte(EEPROM_NEWCODE_ADDRESS,0x0);						// Setting new code flag
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	5c d4       	rcall	.+2232   	; 0xade <__eewr_byte_m48a>
}
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <readFROMeeprom>:


// Reads the contents of EEPROM and store them in an 9 element array
void readFROMeeprom(int short *saved_code[]){
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	7c 01       	movw	r14, r24
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	46 d4       	rcall	.+2188   	; 0xace <__eerd_byte_m48a>
 242:	88 23       	and	r24, r24
 244:	21 f4       	brne	.+8      	; 0x24e <readFROMeeprom+0x20>
 246:	87 01       	movw	r16, r14
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	0e c0       	rjmp	.+28     	; 0x26a <readFROMeeprom+0x3c>
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 24e:	80 91 6e 01 	lds	r24, 0x016E
 252:	90 91 6f 01 	lds	r25, 0x016F
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	b1 f4       	brne	.+44     	; 0x286 <readFROMeeprom+0x58>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	23 c0       	rjmp	.+70     	; 0x2a6 <readFROMeeprom+0x78>
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
 260:	f8 01       	movw	r30, r16
 262:	81 93       	st	Z+, r24
 264:	91 93       	st	Z+, r25
 266:	8f 01       	movw	r16, r30
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
 268:	21 96       	adiw	r28, 0x01	; 1
void readFROMeeprom(int short *saved_code[]){
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
 26a:	8c 2f       	mov	r24, r28
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	2e d4       	rcall	.+2140   	; 0xace <__eerd_byte_m48a>
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	a1 f7       	brne	.-24     	; 0x260 <readFROMeeprom+0x32>
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
 278:	cc 0f       	add	r28, r28
 27a:	dd 1f       	adc	r29, r29
 27c:	ce 0d       	add	r28, r14
 27e:	df 1d       	adc	r29, r15
 280:	19 82       	std	Y+1, r1	; 0x01
 282:	18 82       	st	Y, r1
 284:	17 c0       	rjmp	.+46     	; 0x2b4 <readFROMeeprom+0x86>
 286:	d7 01       	movw	r26, r14
 288:	e0 e7       	ldi	r30, 0x70	; 112
 28a:	f1 e0       	ldi	r31, 0x01	; 1
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
 290:	8d 93       	st	X+, r24
 292:	9d 93       	st	X+, r25
			add_count++;													// incrementing array counter			
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 298:	50 81       	ld	r21, Z
 29a:	41 81       	ldd	r20, Z+1	; 0x01
 29c:	32 96       	adiw	r30, 0x02	; 2
 29e:	85 2f       	mov	r24, r21
 2a0:	94 2f       	mov	r25, r20
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	a9 f7       	brne	.-22     	; 0x290 <readFROMeeprom+0x62>
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
			add_count++;													// incrementing array counter			
		}
		saved_code[add_count] = default_code[add_count];					// setting NULL character at the end of pass code array
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	e2 0e       	add	r14, r18
 2ac:	f3 1e       	adc	r15, r19
 2ae:	f7 01       	movw	r30, r14
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
	}	
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	08 95       	ret

000002c2 <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <getButtonState+0x2>
 2c8:	00 00       	nop
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 2ca:	18 9b       	sbis	0x03, 0	; 3
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <getButtonState+0x2a>
	else if(!(PINB &(1 << ROW2))) s = 1;				
 2ce:	19 9b       	sbis	0x03, 1	; 3
 2d0:	10 c0       	rjmp	.+32     	; 0x2f2 <getButtonState+0x30>
	else if(!(PINB &(1 << ROW3))) s = 1;				
 2d2:	1a 9b       	sbis	0x03, 2	; 3
 2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <getButtonState+0x36>
	else if(!(PINB &(1 << ROW4))) s = 1;
 2d6:	83 b1       	in	r24, 0x03	; 3
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 2d8:	99 27       	eor	r25, r25
 2da:	87 fd       	sbrc	r24, 7
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	88 27       	eor	r24, r24
 2e4:	99 0f       	add	r25, r25
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 27       	eor	r25, r25
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
 2fc:	08 95       	ret

000002fe <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 2fe:	18 9b       	sbis	0x03, 0	; 3
 300:	07 c0       	rjmp	.+14     	; 0x310 <__stack+0x11>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 302:	19 9b       	sbis	0x03, 1	; 3
 304:	08 c0       	rjmp	.+16     	; 0x316 <__stack+0x17>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 306:	1a 9b       	sbis	0x03, 2	; 3
 308:	09 c0       	rjmp	.+18     	; 0x31c <__stack+0x1d>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 30a:	1f 9b       	sbis	0x03, 7	; 3
 30c:	0a c0       	rjmp	.+20     	; 0x322 <__stack+0x23>
 30e:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 322:	87 e0       	ldi	r24, 0x07	; 7
 324:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
 326:	08 95       	ret

00000328 <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
 328:	2b 9a       	sbi	0x05, 3	; 5
 32a:	6a e0       	ldi	r22, 0x0A	; 10
 32c:	6a 95       	dec	r22
 32e:	f1 f7       	brne	.-4      	; 0x32c <getCol+0x4>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 330:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
 332:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
 334:	2c 9a       	sbi	0x05, 4	; 5
 336:	7a e0       	ldi	r23, 0x0A	; 10
 338:	7a 95       	dec	r23
 33a:	f1 f7       	brne	.-4      	; 0x338 <getCol+0x10>
	_delay_us(30);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 33c:	23 b1       	in	r18, 0x03	; 3
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	08 2e       	mov	r0, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <getCol+0x20>
 344:	35 95       	asr	r19
 346:	27 95       	ror	r18
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <getCol+0x1c>
 34c:	20 fd       	sbrc	r18, 0
 34e:	03 c0       	rjmp	.+6      	; 0x356 <getCol+0x2e>
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <getCol+0x32>
		c = 2;											// then the key press was in the second column
 356:	22 e0       	ldi	r18, 0x02	; 2
 358:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 35a:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 35c:	2d 9a       	sbi	0x05, 5	; 5
 35e:	9a e0       	ldi	r25, 0x0A	; 10
 360:	9a 95       	dec	r25
 362:	f1 f7       	brne	.-4      	; 0x360 <getCol+0x38>
	_delay_us(30);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 364:	43 b1       	in	r20, 0x03	; 3
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	ba 01       	movw	r22, r20
 36a:	02 c0       	rjmp	.+4      	; 0x370 <getCol+0x48>
 36c:	75 95       	asr	r23
 36e:	67 95       	ror	r22
 370:	8a 95       	dec	r24
 372:	e2 f7       	brpl	.-8      	; 0x36c <getCol+0x44>
 374:	60 ff       	sbrs	r22, 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <getCol+0x54>
		c = 3;											// then the key press was in the third column
 378:	23 e0       	ldi	r18, 0x03	; 3
 37a:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 37c:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 37e:	82 2f       	mov	r24, r18
 380:	93 2f       	mov	r25, r19
 382:	08 95       	ret

00000384 <keyMap>:

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	51 f4       	brne	.+20     	; 0x39c <keyMap+0x18>
 388:	61 30       	cpi	r22, 0x01	; 1
 38a:	71 05       	cpc	r23, r1
 38c:	81 f1       	breq	.+96     	; 0x3ee <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 38e:	62 30       	cpi	r22, 0x02	; 2
 390:	71 05       	cpc	r23, r1
 392:	81 f1       	breq	.+96     	; 0x3f4 <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 394:	63 30       	cpi	r22, 0x03	; 3
 396:	71 05       	cpc	r23, r1
 398:	e9 f4       	brne	.+58     	; 0x3d4 <keyMap+0x50>
 39a:	2f c0       	rjmp	.+94     	; 0x3fa <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	91 05       	cpc	r25, r1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <keyMap+0x32>
 3a2:	61 30       	cpi	r22, 0x01	; 1
 3a4:	71 05       	cpc	r23, r1
 3a6:	61 f1       	breq	.+88     	; 0x400 <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 3a8:	62 30       	cpi	r22, 0x02	; 2
 3aa:	71 05       	cpc	r23, r1
 3ac:	61 f1       	breq	.+88     	; 0x406 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 3ae:	63 30       	cpi	r22, 0x03	; 3
 3b0:	71 05       	cpc	r23, r1
 3b2:	e9 f5       	brne	.+122    	; 0x42e <keyMap+0xaa>
 3b4:	2b c0       	rjmp	.+86     	; 0x40c <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	91 05       	cpc	r25, r1
 3ba:	61 f4       	brne	.+24     	; 0x3d4 <keyMap+0x50>
 3bc:	61 30       	cpi	r22, 0x01	; 1
 3be:	71 05       	cpc	r23, r1
 3c0:	41 f1       	breq	.+80     	; 0x412 <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 3c2:	62 30       	cpi	r22, 0x02	; 2
 3c4:	71 05       	cpc	r23, r1
 3c6:	41 f1       	breq	.+80     	; 0x418 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 0x39;
 3c8:	63 30       	cpi	r22, 0x03	; 3
 3ca:	71 05       	cpc	r23, r1
 3cc:	81 f5       	brne	.+96     	; 0x42e <keyMap+0xaa>
 3ce:	29 e3       	ldi	r18, 0x39	; 57
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	2d c0       	rjmp	.+90     	; 0x42e <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 3d4:	87 30       	cpi	r24, 0x07	; 7
 3d6:	91 05       	cpc	r25, r1
 3d8:	51 f5       	brne	.+84     	; 0x42e <keyMap+0xaa>
 3da:	61 30       	cpi	r22, 0x01	; 1
 3dc:	71 05       	cpc	r23, r1
 3de:	f9 f0       	breq	.+62     	; 0x41e <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 3e0:	62 30       	cpi	r22, 0x02	; 2
 3e2:	71 05       	cpc	r23, r1
 3e4:	f9 f0       	breq	.+62     	; 0x424 <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 3e6:	63 30       	cpi	r22, 0x03	; 3
 3e8:	71 05       	cpc	r23, r1
 3ea:	09 f5       	brne	.+66     	; 0x42e <keyMap+0xaa>
 3ec:	1e c0       	rjmp	.+60     	; 0x42a <keyMap+0xa6>
}

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 3ee:	21 e3       	ldi	r18, 0x31	; 49
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	1d c0       	rjmp	.+58     	; 0x42e <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 3f4:	22 e3       	ldi	r18, 0x32	; 50
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	1a c0       	rjmp	.+52     	; 0x42e <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 3fa:	23 e3       	ldi	r18, 0x33	; 51
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	17 c0       	rjmp	.+46     	; 0x42e <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 400:	24 e3       	ldi	r18, 0x34	; 52
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	14 c0       	rjmp	.+40     	; 0x42e <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 406:	25 e3       	ldi	r18, 0x35	; 53
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	11 c0       	rjmp	.+34     	; 0x42e <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 40c:	26 e3       	ldi	r18, 0x36	; 54
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	0e c0       	rjmp	.+28     	; 0x42e <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 412:	27 e3       	ldi	r18, 0x37	; 55
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	0b c0       	rjmp	.+22     	; 0x42e <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 418:	28 e3       	ldi	r18, 0x38	; 56
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	08 c0       	rjmp	.+16     	; 0x42e <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 0x39;
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 41e:	2a e2       	ldi	r18, 0x2A	; 42
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	05 c0       	rjmp	.+10     	; 0x42e <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 424:	20 e3       	ldi	r18, 0x30	; 48
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 42a:	23 e2       	ldi	r18, 0x23	; 35
 42c:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 42e:	82 2f       	mov	r24, r18
 430:	93 2f       	mov	r25, r19
 432:	08 95       	ret

00000434 <getKeyPress>:
// globals to be moved later							
volatile int key_queue[KEY_QUEUE_SIZE];							// holds user inputs
int current_key;

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 438:	62 df       	rcall	.-316    	; 0x2fe <getRow>
 43a:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 43c:	75 df       	rcall	.-278    	; 0x328 <getCol>
 43e:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 440:	ce 01       	movw	r24, r28
 442:	a0 df       	rcall	.-192    	; 0x384 <keyMap>
	//pushKey(key); 									// push key onto queue		
	current_key = key;
 444:	90 93 81 01 	sts	0x0181, r25
 448:	80 93 80 01 	sts	0x0180, r24
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <popKey>:
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 452:	a0 91 82 01 	lds	r26, 0x0182
 456:	b0 91 83 01 	lds	r27, 0x0183
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i+1];
 45e:	62 e8       	ldi	r22, 0x82	; 130
 460:	71 e0       	ldi	r23, 0x01	; 1
 462:	01 c0       	rjmp	.+2      	; 0x466 <popKey+0x14>
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 464:	c9 01       	movw	r24, r18
		key_queue[i] = key_queue[i+1];
 466:	9c 01       	movw	r18, r24
 468:	2f 5f       	subi	r18, 0xFF	; 255
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	f9 01       	movw	r30, r18
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	e6 0f       	add	r30, r22
 474:	f7 1f       	adc	r31, r23
 476:	40 81       	ld	r20, Z
 478:	51 81       	ldd	r21, Z+1	; 0x01
 47a:	fc 01       	movw	r30, r24
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	e6 0f       	add	r30, r22
 482:	f7 1f       	adc	r31, r23
 484:	51 83       	std	Z+1, r21	; 0x01
 486:	40 83       	st	Z, r20
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 488:	29 30       	cpi	r18, 0x09	; 9
 48a:	31 05       	cpc	r19, r1
 48c:	59 f7       	brne	.-42     	; 0x464 <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
 48e:	10 92 95 01 	sts	0x0195, r1
 492:	10 92 94 01 	sts	0x0194, r1
	return k;
}
 496:	8a 2f       	mov	r24, r26
 498:	9b 2f       	mov	r25, r27
 49a:	08 95       	ret

0000049c <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 49c:	dc 01       	movw	r26, r24
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i-1];
 4a2:	62 e8       	ldi	r22, 0x82	; 130
 4a4:	71 e0       	ldi	r23, 0x01	; 1
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
 4a6:	9c 01       	movw	r18, r24
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	30 40       	sbci	r19, 0x00	; 0
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 4ac:	f9 01       	movw	r30, r18
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e6 0f       	add	r30, r22
 4b4:	f7 1f       	adc	r31, r23
 4b6:	40 81       	ld	r20, Z
 4b8:	51 81       	ldd	r21, Z+1	; 0x01
 4ba:	fc 01       	movw	r30, r24
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	e6 0f       	add	r30, r22
 4c2:	f7 1f       	adc	r31, r23
 4c4:	51 83       	std	Z+1, r21	; 0x01
 4c6:	40 83       	st	Z, r20
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 4c8:	c9 01       	movw	r24, r18
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	61 f7       	brne	.-40     	; 0x4a6 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;	
 4ce:	b0 93 83 01 	sts	0x0183, r27
 4d2:	a0 93 82 01 	sts	0x0182, r26
}
 4d6:	08 95       	ret

000004d8 <clearKeyQueue>:

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = '\0';
 4dc:	22 e8       	ldi	r18, 0x82	; 130
 4de:	31 e0       	ldi	r19, 0x01	; 1
 4e0:	fc 01       	movw	r30, r24
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	e2 0f       	add	r30, r18
 4e8:	f3 1f       	adc	r31, r19
 4ea:	11 82       	std	Z+1, r1	; 0x01
 4ec:	10 82       	st	Z, r1
	}
	key_queue[0] = k;	
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	8a 30       	cpi	r24, 0x0A	; 10
 4f2:	91 05       	cpc	r25, r1
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <clearKeyQueue+0x8>
		key_queue[i] = '\0';
	}
	
}
 4f6:	08 95       	ret

000004f8 <initRows>:

void initRows(int r[]){									// sets keypad rows as inputs
 4f8:	e8 2f       	mov	r30, r24
 4fa:	f9 2f       	mov	r31, r25
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	90 e0       	ldi	r25, 0x00	; 0
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	64 b1       	in	r22, 0x04	; 4
 506:	20 81       	ld	r18, Z
 508:	32 96       	adiw	r30, 0x02	; 2
 50a:	da 01       	movw	r26, r20
 50c:	02 c0       	rjmp	.+4      	; 0x512 <initRows+0x1a>
 50e:	aa 0f       	add	r26, r26
 510:	bb 1f       	adc	r27, r27
 512:	2a 95       	dec	r18
 514:	e2 f7       	brpl	.-8      	; 0x50e <initRows+0x16>
 516:	9d 01       	movw	r18, r26
 518:	20 95       	com	r18
 51a:	26 23       	and	r18, r22
 51c:	24 b9       	out	0x04, r18	; 4
 51e:	01 97       	sbiw	r24, 0x01	; 1
	}
	
}

void initRows(int r[]){									// sets keypad rows as inputs
for(int i = 0; i < NUM_ROWS; i++){
 520:	89 f7       	brne	.-30     	; 0x504 <initRows+0xc>
	DDRB &= ~(1 << r[i]);
}
}
 522:	08 95       	ret

00000524 <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 524:	e8 2f       	mov	r30, r24
 526:	f9 2f       	mov	r31, r25
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	65 b1       	in	r22, 0x05	; 5
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 532:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 534:	ca 01       	movw	r24, r20
 536:	00 80       	ld	r0, Z
 538:	02 c0       	rjmp	.+4      	; 0x53e <initColumns+0x1a>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <initColumns+0x16>
 542:	80 95       	com	r24
 544:	86 23       	and	r24, r22
 546:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 548:	64 b1       	in	r22, 0x04	; 4
 54a:	32 96       	adiw	r30, 0x02	; 2
 54c:	ca 01       	movw	r24, r20
 54e:	0c 90       	ld	r0, X
 550:	02 c0       	rjmp	.+4      	; 0x556 <initColumns+0x32>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <initColumns+0x2e>
 55a:	86 2b       	or	r24, r22
 55c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	23 30       	cpi	r18, 0x03	; 3
 564:	31 05       	cpc	r19, r1
 566:	21 f7       	brne	.-56     	; 0x530 <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}
 568:	08 95       	ret

0000056a <unlock>:
#define BUFFER 250				// pause for 1/4 sec to allow motor to shove off


int unlock(int status)
{
	cli();							// disable interrupt
 56a:	f8 94       	cli
	
	if(status != 0)					// if not open, open
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	09 f0       	breq	.+2      	; 0x572 <unlock+0x8>
		MOTORPORT |= PULLIN;		// FIN goes high, lock shoves off
 570:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	e3 e2       	ldi	r30, 0x23	; 35
 574:	f4 ef       	ldi	r31, 0xF4	; 244
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <unlock+0xc>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <unlock+0x12>
 57c:	00 00       	nop
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 0){				// while not open
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	31 f4       	brne	.+12     	; 0x58e <unlock+0x24>
 582:	09 c0       	rjmp	.+18     	; 0x596 <unlock+0x2c>
									
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 584:	1e 99       	sbic	0x03, 6	; 3
 586:	fe cf       	rjmp	.-4      	; 0x584 <unlock+0x1a>
			status = 0;						// lock is 0=open
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	04 c0       	rjmp	.+8      	; 0x596 <unlock+0x2c>
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 0){				// while not open
									
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 58e:	1e 99       	sbic	0x03, 6	; 3
 590:	f9 cf       	rjmp	.-14     	; 0x584 <unlock+0x1a>
			status = 0;						// lock is 0=open
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
	}		

	MOTORPORT &= ~PULLIN;		// FIN goes low, lock stops
 596:	5c 98       	cbi	0x0b, 4	; 11
	sei();						// re-enable interrupt
 598:	78 94       	sei
	return status;				// update lock state
}
 59a:	08 95       	ret

0000059c <lock>:

int lock(int status)
{
	cli();						// disable interrupt
 59c:	f8 94       	cli
	
	if(status != 1)					// if not locked, lock
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	91 05       	cpc	r25, r1
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <lock+0xa>
		MOTORPORT |= PUSHOUT;		// RIN goes high, lock shoves off
 5a4:	5b 9a       	sbi	0x0b, 3	; 11
 5a6:	e3 e2       	ldi	r30, 0x23	; 35
 5a8:	f4 ef       	ldi	r31, 0xF4	; 244
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <lock+0xe>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <lock+0x14>
 5b0:	00 00       	nop
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 1){				// while not open
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	91 05       	cpc	r25, r1
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <lock+0x28>
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <lock+0x30>
	
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 5ba:	1e 99       	sbic	0x03, 6	; 3
 5bc:	fe cf       	rjmp	.-4      	; 0x5ba <lock+0x1e>
			status = 1;						// lock is 1=locked
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <lock+0x30>
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 1){				// while not open
	
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 5c4:	1e 99       	sbic	0x03, 6	; 3
 5c6:	f9 cf       	rjmp	.-14     	; 0x5ba <lock+0x1e>
			status = 1;						// lock is 1=locked
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
	}

	MOTORPORT &= ~PUSHOUT;		// RIN goes low, lock stops
 5cc:	5b 98       	cbi	0x0b, 3	; 11
	sei();						// re-enable interrupt
 5ce:	78 94       	sei
	return status;				// update lock state
}
 5d0:	08 95       	ret

000005d2 <testLock>:
 #include "lockCode.c"			// lockcCocde.h function library - Functions only


 int testLock(int status){
	 int lock_state = 1;
	 DDRD |= (1 << PD6);
 5d2:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD |= (1 << PD6);
 5d4:	5e 9a       	sbi	0x0b, 6	; 11
	 return lock_state;
 }
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	08 95       	ret

000005dc <testUnlock>:

 int testUnlock(int status){
	 int lock_state = 0;
	 DDRD |= (1 << PD6);
 5dc:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD &= ~(1 << PD6);
 5de:	5e 98       	cbi	0x0b, 6	; 11
	 return lock_state;
 }
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <testfun>:

 void testfun(int on_off){
	 DDRD |= (1 << PD7);
 5e6:	57 9a       	sbi	0x0a, 7	; 10
	 if (on_off == 1)
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	91 05       	cpc	r25, r1
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <testfun+0xc>
	 PORTD |= (1 << PD7);
 5ee:	5f 9a       	sbi	0x0b, 7	; 11
 5f0:	08 95       	ret
	 else
	 PORTD &= ~(1 << PD7);
 5f2:	5f 98       	cbi	0x0b, 7	; 11
 5f4:	08 95       	ret

000005f6 <__vector_3>:
 }

 ISR(PCINT0_vect){
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
 618:	81 ee       	ldi	r24, 0xE1	; 225
 61a:	94 e0       	ldi	r25, 0x04	; 4
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <__vector_3+0x26>
 620:	00 c0       	rjmp	.+0      	; 0x622 <__vector_3+0x2c>
 622:	00 00       	nop
	 _delay_ms(5);
	 if(getButtonState()){
 624:	4e de       	rcall	.-868    	; 0x2c2 <getButtonState>
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	41 f0       	breq	.+16     	; 0x63a <__vector_3+0x44>
		 getKeyPress();
 62a:	04 df       	rcall	.-504    	; 0x434 <getKeyPress>
 62c:	8d e3       	ldi	r24, 0x3D	; 61
 62e:	99 e4       	ldi	r25, 0x49	; 73
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <__vector_3+0x3a>
 634:	00 c0       	rjmp	.+0      	; 0x636 <__vector_3+0x40>
 636:	00 00       	nop
 638:	08 c0       	rjmp	.+16     	; 0x64a <__vector_3+0x54>
		 _delay_ms(75);
		 
	 }
	 else if(!getButtonState()){
 63a:	43 de       	rcall	.-890    	; 0x2c2 <getButtonState>
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	29 f4       	brne	.+10     	; 0x64a <__vector_3+0x54>
		 pushKey(current_key);
 640:	80 91 80 01 	lds	r24, 0x0180
 644:	90 91 81 01 	lds	r25, 0x0181
 648:	29 df       	rcall	.-430    	; 0x49c <pushKey>
	 }
 }
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <main>:

 int main(void) {
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
 674:	c6 58       	subi	r28, 0x86	; 134
 676:	d0 40       	sbci	r29, 0x00	; 0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
	 // initialize
	// short int testcode[9] = {'3','2','1','\0','\0','\0','\0','\0','\0'};
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 682:	de 01       	movw	r26, r28
 684:	11 96       	adiw	r26, 0x01	; 1
 686:	e0 e0       	ldi	r30, 0x00	; 0
 688:	f1 e0       	ldi	r31, 0x01	; 1
 68a:	88 e0       	ldi	r24, 0x08	; 8
 68c:	01 90       	ld	r0, Z+
 68e:	0d 92       	st	X+, r0
 690:	81 50       	subi	r24, 0x01	; 1
 692:	e1 f7       	brne	.-8      	; 0x68c <main+0x20>
	int cols[] = {COL1, COL2, COL3};
 694:	de 01       	movw	r26, r28
 696:	19 96       	adiw	r26, 0x09	; 9
 698:	e8 e0       	ldi	r30, 0x08	; 8
 69a:	f1 e0       	ldi	r31, 0x01	; 1
 69c:	86 e0       	ldi	r24, 0x06	; 6
 69e:	01 90       	ld	r0, Z+
 6a0:	0d 92       	st	X+, r0
 6a2:	81 50       	subi	r24, 0x01	; 1
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x32>
														// in the queue
	int code_is_correct;								 
	int lock_state = 2;									// initialized lock variable to intermediate status		
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 6a6:	e8 e6       	ldi	r30, 0x68	; 104
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	80 83       	st	Z, r24
 6b0:	fe 01       	movw	r30, r28
 6b2:	31 96       	adiw	r30, 0x01	; 1
	 else if(!getButtonState()){
		 pushKey(current_key);
	 }
 }

 int main(void) {
 6b4:	9e 01       	movw	r18, r28
 6b6:	27 5f       	subi	r18, 0xF7	; 247
 6b8:	3f 4f       	sbci	r19, 0xFF	; 255
	int lock_state = 2;									// initialized lock variable to intermediate status		
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 6ba:	ab e6       	ldi	r26, 0x6B	; 107
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	6c 91       	ld	r22, X
 6c4:	80 81       	ld	r24, Z
 6c6:	32 96       	adiw	r30, 0x02	; 2
 6c8:	8a 01       	movw	r16, r20
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <main+0x64>
 6cc:	00 0f       	add	r16, r16
 6ce:	11 1f       	adc	r17, r17
 6d0:	8a 95       	dec	r24
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <main+0x60>
 6d4:	c8 01       	movw	r24, r16
 6d6:	86 2b       	or	r24, r22
 6d8:	8c 93       	st	X, r24
	int code_is_correct;								 
	int lock_state = 2;									// initialized lock variable to intermediate status		
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 6da:	e2 17       	cp	r30, r18
 6dc:	f3 07       	cpc	r31, r19
 6de:	89 f7       	brne	.-30     	; 0x6c2 <main+0x56>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
	sei();												// global interrupt enable
 6e0:	78 94       	sei
	
	// Initializing arrays 
	char enter_code[16] = {'E','N','T','E','R',' ','C','O','D','E',' ',' ',' ',' ',' ',' '};
 6e2:	de 01       	movw	r26, r28
 6e4:	51 96       	adiw	r26, 0x11	; 17
 6e6:	ee e0       	ldi	r30, 0x0E	; 14
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
 6ea:	80 e1       	ldi	r24, 0x10	; 16
 6ec:	01 90       	ld	r0, Z+
 6ee:	0d 92       	st	X+, r0
 6f0:	81 50       	subi	r24, 0x01	; 1
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <main+0x80>
	char incorrect_code[16] = {'I','N','C','O','R','R','E','C','T',' ','C','O','D','E',' ',' '};
 6f4:	de 01       	movw	r26, r28
 6f6:	91 96       	adiw	r26, 0x21	; 33
 6f8:	ee e1       	ldi	r30, 0x1E	; 30
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	80 e1       	ldi	r24, 0x10	; 16
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	81 50       	subi	r24, 0x01	; 1
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x92>
	char unlocked_menu_1[16] = {'#',' ','-',' ','T','O',' ','L','O','C','K',' ',' ',' ',' ',' ',};
 706:	de 01       	movw	r26, r28
 708:	d1 96       	adiw	r26, 0x31	; 49
 70a:	ee e2       	ldi	r30, 0x2E	; 46
 70c:	f1 e0       	ldi	r31, 0x01	; 1
 70e:	80 e1       	ldi	r24, 0x10	; 16
 710:	01 90       	ld	r0, Z+
 712:	0d 92       	st	X+, r0
 714:	81 50       	subi	r24, 0x01	; 1
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0xa4>
	char unlocked_menu_2[16] = {'*',' ','-',' ','S','E','T',' ','N','E','W',' ','C','O','D','E',};
 718:	de 01       	movw	r26, r28
 71a:	af 5b       	subi	r26, 0xBF	; 191
 71c:	bf 4f       	sbci	r27, 0xFF	; 255
 71e:	ee e3       	ldi	r30, 0x3E	; 62
 720:	f1 e0       	ldi	r31, 0x01	; 1
 722:	80 e1       	ldi	r24, 0x10	; 16
 724:	01 90       	ld	r0, Z+
 726:	0d 92       	st	X+, r0
 728:	81 50       	subi	r24, 0x01	; 1
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0xb8>
	char new_code_menu[16] = {'S','E','T',' ','N','E','W',' ','C','O','D','E',' ',' ',' ',' ',};
 72c:	de 01       	movw	r26, r28
 72e:	af 5a       	subi	r26, 0xAF	; 175
 730:	bf 4f       	sbci	r27, 0xFF	; 255
 732:	ee e4       	ldi	r30, 0x4E	; 78
 734:	f1 e0       	ldi	r31, 0x01	; 1
 736:	80 e1       	ldi	r24, 0x10	; 16
 738:	01 90       	ld	r0, Z+
 73a:	0d 92       	st	X+, r0
 73c:	81 50       	subi	r24, 0x01	; 1
 73e:	e1 f7       	brne	.-8      	; 0x738 <main+0xcc>
	char cancel_code_change[16] = {' ',' ','-','-','C','A','N','C','E','L','E','D','-','-',' ',' ',};
 740:	de 01       	movw	r26, r28
 742:	af 59       	subi	r26, 0x9F	; 159
 744:	bf 4f       	sbci	r27, 0xFF	; 255
 746:	ee e5       	ldi	r30, 0x5E	; 94
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	80 e1       	ldi	r24, 0x10	; 16
 74c:	01 90       	ld	r0, Z+
 74e:	0d 92       	st	X+, r0
 750:	81 50       	subi	r24, 0x01	; 1
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0xe0>
	int current_code[9];
	
	initRows(rows);										// set keypad rows as inputs
 754:	ce 01       	movw	r24, r28
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	cf de       	rcall	.-610    	; 0x4f8 <initRows>
	initColumns(cols);									// set keypad columns as outputs
 75a:	ce 01       	movw	r24, r28
 75c:	09 96       	adiw	r24, 0x09	; 9
 75e:	e2 de       	rcall	.-572    	; 0x524 <initColumns>
	initializeLCD();									// set up LCD and initialize in 4 bit mode
 760:	0a dd       	rcall	.-1516   	; 0x176 <initializeLCD>
	clearKeyQueue();
 762:	ba de       	rcall	.-652    	; 0x4d8 <clearKeyQueue>
	count_queue = 0;
 764:	18 8a       	std	Y+16, r1	; 0x10
 766:	1f 86       	std	Y+15, r1	; 0x0f

	testfun(0);
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	3c df       	rcall	.-392    	; 0x5e6 <testfun>

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
			lock_state = testLock(2);
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	2f df       	rcall	.-418    	; 0x5d2 <testLock>
 774:	5c 01       	movw	r10, r24

	testfun(0);

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	91 05       	cpc	r25, r1
 77a:	c9 f7       	brne	.-14     	; 0x76e <main+0x102>
		
		// Print greeting
		clearLCD();
		writeLCDline(enter_code,1);
		cursorPosition(2);
		readFROMeeprom(current_code);
 77c:	0f 2e       	mov	r0, r31
 77e:	f1 e7       	ldi	r31, 0x71	; 113
 780:	2f 2e       	mov	r2, r31
 782:	33 24       	eor	r3, r3
 784:	f0 2d       	mov	r31, r0
 786:	2c 0e       	add	r2, r28
 788:	3d 1e       	adc	r3, r29
		// While box is in locked state
		while (lock_state == 1) {
				
					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 78a:	0f 2e       	mov	r0, r31
 78c:	f2 e8       	ldi	r31, 0x82	; 130
 78e:	ef 2e       	mov	r14, r31
 790:	f1 e0       	ldi	r31, 0x01	; 1
 792:	ff 2e       	mov	r15, r31
 794:	f0 2d       	mov	r31, r0
	 else if(!getButtonState()){
		 pushKey(current_key);
	 }
 }

 int main(void) {
 796:	0f 2e       	mov	r0, r31
 798:	f2 e1       	ldi	r31, 0x12	; 18
 79a:	6f 2e       	mov	r6, r31
 79c:	77 24       	eor	r7, r7
 79e:	f0 2d       	mov	r31, r0
 7a0:	62 0c       	add	r6, r2
 7a2:	73 1c       	adc	r7, r3
				popKey();
				
				clearLCD();
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
					writeLCDcharacter(key_queue[i]);
 7a4:	cb 57       	subi	r28, 0x7B	; 123
 7a6:	df 4f       	sbci	r29, 0xFF	; 255
 7a8:	e8 82       	st	Y, r14
 7aa:	c5 58       	subi	r28, 0x85	; 133
 7ac:	d0 40       	sbci	r29, 0x00	; 0
 7ae:	ca 57       	subi	r28, 0x7A	; 122
 7b0:	df 4f       	sbci	r29, 0xFF	; 255
 7b2:	f8 82       	st	Y, r15
 7b4:	c6 58       	subi	r28, 0x86	; 134
 7b6:	d0 40       	sbci	r29, 0x00	; 0
	
	// wait loop
	while(1) {
		
		// Print greeting
		clearLCD();
 7b8:	d5 dc       	rcall	.-1622   	; 0x164 <clearLCD>
		writeLCDline(enter_code,1);
 7ba:	ce 01       	movw	r24, r28
 7bc:	41 96       	adiw	r24, 0x11	; 17
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	b6 dc       	rcall	.-1684   	; 0x130 <writeLCDline>
		cursorPosition(2);
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	8a dc       	rcall	.-1772   	; 0xde <cursorPosition>
		readFROMeeprom(current_code);
 7ca:	c1 01       	movw	r24, r2
 7cc:	30 dd       	rcall	.-1440   	; 0x22e <readFROMeeprom>

		// While box is in locked state
		while (lock_state == 1) {
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	a8 16       	cp	r10, r24
 7d2:	b1 04       	cpc	r11, r1
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <main+0x16c>
 7d6:	d4 c0       	rjmp	.+424    	; 0x980 <main+0x314>
				code_is_correct = 1;
				popKey();
				
				clearLCD();
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
 7d8:	44 24       	eor	r4, r4
 7da:	55 24       	eor	r5, r5
	 else if(!getButtonState()){
		 pushKey(current_key);
	 }
 }

 int main(void) {
 7dc:	cd 57       	subi	r28, 0x7D	; 125
 7de:	df 4f       	sbci	r29, 0xFF	; 255
 7e0:	28 82       	st	Y, r2
 7e2:	c3 58       	subi	r28, 0x83	; 131
 7e4:	d0 40       	sbci	r29, 0x00	; 0
 7e6:	cc 57       	subi	r28, 0x7C	; 124
 7e8:	df 4f       	sbci	r29, 0xFF	; 255
 7ea:	38 82       	st	Y, r3
 7ec:	c4 58       	subi	r28, 0x84	; 132
 7ee:	d0 40       	sbci	r29, 0x00	; 0
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
 7f0:	94 2c       	mov	r9, r4
 7f2:	85 2c       	mov	r8, r5
		// While box is in locked state
		while (lock_state == 1) {
				
					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 7f4:	8f 85       	ldd	r24, Y+15	; 0x0f
 7f6:	98 89       	ldd	r25, Y+16	; 0x10
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	8e 0d       	add	r24, r14
 7fe:	9f 1d       	adc	r25, r15
 800:	dc 01       	movw	r26, r24
 802:	8d 91       	ld	r24, X+
 804:	9c 91       	ld	r25, X
 806:	11 97       	sbiw	r26, 0x01	; 1
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	a1 f3       	breq	.-24     	; 0x7f4 <main+0x188>
			
			// Now that we have a key press we need to look at what was pressed.
			// Is the first key in the queue a '#'...
			if(key_queue[0] == '#'){
 80c:	f7 01       	movw	r30, r14
 80e:	80 81       	ld	r24, Z
 810:	91 81       	ldd	r25, Z+1	; 0x01
 812:	83 32       	cpi	r24, 0x23	; 35
 814:	91 05       	cpc	r25, r1
 816:	69 f4       	brne	.+26     	; 0x832 <main+0x1c6>
				clearLCD();
 818:	a5 dc       	rcall	.-1718   	; 0x164 <clearLCD>
				writeLCDline(enter_code,1);
 81a:	ce 01       	movw	r24, r28
 81c:	41 96       	adiw	r24, 0x11	; 17
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	86 dc       	rcall	.-1780   	; 0x130 <writeLCDline>
				cursorPosition(2);
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	5a dc       	rcall	.-1868   	; 0xde <cursorPosition>
				clearKeyQueue();
 82a:	56 de       	rcall	.-852    	; 0x4d8 <clearKeyQueue>
				count_queue = 0;
 82c:	58 8a       	std	Y+16, r5	; 0x10
 82e:	4f 86       	std	Y+15, r4	; 0x0f
 830:	a2 c0       	rjmp	.+324    	; 0x976 <main+0x30a>
				//testfun(1);
				
			// ...or is the first key in the queue a digit?...
			} else if(key_queue[0] >= '0' && key_queue[0] <= '9' && count_queue < 8){
 832:	80 81       	ld	r24, Z
 834:	91 81       	ldd	r25, Z+1	; 0x01
 836:	80 33       	cpi	r24, 0x30	; 48
 838:	91 05       	cpc	r25, r1
 83a:	9c f0       	brlt	.+38     	; 0x862 <main+0x1f6>
 83c:	80 81       	ld	r24, Z
 83e:	91 81       	ldd	r25, Z+1	; 0x01
 840:	8a 33       	cpi	r24, 0x3A	; 58
 842:	91 05       	cpc	r25, r1
 844:	74 f4       	brge	.+28     	; 0x862 <main+0x1f6>
 846:	8f 85       	ldd	r24, Y+15	; 0x0f
 848:	98 89       	ldd	r25, Y+16	; 0x10
 84a:	88 30       	cpi	r24, 0x08	; 8
 84c:	91 05       	cpc	r25, r1
 84e:	4c f4       	brge	.+18     	; 0x862 <main+0x1f6>
				writeLCDcharacter(key_queue[0]);
 850:	80 81       	ld	r24, Z
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	66 dc       	rcall	.-1844   	; 0x122 <writeLCDcharacter>
				count_queue++;
 856:	8f 85       	ldd	r24, Y+15	; 0x0f
 858:	98 89       	ldd	r25, Y+16	; 0x10
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	98 8b       	std	Y+16, r25	; 0x10
 85e:	8f 87       	std	Y+15, r24	; 0x0f
 860:	8a c0       	rjmp	.+276    	; 0x976 <main+0x30a>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} else if(key_queue[0] == '*') {
 862:	f7 01       	movw	r30, r14
 864:	80 81       	ld	r24, Z
 866:	91 81       	ldd	r25, Z+1	; 0x01
 868:	8a 32       	cpi	r24, 0x2A	; 42
 86a:	91 05       	cpc	r25, r1
 86c:	09 f0       	breq	.+2      	; 0x870 <main+0x204>
 86e:	83 c0       	rjmp	.+262    	; 0x976 <main+0x30a>
				count = 0;
				code_is_correct = 1;
				popKey();
 870:	f0 dd       	rcall	.-1056   	; 0x452 <popKey>
				
				clearLCD();
 872:	78 dc       	rcall	.-1808   	; 0x164 <clearLCD>
				cursorPosition(1);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	32 dc       	rcall	.-1948   	; 0xde <cursorPosition>
				for(int i = 0; i < 10; i++){
 87a:	82 01       	movw	r16, r4
					writeLCDcharacter(key_queue[i]);
 87c:	c8 01       	movw	r24, r16
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	8e 0d       	add	r24, r14
 884:	9f 1d       	adc	r25, r15
 886:	dc 01       	movw	r26, r24
 888:	8d 91       	ld	r24, X+
 88a:	9c 91       	ld	r25, X
 88c:	4a dc       	rcall	.-1900   	; 0x122 <writeLCDcharacter>
				code_is_correct = 1;
				popKey();
				
				clearLCD();
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
 88e:	0f 5f       	subi	r16, 0xFF	; 255
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	0a 30       	cpi	r16, 0x0A	; 10
 894:	11 05       	cpc	r17, r1
 896:	91 f7       	brne	.-28     	; 0x87c <main+0x210>
					writeLCDcharacter(key_queue[i]);
				}
				cursorPosition(2);
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	20 dc       	rcall	.-1984   	; 0xde <cursorPosition>
 89e:	61 01       	movw	r12, r2
	 else if(!getButtonState()){
		 pushKey(current_key);
	 }
 }

 int main(void) {
 8a0:	cd 57       	subi	r28, 0x7D	; 125
 8a2:	df 4f       	sbci	r29, 0xFF	; 255
 8a4:	08 81       	ld	r16, Y
 8a6:	c3 58       	subi	r28, 0x83	; 131
 8a8:	d0 40       	sbci	r29, 0x00	; 0
 8aa:	cc 57       	subi	r28, 0x7C	; 124
 8ac:	df 4f       	sbci	r29, 0xFF	; 255
 8ae:	18 81       	ld	r17, Y
 8b0:	c4 58       	subi	r28, 0x84	; 132
 8b2:	d0 40       	sbci	r29, 0x00	; 0
				for(int i = 0; i < 10; i++){
					writeLCDcharacter(key_queue[i]);
				}
				cursorPosition(2);
				for(int i = 0; i < 9; i++){
					writeLCDcharacter(current_code[i]);
 8b4:	f8 01       	movw	r30, r16
 8b6:	81 91       	ld	r24, Z+
 8b8:	91 91       	ld	r25, Z+
 8ba:	8f 01       	movw	r16, r30
 8bc:	32 dc       	rcall	.-1948   	; 0x122 <writeLCDcharacter>
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
					writeLCDcharacter(key_queue[i]);
				}
				cursorPosition(2);
				for(int i = 0; i < 9; i++){
 8be:	06 15       	cp	r16, r6
 8c0:	17 05       	cpc	r17, r7
 8c2:	c1 f7       	brne	.-16     	; 0x8b4 <main+0x248>
 8c4:	8f e3       	ldi	r24, 0x3F	; 63
 8c6:	9d e0       	ldi	r25, 0x0D	; 13
 8c8:	a3 e0       	ldi	r26, 0x03	; 3
 8ca:	81 50       	subi	r24, 0x01	; 1
 8cc:	90 40       	sbci	r25, 0x00	; 0
 8ce:	a0 40       	sbci	r26, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <main+0x25e>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0x268>
 8d4:	00 00       	nop
				}
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
 8d6:	d7 01       	movw	r26, r14
 8d8:	8d 91       	ld	r24, X+
 8da:	9c 91       	ld	r25, X
 8dc:	11 97       	sbiw	r26, 0x01	; 1
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <main+0x278>
 8e2:	49 c0       	rjmp	.+146    	; 0x976 <main+0x30a>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} else if(key_queue[0] == '*') {
				count = 0;
				code_is_correct = 1;
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	70 e0       	ldi	r23, 0x00	; 0
				count_queue++;
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} else if(key_queue[0] == '*') {
				count = 0;
 8e8:	a2 01       	movw	r20, r4
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
					if(key_queue[count] != current_code[count])
 8ea:	ca 01       	movw	r24, r20
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	8e 0d       	add	r24, r14
 8f2:	9f 1d       	adc	r25, r15
 8f4:	fc 01       	movw	r30, r24
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	d6 01       	movw	r26, r12
 8fc:	2d 91       	ld	r18, X+
 8fe:	3d 91       	ld	r19, X+
 900:	6d 01       	movw	r12, r26
 902:	82 17       	cp	r24, r18
 904:	93 07       	cpc	r25, r19
 906:	11 f0       	breq	.+4      	; 0x90c <main+0x2a0>
						code_is_correct = 0;
 908:	69 2d       	mov	r22, r9
 90a:	78 2d       	mov	r23, r8
					++count;				
 90c:	4f 5f       	subi	r20, 0xFF	; 255
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
				}
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
 910:	ca 01       	movw	r24, r20
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	8e 0d       	add	r24, r14
 918:	9f 1d       	adc	r25, r15
 91a:	fc 01       	movw	r30, r24
 91c:	80 81       	ld	r24, Z
 91e:	91 81       	ldd	r25, Z+1	; 0x01
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	19 f7       	brne	.-58     	; 0x8ea <main+0x27e>
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
					++count;				
 924:	ca 01       	movw	r24, r20
				}
				if(!code_is_correct && count > 0){
 926:	61 15       	cp	r22, r1
 928:	71 05       	cpc	r23, r1
 92a:	f9 f4       	brne	.+62     	; 0x96a <main+0x2fe>
 92c:	18 16       	cp	r1, r24
 92e:	19 06       	cpc	r1, r25
 930:	14 f5       	brge	.+68     	; 0x976 <main+0x30a>
					clearLCD();
 932:	18 dc       	rcall	.-2000   	; 0x164 <clearLCD>
					writeLCDline(incorrect_code,1);
 934:	ce 01       	movw	r24, r28
 936:	81 96       	adiw	r24, 0x21	; 33
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	f9 db       	rcall	.-2062   	; 0x130 <writeLCDline>
 93e:	8f e3       	ldi	r24, 0x3F	; 63
 940:	92 e4       	ldi	r25, 0x42	; 66
 942:	af e0       	ldi	r26, 0x0F	; 15
 944:	81 50       	subi	r24, 0x01	; 1
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	a0 40       	sbci	r26, 0x00	; 0
 94a:	e1 f7       	brne	.-8      	; 0x944 <main+0x2d8>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <main+0x2e2>
 94e:	00 00       	nop
					_delay_ms(5000);
					clearKeyQueue();
 950:	c3 dd       	rcall	.-1146   	; 0x4d8 <clearKeyQueue>
					count_queue = 0;
 952:	58 8a       	std	Y+16, r5	; 0x10
 954:	4f 86       	std	Y+15, r4	; 0x0f
					clearLCD();
 956:	06 dc       	rcall	.-2036   	; 0x164 <clearLCD>
					writeLCDline(enter_code,1);
 958:	ce 01       	movw	r24, r28
 95a:	41 96       	adiw	r24, 0x11	; 17
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	e7 db       	rcall	.-2098   	; 0x130 <writeLCDline>
					cursorPosition(2);
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	bb db       	rcall	.-2186   	; 0xde <cursorPosition>
 968:	06 c0       	rjmp	.+12     	; 0x976 <main+0x30a>
				}else if(code_is_correct && count > 0){
 96a:	14 16       	cp	r1, r20
 96c:	15 06       	cpc	r1, r21
 96e:	1c f4       	brge	.+6      	; 0x976 <main+0x30a>

					// Unlock the box
					lock_state = testUnlock(lock_state);
 970:	c5 01       	movw	r24, r10
 972:	34 de       	rcall	.-920    	; 0x5dc <testUnlock>
 974:	5c 01       	movw	r10, r24
		writeLCDline(enter_code,1);
		cursorPosition(2);
		readFROMeeprom(current_code);

		// While box is in locked state
		while (lock_state == 1) {
 976:	91 e0       	ldi	r25, 0x01	; 1
 978:	a9 16       	cp	r10, r25
 97a:	b1 04       	cpc	r11, r1
 97c:	09 f4       	brne	.+2      	; 0x980 <main+0x314>
 97e:	3a cf       	rjmp	.-396    	; 0x7f4 <main+0x188>
				}
			}					
		} // End while (lock_state == 1)

		// While box is in unlocked state
			while (lock_state == 0 ) {
 980:	a1 14       	cp	r10, r1
 982:	b1 04       	cpc	r11, r1
 984:	09 f0       	breq	.+2      	; 0x988 <main+0x31c>
 986:	18 cf       	rjmp	.-464    	; 0x7b8 <main+0x14c>

				// Write unlocked menu
				clearLCD();
 988:	ed db       	rcall	.-2086   	; 0x164 <clearLCD>
				writeLCDline(unlocked_menu_1, 1);
 98a:	ce 01       	movw	r24, r28
 98c:	c1 96       	adiw	r24, 0x31	; 49
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	ce db       	rcall	.-2148   	; 0x130 <writeLCDline>
				writeLCDline(unlocked_menu_2, 2);
 994:	ce 01       	movw	r24, r28
 996:	8f 5b       	subi	r24, 0xBF	; 191
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	62 e0       	ldi	r22, 0x02	; 2
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	c8 db       	rcall	.-2160   	; 0x130 <writeLCDline>

				clearKeyQueue();
 9a0:	9b dd       	rcall	.-1226   	; 0x4d8 <clearKeyQueue>
				count_queue = 0;
 9a2:	18 8a       	std	Y+16, r1	; 0x10
 9a4:	1f 86       	std	Y+15, r1	; 0x0f

				// Wait for key press
				while(key_queue[count_queue] == '\0');
 9a6:	ef 85       	ldd	r30, Y+15	; 0x0f
 9a8:	f8 89       	ldd	r31, Y+16	; 0x10
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	ee 0d       	add	r30, r14
 9b0:	ff 1d       	adc	r31, r15
 9b2:	80 81       	ld	r24, Z
 9b4:	91 81       	ldd	r25, Z+1	; 0x01
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	b1 f3       	breq	.-20     	; 0x9a6 <main+0x33a>

				// Now that we have a key press we need to look at what was pressed.
				// Is the first key in the queue a '#'...
				if(key_queue[0] == '#'){
 9ba:	d7 01       	movw	r26, r14
 9bc:	8d 91       	ld	r24, X+
 9be:	9c 91       	ld	r25, X
 9c0:	11 97       	sbiw	r26, 0x01	; 1
 9c2:	83 32       	cpi	r24, 0x23	; 35
 9c4:	91 05       	cpc	r25, r1
 9c6:	79 f4       	brne	.+30     	; 0x9e6 <main+0x37a>
					lock_state = testLock(lock_state);
 9c8:	c5 01       	movw	r24, r10
 9ca:	03 de       	rcall	.-1018   	; 0x5d2 <testLock>
 9cc:	5c 01       	movw	r10, r24
					clearKeyQueue();
 9ce:	84 dd       	rcall	.-1272   	; 0x4d8 <clearKeyQueue>
					count_queue = 0;
 9d0:	18 8a       	std	Y+16, r1	; 0x10
 9d2:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(enter_code,1);
 9d4:	ce 01       	movw	r24, r28
 9d6:	41 96       	adiw	r24, 0x11	; 17
 9d8:	61 e0       	ldi	r22, 0x01	; 1
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	a9 db       	rcall	.-2222   	; 0x130 <writeLCDline>
					cursorPosition(2);
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	7d db       	rcall	.-2310   	; 0xde <cursorPosition>
 9e4:	6f c0       	rjmp	.+222    	; 0xac4 <main+0x458>

				// ...or is the first key in the queue a '*'?
				} else if(key_queue[0] == '*'){
 9e6:	f7 01       	movw	r30, r14
 9e8:	80 81       	ld	r24, Z
 9ea:	91 81       	ldd	r25, Z+1	; 0x01
 9ec:	8a 32       	cpi	r24, 0x2A	; 42
 9ee:	91 05       	cpc	r25, r1
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <main+0x388>
 9f2:	68 c0       	rjmp	.+208    	; 0xac4 <main+0x458>
					
					clearLCD();
 9f4:	b7 db       	rcall	.-2194   	; 0x164 <clearLCD>
					clearKeyQueue();
 9f6:	70 dd       	rcall	.-1312   	; 0x4d8 <clearKeyQueue>
					count_queue = 0;
 9f8:	18 8a       	std	Y+16, r1	; 0x10
 9fa:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(new_code_menu, 1);
 9fc:	ce 01       	movw	r24, r28
 9fe:	8f 5a       	subi	r24, 0xAF	; 175
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	94 db       	rcall	.-2264   	; 0x130 <writeLCDline>
					cursorPosition(2);
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	68 db       	rcall	.-2352   	; 0xde <cursorPosition>

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 a0e:	52 c0       	rjmp	.+164    	; 0xab4 <main+0x448>
						
						// Wait for key press
						while(key_queue[count_queue] == '\0');
 a10:	ef 85       	ldd	r30, Y+15	; 0x0f
 a12:	f8 89       	ldd	r31, Y+16	; 0x10
 a14:	ee 0f       	add	r30, r30
 a16:	ff 1f       	adc	r31, r31
 a18:	ee 0d       	add	r30, r14
 a1a:	ff 1d       	adc	r31, r15
 a1c:	80 81       	ld	r24, Z
 a1e:	91 81       	ldd	r25, Z+1	; 0x01
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	b1 f3       	breq	.-20     	; 0xa10 <main+0x3a4>

						// Was the latest key pressed between 0 and 9, AND has the user
						// entered less than the max number (8) of digits allowed for the
						// code.
						if(key_queue[0] >= '0' && key_queue[0] <= '9' && count_queue < 9){
 a24:	d7 01       	movw	r26, r14
 a26:	8d 91       	ld	r24, X+
 a28:	9c 91       	ld	r25, X
 a2a:	11 97       	sbiw	r26, 0x01	; 1
 a2c:	80 33       	cpi	r24, 0x30	; 48
 a2e:	91 05       	cpc	r25, r1
 a30:	a4 f0       	brlt	.+40     	; 0xa5a <main+0x3ee>
 a32:	8d 91       	ld	r24, X+
 a34:	9c 91       	ld	r25, X
 a36:	11 97       	sbiw	r26, 0x01	; 1
 a38:	8a 33       	cpi	r24, 0x3A	; 58
 a3a:	91 05       	cpc	r25, r1
 a3c:	74 f4       	brge	.+28     	; 0xa5a <main+0x3ee>
 a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
 a40:	98 89       	ldd	r25, Y+16	; 0x10
 a42:	89 30       	cpi	r24, 0x09	; 9
 a44:	91 05       	cpc	r25, r1
 a46:	4c f4       	brge	.+18     	; 0xa5a <main+0x3ee>
							// QUESTION: DO WE NEED TO MANUALLY SHIFT THE QUEUE??
							writeLCDcharacter(key_queue[0]);
 a48:	8d 91       	ld	r24, X+
 a4a:	9c 91       	ld	r25, X
 a4c:	6a db       	rcall	.-2348   	; 0x122 <writeLCDcharacter>
							++count_queue;
 a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
 a50:	98 89       	ldd	r25, Y+16	; 0x10
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	98 8b       	std	Y+16, r25	; 0x10
 a56:	8f 87       	std	Y+15, r24	; 0x0f
 a58:	2d c0       	rjmp	.+90     	; 0xab4 <main+0x448>
						
						// If the latest key pressed is '*' then lets write the new
						// code to eeprom
						} else if (key_queue[0] == '*') {
 a5a:	f7 01       	movw	r30, r14
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	8a 32       	cpi	r24, 0x2A	; 42
 a62:	91 05       	cpc	r25, r1
 a64:	69 f4       	brne	.+26     	; 0xa80 <main+0x414>
							popKey();
 a66:	f5 dc       	rcall	.-1558   	; 0x452 <popKey>
							writeTOeeprom(key_queue);
 a68:	cb 57       	subi	r28, 0x7B	; 123
 a6a:	df 4f       	sbci	r29, 0xFF	; 255
 a6c:	88 81       	ld	r24, Y
 a6e:	c5 58       	subi	r28, 0x85	; 133
 a70:	d0 40       	sbci	r29, 0x00	; 0
 a72:	ca 57       	subi	r28, 0x7A	; 122
 a74:	df 4f       	sbci	r29, 0xFF	; 255
 a76:	98 81       	ld	r25, Y
 a78:	c6 58       	subi	r28, 0x86	; 134
 a7a:	d0 40       	sbci	r29, 0x00	; 0
 a7c:	b3 db       	rcall	.-2202   	; 0x1e4 <writeTOeeprom>
							break;
 a7e:	22 c0       	rjmp	.+68     	; 0xac4 <main+0x458>

						// Otherwise the only key left is '#', so that's what must've been
						// pressed. :)
						} else if(key_queue[0] == '#') {
 a80:	80 81       	ld	r24, Z
 a82:	91 81       	ldd	r25, Z+1	; 0x01
 a84:	83 32       	cpi	r24, 0x23	; 35
 a86:	91 05       	cpc	r25, r1
 a88:	a9 f4       	brne	.+42     	; 0xab4 <main+0x448>
							clearLCD();
 a8a:	6c db       	rcall	.-2344   	; 0x164 <clearLCD>
							writeLCDline(cancel_code_change,1);
 a8c:	ce 01       	movw	r24, r28
 a8e:	8f 59       	subi	r24, 0x9F	; 159
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	61 e0       	ldi	r22, 0x01	; 1
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	4c db       	rcall	.-2408   	; 0x130 <writeLCDline>
 a98:	8f e3       	ldi	r24, 0x3F	; 63
 a9a:	92 e4       	ldi	r25, 0x42	; 66
 a9c:	af e0       	ldi	r26, 0x0F	; 15
 a9e:	81 50       	subi	r24, 0x01	; 1
 aa0:	90 40       	sbci	r25, 0x00	; 0
 aa2:	a0 40       	sbci	r26, 0x00	; 0
 aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x432>
 aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0x43c>
 aa8:	00 00       	nop
							_delay_ms(5000);
							clearKeyQueue();
 aaa:	16 dd       	rcall	.-1492   	; 0x4d8 <clearKeyQueue>
							count_queue = 0;
 aac:	18 8a       	std	Y+16, r1	; 0x10
 aae:	1f 86       	std	Y+15, r1	; 0x0f
							clearLCD();
 ab0:	59 db       	rcall	.-2382   	; 0x164 <clearLCD>
							break;
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <main+0x458>
					writeLCDline(new_code_menu, 1);
					cursorPosition(2);

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 ab4:	d7 01       	movw	r26, r14
 ab6:	8d 91       	ld	r24, X+
 ab8:	9c 91       	ld	r25, X
 aba:	11 97       	sbiw	r26, 0x01	; 1
 abc:	8a 32       	cpi	r24, 0x2A	; 42
 abe:	91 05       	cpc	r25, r1
 ac0:	09 f0       	breq	.+2      	; 0xac4 <main+0x458>
 ac2:	a6 cf       	rjmp	.-180    	; 0xa10 <main+0x3a4>
				}
			}					
		} // End while (lock_state == 1)

		// While box is in unlocked state
			while (lock_state == 0 ) {
 ac4:	a1 14       	cp	r10, r1
 ac6:	b1 04       	cpc	r11, r1
 ac8:	09 f0       	breq	.+2      	; 0xacc <main+0x460>
 aca:	76 ce       	rjmp	.-788    	; 0x7b8 <main+0x14c>
 acc:	5d cf       	rjmp	.-326    	; 0x988 <main+0x31c>

00000ace <__eerd_byte_m48a>:
 ace:	f9 99       	sbic	0x1f, 1	; 31
 ad0:	fe cf       	rjmp	.-4      	; 0xace <__eerd_byte_m48a>
 ad2:	12 bc       	out	0x22, r1	; 34
 ad4:	81 bd       	out	0x21, r24	; 33
 ad6:	f8 9a       	sbi	0x1f, 0	; 31
 ad8:	99 27       	eor	r25, r25
 ada:	80 b5       	in	r24, 0x20	; 32
 adc:	08 95       	ret

00000ade <__eewr_byte_m48a>:
 ade:	26 2f       	mov	r18, r22

00000ae0 <__eewr_r18_m48a>:
 ae0:	f9 99       	sbic	0x1f, 1	; 31
 ae2:	fe cf       	rjmp	.-4      	; 0xae0 <__eewr_r18_m48a>
 ae4:	1f ba       	out	0x1f, r1	; 31
 ae6:	12 bc       	out	0x22, r1	; 34
 ae8:	81 bd       	out	0x21, r24	; 33
 aea:	20 bd       	out	0x20, r18	; 32
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	f8 94       	cli
 af0:	fa 9a       	sbi	0x1f, 2	; 31
 af2:	f9 9a       	sbi	0x1f, 1	; 31
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	01 96       	adiw	r24, 0x01	; 1
 af8:	08 95       	ret

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
