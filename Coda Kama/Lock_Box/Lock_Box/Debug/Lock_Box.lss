
Lock_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000b32  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800182  00800182  00000c48  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000015d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001145  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000029b  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000702  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6f  00000000  00000000  00003855  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000043c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	dd c2       	rjmp	.+1466   	; 0x5c2 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	8a c3       	rjmp	.+1812   	; 0x72c <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e3       	ldi	r30, 0x32	; 50
  48:	fb e0       	ldi	r31, 0x0B	; 11
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 38       	cpi	r26, 0x82	; 130
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e8       	ldi	r26, 0x82	; 130
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 3b       	cpi	r26, 0xB0	; 176
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b4 d3       	rcall	.+1896   	; 0x7d0 <main>
  68:	62 c5       	rjmp	.+2756   	; 0xb2e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <resetTimer>:
	OCR1A = TIMEOUT;
	resetTimer();
}

void resetTimer(void){
	TCNT1 = 0x0000;							// reset 16-bit counter to 0
  6c:	10 92 85 00 	sts	0x0085, r1
  70:	10 92 84 00 	sts	0x0084, r1
}
  74:	08 95       	ret

00000076 <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  76:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	89 ef       	ldi	r24, 0xF9	; 249
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <pulseElatch+0x6>
  80:	00 c0       	rjmp	.+0      	; 0x82 <pulseElatch+0xc>
  82:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  84:	44 98       	cbi	0x08, 4	; 8
}
  86:	08 95       	ret

00000088 <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  90:	8c 01       	movw	r16, r24
  92:	00 7f       	andi	r16, 0xF0	; 240
  94:	10 70       	andi	r17, 0x00	; 0
  96:	15 95       	asr	r17
  98:	07 95       	ror	r16
  9a:	15 95       	asr	r17
  9c:	07 95       	ror	r16
  9e:	15 95       	asr	r17
  a0:	07 95       	ror	r16
  a2:	15 95       	asr	r17
  a4:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  a6:	ec 01       	movw	r28, r24
  a8:	cf 70       	andi	r28, 0x0F	; 15
  aa:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	80 2b       	or	r24, r16
  b6:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  b8:	de df       	rcall	.-68     	; 0x76 <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	00 95       	com	r16
  be:	08 23       	and	r16, r24
  c0:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8c 2b       	or	r24, r28
  c6:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  c8:	d6 df       	rcall	.-84     	; 0x76 <pulseElatch>
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <writeLCDdata+0x46>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <writeLCDdata+0x4c>
  d4:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	c0 95       	com	r28
  da:	c8 23       	and	r28, r24
  dc:	c8 b9       	out	0x08, r28	; 8
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
  f2:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  f4:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
  f6:	58 98       	cbi	0x0b, 0	; 11
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	c5 df       	rcall	.-118    	; 0x88 <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
  fe:	c2 30       	cpi	r28, 0x02	; 2
 100:	d1 05       	cpc	r29, r1
 102:	59 f4       	brne	.+22     	; 0x11a <cursorPosition+0x32>
	{
		writeLCDdata(0x2);			// Sending the cursor home
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	bf df       	rcall	.-130    	; 0x88 <writeLCDdata>
 10a:	c8 e2       	ldi	r28, 0x28	; 40
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 10e:	84 e1       	ldi	r24, 0x14	; 20
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	ba df       	rcall	.-140    	; 0x88 <writeLCDdata>
 114:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 116:	d9 f7       	brne	.-10     	; 0x10e <cursorPosition+0x26>
 118:	03 c0       	rjmp	.+6      	; 0x120 <cursorPosition+0x38>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b4 df       	rcall	.-152    	; 0x88 <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	b1 df       	rcall	.-158    	; 0x88 <writeLCDdata>
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 130:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 132:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 134:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(character);		// Sending the character on the data lines
 136:	a8 df       	rcall	.-176    	; 0x88 <writeLCDdata>
}
 138:	08 95       	ret

0000013a <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
 144:	d9 2f       	mov	r29, r25
 146:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 148:	cf df       	rcall	.-98     	; 0xe8 <cursorPosition>
 14a:	0c 2f       	mov	r16, r28
 14c:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 152:	f8 01       	movw	r30, r16
 154:	81 91       	ld	r24, Z+
 156:	8f 01       	movw	r16, r30
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	e8 df       	rcall	.-48     	; 0x12c <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	c0 31       	cpi	r28, 0x10	; 16
 160:	d1 05       	cpc	r29, r1
 162:	b9 f7       	brne	.-18     	; 0x152 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 172:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 174:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 176:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(0x01);				// Writing clear instruction
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	85 df       	rcall	.-246    	; 0x88 <writeLCDdata>
}
 17e:	08 95       	ret

00000180 <initializeLCD>:
#define LCD_PORT_2 PORTD		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRD			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 7c       	andi	r24, 0xC0	; 192
 18c:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 18e:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 190:	58 98       	cbi	0x0b, 0	; 11
 192:	c4 e0       	ldi	r28, 0x04	; 4
 194:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 19c:	6c df       	rcall	.-296    	; 0x76 <pulseElatch>
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <initializeLCD+0x22>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <initializeLCD+0x28>
 1a8:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8c 7f       	andi	r24, 0xFC	; 252
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 1b2:	89 f7       	brne	.-30     	; 0x196 <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 1b4:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 1b6:	5f df       	rcall	.-322    	; 0x76 <pulseElatch>
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <initializeLCD+0x3c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <initializeLCD+0x42>
 1c2:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 1c4:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	5e df       	rcall	.-324    	; 0x88 <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	5b df       	rcall	.-330    	; 0x88 <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	58 df       	rcall	.-336    	; 0x88 <writeLCDdata>
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <BacklightLCD>:
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
}

// Turns the LCD back light on or off
void BacklightLCD (int on1_off0){
	LCD_DDR_2 |= (1 << BL);		// Making pin PB1 an output
 1de:	51 9a       	sbi	0x0a, 1	; 10
	if (on1_off0 == 1)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	91 05       	cpc	r25, r1
 1e4:	11 f4       	brne	.+4      	; 0x1ea <BacklightLCD+0xc>
		LCD_PORT_2 &= ~(1 << BL);		// Masking or clearing pin PB1 sinking current turning on Back light
 1e6:	59 98       	cbi	0x0b, 1	; 11
 1e8:	08 95       	ret
	else
		LCD_PORT_2 |= (1 << BL);		// Setting PB1 allowing no current flow to turn bakc light off
 1ea:	59 9a       	sbi	0x0b, 1	; 11
 1ec:	08 95       	ret

000001ee <writeTOeeprom>:

int short default_code[9] = {'0','0','0','0','\0','\0','\0','\0','\0'};		// Factory default code 


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	18 2f       	mov	r17, r24
 1f8:	09 2f       	mov	r16, r25
 1fa:	c1 e0       	ldi	r28, 0x01	; 1
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	for(int i = 0; i < 9; i++){										// filling eeprom wit all NULLS
		eeprom_write_byte(temp_ee_address, '\0');
 1fe:	ce 01       	movw	r24, r28
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	87 d4       	rcall	.+2318   	; 0xb12 <__eewr_byte_m48a>
 204:	21 96       	adiw	r28, 0x01	; 1

// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	for(int i = 0; i < 9; i++){										// filling eeprom wit all NULLS
 206:	ca 30       	cpi	r28, 0x0A	; 10
 208:	d1 05       	cpc	r29, r1
 20a:	c9 f7       	brne	.-14     	; 0x1fe <writeTOeeprom+0x10>
 20c:	c1 2f       	mov	r28, r17
 20e:	d0 2f       	mov	r29, r16
 210:	11 e0       	ldi	r17, 0x01	; 1
 212:	07 c0       	rjmp	.+14     	; 0x222 <writeTOeeprom+0x34>
		eeprom_write_byte(temp_ee_address, '\0');
		temp_ee_address++;
	}
	temp_ee_address = EEPROM_DATA_ADDRESS;
	while(code_to_save[add_count] != '\0'){								// This loop fills temp_code array with saved code and fills the rest with NULL
			if(code_to_save[add_count] == '*'){							// Fixes * bunce
 214:	6a 32       	cpi	r22, 0x2A	; 42
 216:	71 05       	cpc	r23, r1
 218:	21 f0       	breq	.+8      	; 0x222 <writeTOeeprom+0x34>
				add_count++;
			}
			else{
				eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing byte to specified address
 21a:	81 2f       	mov	r24, r17
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	79 d4       	rcall	.+2290   	; 0xb12 <__eewr_byte_m48a>
				add_count++;
				temp_ee_address++;
 220:	1f 5f       	subi	r17, 0xFF	; 255
	for(int i = 0; i < 9; i++){										// filling eeprom wit all NULLS
		eeprom_write_byte(temp_ee_address, '\0');
		temp_ee_address++;
	}
	temp_ee_address = EEPROM_DATA_ADDRESS;
	while(code_to_save[add_count] != '\0'){								// This loop fills temp_code array with saved code and fills the rest with NULL
 222:	69 91       	ld	r22, Y+
 224:	79 91       	ld	r23, Y+
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	a1 f7       	brne	.-24     	; 0x214 <writeTOeeprom+0x26>
				eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing byte to specified address
				add_count++;
				temp_ee_address++;
			}				
	}
	eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing the NULL character to the end of the pass code
 22c:	81 2f       	mov	r24, r17
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	6f d4       	rcall	.+2270   	; 0xb12 <__eewr_byte_m48a>
	eeprom_write_byte(EEPROM_NEWCODE_ADDRESS,0x0);						// Setting new code flag
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	6b d4       	rcall	.+2262   	; 0xb12 <__eewr_byte_m48a>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <readFROMeeprom>:


// Reads the contents of EEPROM and store them in an 9 element array
void readFROMeeprom(int short *saved_code[]){
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	7c 01       	movw	r14, r24
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
		
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	54 d4       	rcall	.+2216   	; 0xb02 <__eerd_byte_m48a>
 25a:	88 23       	and	r24, r24
 25c:	21 f4       	brne	.+8      	; 0x266 <readFROMeeprom+0x20>
 25e:	87 01       	movw	r16, r14
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	0e c0       	rjmp	.+28     	; 0x282 <readFROMeeprom+0x3c>
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 266:	80 91 70 01 	lds	r24, 0x0170
 26a:	90 91 71 01 	lds	r25, 0x0171
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	b1 f4       	brne	.+44     	; 0x29e <readFROMeeprom+0x58>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	23 c0       	rjmp	.+70     	; 0x2be <readFROMeeprom+0x78>
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
		
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
 278:	f8 01       	movw	r30, r16
 27a:	81 93       	st	Z+, r24
 27c:	91 93       	st	Z+, r25
 27e:	8f 01       	movw	r16, r30
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
 280:	21 96       	adiw	r28, 0x01	; 1
void readFROMeeprom(int short *saved_code[]){
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
		
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
 282:	8c 2f       	mov	r24, r28
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	3c d4       	rcall	.+2168   	; 0xb02 <__eerd_byte_m48a>
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	a1 f7       	brne	.-24     	; 0x278 <readFROMeeprom+0x32>
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
 290:	cc 0f       	add	r28, r28
 292:	dd 1f       	adc	r29, r29
 294:	ce 0d       	add	r28, r14
 296:	df 1d       	adc	r29, r15
 298:	19 82       	std	Y+1, r1	; 0x01
 29a:	18 82       	st	Y, r1
 29c:	17 c0       	rjmp	.+46     	; 0x2cc <readFROMeeprom+0x86>
 29e:	d7 01       	movw	r26, r14
 2a0:	e2 e7       	ldi	r30, 0x72	; 114
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
 2a8:	8d 93       	st	X+, r24
 2aa:	9d 93       	st	X+, r25
			add_count++;													// incrementing array counter			
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 2b0:	50 81       	ld	r21, Z
 2b2:	41 81       	ldd	r20, Z+1	; 0x01
 2b4:	32 96       	adiw	r30, 0x02	; 2
 2b6:	85 2f       	mov	r24, r21
 2b8:	94 2f       	mov	r25, r20
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	a9 f7       	brne	.-22     	; 0x2a8 <readFROMeeprom+0x62>
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
			add_count++;													// incrementing array counter			
		}
		saved_code[add_count] = default_code[add_count];					// setting NULL character at the end of pass code array
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	e2 0e       	add	r14, r18
 2c4:	f3 1e       	adc	r15, r19
 2c6:	f7 01       	movw	r30, r14
 2c8:	91 83       	std	Z+1, r25	; 0x01
 2ca:	80 83       	st	Z, r24
	}	
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	08 95       	ret

000002da <initializeKeypadInterrupts>:
volatile int key_queue[KEY_QUEUE_SIZE];							// holds user inputs
int current_key;
int last_button_state = 0;

// initialize pin-change interrupts for keypad
void initializeKeypadInterrupts(int rows[]){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 2de:	e8 e6       	ldi	r30, 0x68	; 104
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	20 81       	ld	r18, Z
 2e4:	21 60       	ori	r18, 0x01	; 1
 2e6:	20 83       	st	Z, r18
 2e8:	e8 2f       	mov	r30, r24
 2ea:	f9 2f       	mov	r31, r25
 2ec:	24 e0       	ldi	r18, 0x04	; 4
 2ee:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 2f0:	ab e6       	ldi	r26, 0x6B	; 107
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	6c 91       	ld	r22, X
 2fa:	80 81       	ld	r24, Z
 2fc:	32 96       	adiw	r30, 0x02	; 2
 2fe:	ea 01       	movw	r28, r20
 300:	02 c0       	rjmp	.+4      	; 0x306 <__stack+0x7>
 302:	cc 0f       	add	r28, r28
 304:	dd 1f       	adc	r29, r29
 306:	8a 95       	dec	r24
 308:	e2 f7       	brpl	.-8      	; 0x302 <__stack+0x3>
 30a:	ce 01       	movw	r24, r28
 30c:	86 2b       	or	r24, r22
 30e:	8c 93       	st	X, r24
 310:	21 50       	subi	r18, 0x01	; 1
 312:	30 40       	sbci	r19, 0x00	; 0
int last_button_state = 0;

// initialize pin-change interrupts for keypad
void initializeKeypadInterrupts(int rows[]){
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 314:	89 f7       	brne	.-30     	; 0x2f8 <initializeKeypadInterrupts+0x1e>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	86 ea       	ldi	r24, 0xA6	; 166
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <getButtonState+0x2>
 322:	00 c0       	rjmp	.+0      	; 0x324 <getButtonState+0x8>
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(500);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 324:	1f 9b       	sbis	0x03, 7	; 3
 326:	0b c0       	rjmp	.+22     	; 0x33e <getButtonState+0x22>
	else if(!(PINB &(1 << ROW2))) s = 1;				
 328:	18 9b       	sbis	0x03, 0	; 3
 32a:	0c c0       	rjmp	.+24     	; 0x344 <getButtonState+0x28>
	else if(!(PINB &(1 << ROW3))) s = 1;				
 32c:	19 9b       	sbis	0x03, 1	; 3
 32e:	0d c0       	rjmp	.+26     	; 0x34a <getButtonState+0x2e>
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(500);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	1a 9b       	sbis	0x03, 2	; 3
 336:	0b c0       	rjmp	.+22     	; 0x34e <getButtonState+0x32>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	08 95       	ret
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
 34e:	08 95       	ret

00000350 <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 350:	1f 9b       	sbis	0x03, 7	; 3
 352:	07 c0       	rjmp	.+14     	; 0x362 <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 354:	18 9b       	sbis	0x03, 0	; 3
 356:	08 c0       	rjmp	.+16     	; 0x368 <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 358:	19 9b       	sbis	0x03, 1	; 3
 35a:	09 c0       	rjmp	.+18     	; 0x36e <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 35c:	1a 9b       	sbis	0x03, 2	; 3
 35e:	0a c0       	rjmp	.+20     	; 0x374 <getRow+0x24>
 360:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
 378:	08 95       	ret

0000037a <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
 37a:	2b 9a       	sbi	0x05, 3	; 5
 37c:	66 ea       	ldi	r22, 0xA6	; 166
 37e:	6a 95       	dec	r22
 380:	f1 f7       	brne	.-4      	; 0x37e <getCol+0x4>
 382:	00 c0       	rjmp	.+0      	; 0x384 <getCol+0xa>
	_delay_us(500);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 384:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
 386:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
 388:	2c 9a       	sbi	0x05, 4	; 5
 38a:	76 ea       	ldi	r23, 0xA6	; 166
 38c:	7a 95       	dec	r23
 38e:	f1 f7       	brne	.-4      	; 0x38c <getCol+0x12>
 390:	00 c0       	rjmp	.+0      	; 0x392 <getCol+0x18>
	_delay_us(500);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 392:	23 b1       	in	r18, 0x03	; 3
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	08 2e       	mov	r0, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <getCol+0x24>
 39a:	35 95       	asr	r19
 39c:	27 95       	ror	r18
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <getCol+0x20>
 3a2:	20 fd       	sbrc	r18, 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <getCol+0x32>
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <getCol+0x36>
		c = 2;											// then the key press was in the second column
 3ac:	22 e0       	ldi	r18, 0x02	; 2
 3ae:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 3b0:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 3b2:	2d 9a       	sbi	0x05, 5	; 5
 3b4:	96 ea       	ldi	r25, 0xA6	; 166
 3b6:	9a 95       	dec	r25
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <getCol+0x3c>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <getCol+0x42>
	_delay_us(500);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 3bc:	43 b1       	in	r20, 0x03	; 3
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	ba 01       	movw	r22, r20
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <getCol+0x4e>
 3c4:	75 95       	asr	r23
 3c6:	67 95       	ror	r22
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <getCol+0x4a>
 3cc:	60 ff       	sbrs	r22, 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <getCol+0x5a>
		c = 3;											// then the key press was in the third column
 3d0:	23 e0       	ldi	r18, 0x03	; 3
 3d2:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 3d4:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 3d6:	82 2f       	mov	r24, r18
 3d8:	93 2f       	mov	r25, r19
 3da:	08 95       	ret

000003dc <keyMap>:

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 3dc:	87 30       	cpi	r24, 0x07	; 7
 3de:	91 05       	cpc	r25, r1
 3e0:	51 f4       	brne	.+20     	; 0x3f6 <keyMap+0x1a>
 3e2:	61 30       	cpi	r22, 0x01	; 1
 3e4:	71 05       	cpc	r23, r1
 3e6:	79 f1       	breq	.+94     	; 0x446 <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 3e8:	62 30       	cpi	r22, 0x02	; 2
 3ea:	71 05       	cpc	r23, r1
 3ec:	79 f1       	breq	.+94     	; 0x44c <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 3ee:	63 30       	cpi	r22, 0x03	; 3
 3f0:	71 05       	cpc	r23, r1
 3f2:	e1 f4       	brne	.+56     	; 0x42c <keyMap+0x50>
 3f4:	2e c0       	rjmp	.+92     	; 0x452 <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	51 f4       	brne	.+20     	; 0x40e <keyMap+0x32>
 3fa:	61 30       	cpi	r22, 0x01	; 1
 3fc:	71 05       	cpc	r23, r1
 3fe:	61 f1       	breq	.+88     	; 0x458 <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 400:	62 30       	cpi	r22, 0x02	; 2
 402:	71 05       	cpc	r23, r1
 404:	61 f1       	breq	.+88     	; 0x45e <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 406:	63 30       	cpi	r22, 0x03	; 3
 408:	71 05       	cpc	r23, r1
 40a:	e9 f5       	brne	.+122    	; 0x486 <keyMap+0xaa>
 40c:	2b c0       	rjmp	.+86     	; 0x464 <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	91 05       	cpc	r25, r1
 412:	61 f4       	brne	.+24     	; 0x42c <keyMap+0x50>
 414:	61 30       	cpi	r22, 0x01	; 1
 416:	71 05       	cpc	r23, r1
 418:	41 f1       	breq	.+80     	; 0x46a <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 41a:	62 30       	cpi	r22, 0x02	; 2
 41c:	71 05       	cpc	r23, r1
 41e:	41 f1       	breq	.+80     	; 0x470 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 0x39;
 420:	63 30       	cpi	r22, 0x03	; 3
 422:	71 05       	cpc	r23, r1
 424:	81 f5       	brne	.+96     	; 0x486 <keyMap+0xaa>
 426:	29 e3       	ldi	r18, 0x39	; 57
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	2d c0       	rjmp	.+90     	; 0x486 <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	91 05       	cpc	r25, r1
 430:	51 f5       	brne	.+84     	; 0x486 <keyMap+0xaa>
 432:	61 30       	cpi	r22, 0x01	; 1
 434:	71 05       	cpc	r23, r1
 436:	f9 f0       	breq	.+62     	; 0x476 <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 438:	62 30       	cpi	r22, 0x02	; 2
 43a:	71 05       	cpc	r23, r1
 43c:	f9 f0       	breq	.+62     	; 0x47c <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 43e:	63 30       	cpi	r22, 0x03	; 3
 440:	71 05       	cpc	r23, r1
 442:	09 f5       	brne	.+66     	; 0x486 <keyMap+0xaa>
 444:	1e c0       	rjmp	.+60     	; 0x482 <keyMap+0xa6>
}

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 446:	21 e3       	ldi	r18, 0x31	; 49
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	1d c0       	rjmp	.+58     	; 0x486 <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 44c:	22 e3       	ldi	r18, 0x32	; 50
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	1a c0       	rjmp	.+52     	; 0x486 <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 452:	23 e3       	ldi	r18, 0x33	; 51
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	17 c0       	rjmp	.+46     	; 0x486 <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 458:	24 e3       	ldi	r18, 0x34	; 52
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	14 c0       	rjmp	.+40     	; 0x486 <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 45e:	25 e3       	ldi	r18, 0x35	; 53
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	11 c0       	rjmp	.+34     	; 0x486 <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 464:	26 e3       	ldi	r18, 0x36	; 54
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	0e c0       	rjmp	.+28     	; 0x486 <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 46a:	27 e3       	ldi	r18, 0x37	; 55
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	0b c0       	rjmp	.+22     	; 0x486 <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 470:	28 e3       	ldi	r18, 0x38	; 56
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	08 c0       	rjmp	.+16     	; 0x486 <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 0x39;
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 476:	2a e2       	ldi	r18, 0x2A	; 42
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	05 c0       	rjmp	.+10     	; 0x486 <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 47c:	20 e3       	ldi	r18, 0x30	; 48
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 482:	23 e2       	ldi	r18, 0x23	; 35
 484:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 486:	82 2f       	mov	r24, r18
 488:	93 2f       	mov	r25, r19
 48a:	08 95       	ret

0000048c <getKeyPress>:
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
}

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 490:	5f df       	rcall	.-322    	; 0x350 <getRow>
 492:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 494:	72 df       	rcall	.-284    	; 0x37a <getCol>
 496:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 498:	ce 01       	movw	r24, r28
 49a:	a0 df       	rcall	.-192    	; 0x3dc <keyMap>
	//pushKey(key); 									// push key onto queue		
	current_key = key;
 49c:	90 93 89 01 	sts	0x0189, r25
 4a0:	80 93 88 01 	sts	0x0188, r24
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <popKey>:
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 4aa:	a0 91 8a 01 	lds	r26, 0x018A
 4ae:	b0 91 8b 01 	lds	r27, 0x018B
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i+1];
 4b6:	6a e8       	ldi	r22, 0x8A	; 138
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <popKey+0x14>
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4bc:	c9 01       	movw	r24, r18
		key_queue[i] = key_queue[i+1];
 4be:	9c 01       	movw	r18, r24
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	f9 01       	movw	r30, r18
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	e6 0f       	add	r30, r22
 4cc:	f7 1f       	adc	r31, r23
 4ce:	40 81       	ld	r20, Z
 4d0:	51 81       	ldd	r21, Z+1	; 0x01
 4d2:	fc 01       	movw	r30, r24
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	e6 0f       	add	r30, r22
 4da:	f7 1f       	adc	r31, r23
 4dc:	51 83       	std	Z+1, r21	; 0x01
 4de:	40 83       	st	Z, r20
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4e0:	29 30       	cpi	r18, 0x09	; 9
 4e2:	31 05       	cpc	r19, r1
 4e4:	59 f7       	brne	.-42     	; 0x4bc <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
 4e6:	10 92 9d 01 	sts	0x019D, r1
 4ea:	10 92 9c 01 	sts	0x019C, r1
	return k;
}
 4ee:	8a 2f       	mov	r24, r26
 4f0:	9b 2f       	mov	r25, r27
 4f2:	08 95       	ret

000004f4 <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 4f4:	dc 01       	movw	r26, r24
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 4f6:	89 e0       	ldi	r24, 0x09	; 9
 4f8:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i-1];
 4fa:	6a e8       	ldi	r22, 0x8A	; 138
 4fc:	71 e0       	ldi	r23, 0x01	; 1
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
 4fe:	9c 01       	movw	r18, r24
 500:	21 50       	subi	r18, 0x01	; 1
 502:	30 40       	sbci	r19, 0x00	; 0
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 504:	f9 01       	movw	r30, r18
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e6 0f       	add	r30, r22
 50c:	f7 1f       	adc	r31, r23
 50e:	40 81       	ld	r20, Z
 510:	51 81       	ldd	r21, Z+1	; 0x01
 512:	fc 01       	movw	r30, r24
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	e6 0f       	add	r30, r22
 51a:	f7 1f       	adc	r31, r23
 51c:	51 83       	std	Z+1, r21	; 0x01
 51e:	40 83       	st	Z, r20
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 520:	c9 01       	movw	r24, r18
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	61 f7       	brne	.-40     	; 0x4fe <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;	
 526:	b0 93 8b 01 	sts	0x018B, r27
 52a:	a0 93 8a 01 	sts	0x018A, r26
}
 52e:	08 95       	ret

00000530 <clearKeyQueue>:

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = '\0';
 534:	2a e8       	ldi	r18, 0x8A	; 138
 536:	31 e0       	ldi	r19, 0x01	; 1
 538:	fc 01       	movw	r30, r24
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	e2 0f       	add	r30, r18
 540:	f3 1f       	adc	r31, r19
 542:	11 82       	std	Z+1, r1	; 0x01
 544:	10 82       	st	Z, r1
	}
	key_queue[0] = k;	
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	8a 30       	cpi	r24, 0x0A	; 10
 54a:	91 05       	cpc	r25, r1
 54c:	a9 f7       	brne	.-22     	; 0x538 <clearKeyQueue+0x8>
		key_queue[i] = '\0';
	}
	
}
 54e:	08 95       	ret

00000550 <initRows>:

void initRows(int r[]){									// sets keypad rows as inputs
 550:	e8 2f       	mov	r30, r24
 552:	f9 2f       	mov	r31, r25
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	90 e0       	ldi	r25, 0x00	; 0
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	64 b1       	in	r22, 0x04	; 4
 55e:	20 81       	ld	r18, Z
 560:	32 96       	adiw	r30, 0x02	; 2
 562:	da 01       	movw	r26, r20
 564:	02 c0       	rjmp	.+4      	; 0x56a <initRows+0x1a>
 566:	aa 0f       	add	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	2a 95       	dec	r18
 56c:	e2 f7       	brpl	.-8      	; 0x566 <initRows+0x16>
 56e:	9d 01       	movw	r18, r26
 570:	20 95       	com	r18
 572:	26 23       	and	r18, r22
 574:	24 b9       	out	0x04, r18	; 4
 576:	01 97       	sbiw	r24, 0x01	; 1
	}
	
}

void initRows(int r[]){									// sets keypad rows as inputs
for(int i = 0; i < NUM_ROWS; i++){
 578:	89 f7       	brne	.-30     	; 0x55c <initRows+0xc>
	DDRB &= ~(1 << r[i]);
}
}
 57a:	08 95       	ret

0000057c <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 57c:	e8 2f       	mov	r30, r24
 57e:	f9 2f       	mov	r31, r25
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	65 b1       	in	r22, 0x05	; 5
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 58a:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 58c:	ca 01       	movw	r24, r20
 58e:	00 80       	ld	r0, Z
 590:	02 c0       	rjmp	.+4      	; 0x596 <initColumns+0x1a>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <initColumns+0x16>
 59a:	80 95       	com	r24
 59c:	86 23       	and	r24, r22
 59e:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 5a0:	64 b1       	in	r22, 0x04	; 4
 5a2:	32 96       	adiw	r30, 0x02	; 2
 5a4:	ca 01       	movw	r24, r20
 5a6:	0c 90       	ld	r0, X
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <initColumns+0x32>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <initColumns+0x2e>
 5b2:	86 2b       	or	r24, r22
 5b4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 5b6:	2f 5f       	subi	r18, 0xFF	; 255
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ba:	23 30       	cpi	r18, 0x03	; 3
 5bc:	31 05       	cpc	r19, r1
 5be:	21 f7       	brne	.-56     	; 0x588 <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}
 5c0:	08 95       	ret

000005c2 <__vector_3>:

// interrupt service routine for a key press/release
 ISR(PCINT0_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e4:	89 ef       	ldi	r24, 0xF9	; 249
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <__vector_3+0x26>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <__vector_3+0x2c>
 5ee:	00 00       	nop
	 _delay_ms(1);
	 if(getButtonState() && last_button_state == 0){
 5f0:	95 de       	rcall	.-726    	; 0x31c <getButtonState>
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	a1 f0       	breq	.+40     	; 0x61e <__vector_3+0x5c>
 5f6:	80 91 86 01 	lds	r24, 0x0186
 5fa:	90 91 87 01 	lds	r25, 0x0187
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	71 f4       	brne	.+28     	; 0x61e <__vector_3+0x5c>
		 getKeyPress();
 602:	44 df       	rcall	.-376    	; 0x48c <getKeyPress>
 604:	89 ef       	ldi	r24, 0xF9	; 249
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <__vector_3+0x46>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <__vector_3+0x4c>
 60e:	00 00       	nop
		 _delay_ms(1);
		 last_button_state = 1;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	90 93 87 01 	sts	0x0187, r25
 618:	80 93 86 01 	sts	0x0186, r24
 61c:	1b c0       	rjmp	.+54     	; 0x654 <__vector_3+0x92>
	 }
	 else if(!getButtonState() && last_button_state == 1){
 61e:	7e de       	rcall	.-772    	; 0x31c <getButtonState>
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	91 f4       	brne	.+36     	; 0x648 <__vector_3+0x86>
 624:	80 91 86 01 	lds	r24, 0x0186
 628:	90 91 87 01 	lds	r25, 0x0187
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	91 05       	cpc	r25, r1
 630:	59 f4       	brne	.+22     	; 0x648 <__vector_3+0x86>
		 pushKey(current_key);
 632:	80 91 88 01 	lds	r24, 0x0188
 636:	90 91 89 01 	lds	r25, 0x0189
 63a:	5c df       	rcall	.-328    	; 0x4f4 <pushKey>
		 //BacklightLCD(1);
		 resetTimer();
 63c:	17 dd       	rcall	.-1490   	; 0x6c <resetTimer>
		 last_button_state = 0;
 63e:	10 92 87 01 	sts	0x0187, r1
 642:	10 92 86 01 	sts	0x0186, r1
	 if(getButtonState() && last_button_state == 0){
		 getKeyPress();
		 _delay_ms(1);
		 last_button_state = 1;
	 }
	 else if(!getButtonState() && last_button_state == 1){
 646:	06 c0       	rjmp	.+12     	; 0x654 <__vector_3+0x92>
 648:	89 ef       	ldi	r24, 0xF9	; 249
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <__vector_3+0x8a>
 650:	00 c0       	rjmp	.+0      	; 0x652 <__vector_3+0x90>
 652:	00 00       	nop
 654:	89 ef       	ldi	r24, 0xF9	; 249
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <__vector_3+0x96>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <__vector_3+0x9c>
 65e:	00 00       	nop
	 }
	 else{
		 _delay_ms(1);
	 }
	 _delay_ms(1);
 }
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <initializeMotorPins>:
#define PUSHOUT 0b00001000		// RIN on PD3, |= with this to close

#define BUFFER 250				// pause for 1/4 sec to allow motor to shove off

void initializeMotorPins(void){
	DDRD |= (1 << PD3)|(1 << PD4);		// FIN and RIN are outputs on port D
 682:	8a b1       	in	r24, 0x0a	; 10
 684:	88 61       	ori	r24, 0x18	; 24
 686:	8a b9       	out	0x0a, r24	; 10
	MOTORPORT &= ~((1 << PD3)|(1 << PD4));	// FIN and RIN are initially low
 688:	8b b1       	in	r24, 0x0b	; 11
 68a:	87 7e       	andi	r24, 0xE7	; 231
 68c:	8b b9       	out	0x0b, r24	; 11
	DDRD &= ~(1 << PD2);				// FDBK2 is an input on port D
 68e:	52 98       	cbi	0x0a, 2	; 10
	DDRB &= ~(1 << PB6);				// FDBK is an input on port B
 690:	26 98       	cbi	0x04, 6	; 4
	
	DDRD |= (1 << PD5)|(1 << PD7);		// LED ports for debugging
 692:	8a b1       	in	r24, 0x0a	; 10
 694:	80 6a       	ori	r24, 0xA0	; 160
 696:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD5)|(1 << PD7);		// LEDs are active low, initialized off
 698:	8b b1       	in	r24, 0x0b	; 11
 69a:	80 6a       	ori	r24, 0xA0	; 160
 69c:	8b b9       	out	0x0b, r24	; 11
}
 69e:	08 95       	ret

000006a0 <unlock>:

int unlock(int status)
{
	cli();							// disable interrupt
 6a0:	f8 94       	cli
	MOTORPORT |= PULLIN;
 6a2:	5c 9a       	sbi	0x0b, 4	; 11
	while(FDBKPORT & (1 <<FDBKPIN)){
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <unlock+0x22>
 6a6:	89 ef       	ldi	r24, 0xF9	; 249
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <unlock+0xa>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <unlock+0x10>
 6b0:	00 00       	nop
		_delay_ms(1);
		if(!(FDBKPORT & (1 <<FDBKPIN))){
 6b2:	1e 99       	sbic	0x03, 6	; 3
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <unlock+0x22>
 6b6:	89 ef       	ldi	r24, 0xF9	; 249
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <unlock+0x1a>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <unlock+0x20>
 6c0:	00 00       	nop

int unlock(int status)
{
	cli();							// disable interrupt
	MOTORPORT |= PULLIN;
	while(FDBKPORT & (1 <<FDBKPIN)){
 6c2:	1e 99       	sbic	0x03, 6	; 3
 6c4:	f0 cf       	rjmp	.-32     	; 0x6a6 <unlock+0x6>
		if(!(FDBKPORT & (1 <<FDBKPIN))){
			_delay_ms(1);
		}
	}
	
	PORTD &= ~(1 << PD5);			// turn pin 5 LED on
 6c6:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= (1 << PD7);			// turn pin 7 LED off
 6c8:	5f 9a       	sbi	0x0b, 7	; 11
			status = 0;						// lock is 0=open
	}		

	MOTORPORT &= ~PULLIN;		// FIN goes low, lock stops
	*/
	MOTORPORT &= ~PULLIN;
 6ca:	5c 98       	cbi	0x0b, 4	; 11
	sei();						// re-enable interrupt
 6cc:	78 94       	sei
	return status = 0;				// update lock state
}
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <lock>:

int lock(int status)
{
	cli();						// disable interrupt
 6d4:	f8 94       	cli
	MOTORPORT |= PUSHOUT;
 6d6:	5b 9a       	sbi	0x0b, 3	; 11
	
	while(FDBK2PORT & (1 <<FDBK2PIN)){
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <lock+0x22>
 6da:	89 ef       	ldi	r24, 0xF9	; 249
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <lock+0xa>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <lock+0x10>
 6e4:	00 00       	nop
		_delay_ms(1);
		if(!(FDBK2PORT & (1 <<FDBK2PIN))){
 6e6:	4a 99       	sbic	0x09, 2	; 9
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <lock+0x22>
 6ea:	89 ef       	ldi	r24, 0xF9	; 249
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <lock+0x1a>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <lock+0x20>
 6f4:	00 00       	nop
int lock(int status)
{
	cli();						// disable interrupt
	MOTORPORT |= PUSHOUT;
	
	while(FDBK2PORT & (1 <<FDBK2PIN)){
 6f6:	4a 99       	sbic	0x09, 2	; 9
 6f8:	f0 cf       	rjmp	.-32     	; 0x6da <lock+0x6>
		if(!(FDBK2PORT & (1 <<FDBK2PIN))){
			_delay_ms(1);
		}
	}
	
	PORTD &= ~(1 << PD7);			// turn pin 7 LED on
 6fa:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= (1 << PD5);			// turn pin 5 LED off
 6fc:	5d 9a       	sbi	0x0b, 5	; 11
	
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
			status = 1;						// lock is 1=locked
	}
	*/
	MOTORPORT &= ~PUSHOUT;		// RIN goes low, lock stops
 6fe:	5b 98       	cbi	0x0b, 3	; 11
	sei();						// re-enable interrupt
 700:	78 94       	sei
	return status = 1;				// update lock state
}
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	08 95       	ret

00000708 <testLock>:



 int testLock(int status){
	 int lock_state = 1;
	 DDRD |= (1 << PD6);
 708:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD |= (1 << PD6);
 70a:	5e 9a       	sbi	0x0b, 6	; 11
	 return lock_state;
 }
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	08 95       	ret

00000712 <testUnlock>:

 int testUnlock(int status){
	 int lock_state = 0;
	 DDRD |= (1 << PD6);
 712:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD &= ~(1 << PD6);
 714:	5e 98       	cbi	0x0b, 6	; 11
	 return lock_state;
 }
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	08 95       	ret

0000071c <testfun>:

 void testfun(int on_off){
	 DDRD |= (1 << PD7);
 71c:	57 9a       	sbi	0x0a, 7	; 10
	 if (on_off == 1)
 71e:	81 30       	cpi	r24, 0x01	; 1
 720:	91 05       	cpc	r25, r1
 722:	11 f4       	brne	.+4      	; 0x728 <testfun+0xc>
	 PORTD |= (1 << PD7);
 724:	5f 9a       	sbi	0x0b, 7	; 11
 726:	08 95       	ret
	 else
	 PORTD &= ~(1 << PD7);
 728:	5f 98       	cbi	0x0b, 7	; 11
 72a:	08 95       	ret

0000072c <__vector_11>:

#include "timeout.h"
#define TIMEOUT 0x1000						// approx 4096 ms

ISR(TIMER1_COMPA_vect){
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	0f 92       	push	r0
 734:	11 24       	eor	r1, r1
 736:	2f 93       	push	r18
 738:	3f 93       	push	r19
 73a:	4f 93       	push	r20
 73c:	5f 93       	push	r21
 73e:	6f 93       	push	r22
 740:	7f 93       	push	r23
 742:	8f 93       	push	r24
 744:	9f 93       	push	r25
 746:	af 93       	push	r26
 748:	bf 93       	push	r27
 74a:	ef 93       	push	r30
 74c:	ff 93       	push	r31
 74e:	89 ef       	ldi	r24, 0xF9	; 249
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	f1 f7       	brne	.-4      	; 0x752 <__vector_11+0x26>
 756:	00 c0       	rjmp	.+0      	; 0x758 <__vector_11+0x2c>
 758:	00 00       	nop
	_delay_ms(1);
	if (lock_state != 1) {
 75a:	80 91 0e 01 	lds	r24, 0x010E
 75e:	90 91 0f 01 	lds	r25, 0x010F
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	91 05       	cpc	r25, r1
 766:	41 f0       	breq	.+16     	; 0x778 <__vector_11+0x4c>
		resetTimer();
 768:	81 dc       	rcall	.-1790   	; 0x6c <resetTimer>
 76a:	89 ef       	ldi	r24, 0xF9	; 249
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <__vector_11+0x42>
 772:	00 c0       	rjmp	.+0      	; 0x774 <__vector_11+0x48>
 774:	00 00       	nop
 776:	09 c0       	rjmp	.+18     	; 0x78a <__vector_11+0x5e>
		_delay_ms(1);
	}
	else if((lock_state == 1)&&(key_queue[0])){
 778:	80 91 8a 01 	lds	r24, 0x018A
 77c:	90 91 8b 01 	lds	r25, 0x018B
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	19 f0       	breq	.+6      	; 0x78a <__vector_11+0x5e>
		//BacklightLCD(0);
		pushKey('#');
 784:	83 e2       	ldi	r24, 0x23	; 35
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	b5 de       	rcall	.-662    	; 0x4f4 <pushKey>

	}
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	0f 90       	pop	r0
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	0f 90       	pop	r0
 7a8:	1f 90       	pop	r1
 7aa:	18 95       	reti

000007ac <initializeTimeout>:

void initializeTimeout(void){
	TIMSK1 |= (1 << OCIE1A);				// enable output compare A match interrupt
 7ac:	ef e6       	ldi	r30, 0x6F	; 111
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12)|(1 << CS10);		// configure timer/counter clock prescaling
 7b6:	e1 e8       	ldi	r30, 0x81	; 129
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	85 60       	ori	r24, 0x05	; 5
 7be:	80 83       	st	Z, r24
	OCR1A = TIMEOUT;
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e1       	ldi	r25, 0x10	; 16
 7c4:	90 93 89 00 	sts	0x0089, r25
 7c8:	80 93 88 00 	sts	0x0088, r24
	resetTimer();
 7cc:	4f dc       	rcall	.-1890   	; 0x6c <resetTimer>
}
 7ce:	08 95       	ret

000007d0 <main>:
	int count = 0;											// counter variable used for loops
	
	 #include "timeout.c"
	 #include "timeout.h"

 int main(void) {
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	62 97       	sbiw	r28, 0x12	; 18
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	f8 94       	cli
 7de:	de bf       	out	0x3e, r29	; 62
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	cd bf       	out	0x3d, r28	; 61
	 // initialize
	// short int testcode[9] = {'3','2','1','\0','\0','\0','\0','\0','\0'};
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 7e4:	de 01       	movw	r26, r28
 7e6:	11 96       	adiw	r26, 0x01	; 1
 7e8:	e0 e0       	ldi	r30, 0x00	; 0
 7ea:	f1 e0       	ldi	r31, 0x01	; 1
 7ec:	88 e0       	ldi	r24, 0x08	; 8
 7ee:	01 90       	ld	r0, Z+
 7f0:	0d 92       	st	X+, r0
 7f2:	81 50       	subi	r24, 0x01	; 1
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x1e>
	int cols[] = {COL1, COL2, COL3};
 7f6:	de 01       	movw	r26, r28
 7f8:	19 96       	adiw	r26, 0x09	; 9
 7fa:	e8 e0       	ldi	r30, 0x08	; 8
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	86 e0       	ldi	r24, 0x06	; 6
 800:	01 90       	ld	r0, Z+
 802:	0d 92       	st	X+, r0
 804:	81 50       	subi	r24, 0x01	; 1
 806:	e1 f7       	brne	.-8      	; 0x800 <main+0x30>
	
	volatile int count_queue;							// Keep track of how many characters are
														// in the queue
	int code_is_correct;								 
			
	initializeMotorPins();
 808:	3c df       	rcall	.-392    	; 0x682 <initializeMotorPins>
	initializeKeypadInterrupts(rows);	
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	65 dd       	rcall	.-1334   	; 0x2da <initializeKeypadInterrupts>
	sei();												// global interrupt enable
 810:	78 94       	sei
	
	initRows(rows);										// set keypad rows as inputs
 812:	ce 01       	movw	r24, r28
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	9c de       	rcall	.-712    	; 0x550 <initRows>
	initColumns(cols);									// set keypad columns as outputs
 818:	ce 01       	movw	r24, r28
 81a:	09 96       	adiw	r24, 0x09	; 9
 81c:	af de       	rcall	.-674    	; 0x57c <initColumns>
	initializeLCD();									// set up LCD and initialize in 4 bit mode
 81e:	b0 dc       	rcall	.-1696   	; 0x180 <initializeLCD>
	BacklightLCD(1);
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	dc dc       	rcall	.-1608   	; 0x1de <BacklightLCD>
	clearKeyQueue();
 826:	84 de       	rcall	.-760    	; 0x530 <clearKeyQueue>

	//writeLCDcharacter('x');

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
 828:	07 c0       	rjmp	.+14     	; 0x838 <main+0x68>
			lock_state = lock(2);
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	52 df       	rcall	.-348    	; 0x6d4 <lock>
 830:	90 93 0f 01 	sts	0x010F, r25
 834:	80 93 0e 01 	sts	0x010E, r24

	//writeLCDcharacter('x');

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
 838:	80 91 0e 01 	lds	r24, 0x010E
 83c:	90 91 0f 01 	lds	r25, 0x010F
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	91 05       	cpc	r25, r1
 844:	91 f7       	brne	.-28     	; 0x82a <main+0x5a>
			lock_state = lock(2);
	}
	initializeTimeout();
 846:	b2 df       	rcall	.-156    	; 0x7ac <initializeTimeout>
		
		
		
		// Print greeting
		clearLCD();
		writeLCDline(enter_code,1);
 848:	0f 2e       	mov	r0, r31
 84a:	f0 e6       	ldi	r31, 0x60	; 96
 84c:	8f 2e       	mov	r8, r31
 84e:	f1 e0       	ldi	r31, 0x01	; 1
 850:	9f 2e       	mov	r9, r31
 852:	f0 2d       	mov	r31, r0
			
			

					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 854:	0a e8       	ldi	r16, 0x8A	; 138
 856:	11 e0       	ldi	r17, 0x01	; 1
 858:	09 8b       	std	Y+17, r16	; 0x11
 85a:	1a 8b       	std	Y+18, r17	; 0x12
					if(key_queue[i] != current_code[i])
					code_is_correct = 0;
				}
				if(!code_is_correct /*&& count > 0*/){
					clearLCD();
					writeLCDline(incorrect_code,1);
 85c:	0f 2e       	mov	r0, r31
 85e:	f0 e5       	ldi	r31, 0x50	; 80
 860:	4f 2e       	mov	r4, r31
 862:	f1 e0       	ldi	r31, 0x01	; 1
 864:	5f 2e       	mov	r5, r31
 866:	f0 2d       	mov	r31, r0
		// While box is in unlocked state
			while (lock_state == 0 ) {

				// Write unlocked menu
				clearLCD();
				writeLCDline(unlocked_menu_1, 1);
 868:	0f 2e       	mov	r0, r31
 86a:	f0 e4       	ldi	r31, 0x40	; 64
 86c:	2f 2e       	mov	r2, r31
 86e:	f1 e0       	ldi	r31, 0x01	; 1
 870:	3f 2e       	mov	r3, r31
 872:	f0 2d       	mov	r31, r0
	while(1) {
		
		
		
		// Print greeting
		clearLCD();
 874:	7c dc       	rcall	.-1800   	; 0x16e <clearLCD>
		writeLCDline(enter_code,1);
 876:	c4 01       	movw	r24, r8
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	5e dc       	rcall	.-1860   	; 0x13a <writeLCDline>
		cursorPosition(2);
 87e:	82 e0       	ldi	r24, 0x02	; 2
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	32 dc       	rcall	.-1948   	; 0xe8 <cursorPosition>
		readFROMeeprom(current_code);
 884:	8e e9       	ldi	r24, 0x9E	; 158
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	de dc       	rcall	.-1604   	; 0x246 <readFROMeeprom>
		pushKey('#');
 88a:	83 e2       	ldi	r24, 0x23	; 35
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	32 de       	rcall	.-924    	; 0x4f4 <pushKey>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
				count = 0;
 890:	cc 24       	eor	r12, r12
 892:	dd 24       	eor	r13, r13
				code_is_correct = 1;
				popKey();
 894:	0f 2e       	mov	r0, r31
 896:	fe e9       	ldi	r31, 0x9E	; 158
 898:	6f 2e       	mov	r6, r31
 89a:	f1 e0       	ldi	r31, 0x01	; 1
 89c:	7f 2e       	mov	r7, r31
 89e:	f0 2d       	mov	r31, r0
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
				count = 0;
				code_is_correct = 1;
 8a0:	aa 24       	eor	r10, r10
 8a2:	bb 24       	eor	r11, r11
 8a4:	a3 94       	inc	r10
					++count;				
				}
				*/
				for(int i = 0; i < 9; i++){
					if(key_queue[i] != current_code[i])
					code_is_correct = 0;
 8a6:	fc 2c       	mov	r15, r12
 8a8:	ed 2c       	mov	r14, r13
		readFROMeeprom(current_code);
		pushKey('#');
	
		
		// While box is in locked state
		while (lock_state == 1) {
 8aa:	7d c0       	rjmp	.+250    	; 0x9a6 <main+0x1d6>
			
			

					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 8ac:	8f 85       	ldd	r24, Y+15	; 0x0f
 8ae:	98 89       	ldd	r25, Y+16	; 0x10
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	80 0f       	add	r24, r16
 8b6:	91 1f       	adc	r25, r17
 8b8:	dc 01       	movw	r26, r24
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	11 97       	sbiw	r26, 0x01	; 1
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	a1 f3       	breq	.-24     	; 0x8ac <main+0xdc>
			
			// Now that we have a key press we need to look at what was pressed.
			// Is the first key in the queue a '#'...
			if(key_queue[0] == '#'){
 8c4:	f8 01       	movw	r30, r16
 8c6:	80 81       	ld	r24, Z
 8c8:	91 81       	ldd	r25, Z+1	; 0x01
 8ca:	83 32       	cpi	r24, 0x23	; 35
 8cc:	91 05       	cpc	r25, r1
 8ce:	59 f4       	brne	.+22     	; 0x8e6 <main+0x116>
				clearLCD();
 8d0:	4e dc       	rcall	.-1892   	; 0x16e <clearLCD>
				writeLCDline(enter_code,1);
 8d2:	c4 01       	movw	r24, r8
 8d4:	b5 01       	movw	r22, r10
 8d6:	31 dc       	rcall	.-1950   	; 0x13a <writeLCDline>
				cursorPosition(2);
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	05 dc       	rcall	.-2038   	; 0xe8 <cursorPosition>
				clearKeyQueue();
 8de:	28 de       	rcall	.-944    	; 0x530 <clearKeyQueue>
				count_queue = 0;
 8e0:	d8 8a       	std	Y+16, r13	; 0x10
 8e2:	cf 86       	std	Y+15, r12	; 0x0f
 8e4:	60 c0       	rjmp	.+192    	; 0x9a6 <main+0x1d6>
				//testfun(1);
				
			// ...or is the first key in the queue a digit?...
			} 
			else if((key_queue[0] >= '0') && (key_queue[0] <= '9') && (count_queue < 8)){
 8e6:	80 81       	ld	r24, Z
 8e8:	91 81       	ldd	r25, Z+1	; 0x01
 8ea:	80 33       	cpi	r24, 0x30	; 48
 8ec:	91 05       	cpc	r25, r1
 8ee:	9c f0       	brlt	.+38     	; 0x916 <main+0x146>
 8f0:	80 81       	ld	r24, Z
 8f2:	91 81       	ldd	r25, Z+1	; 0x01
 8f4:	8a 33       	cpi	r24, 0x3A	; 58
 8f6:	91 05       	cpc	r25, r1
 8f8:	74 f4       	brge	.+28     	; 0x916 <main+0x146>
 8fa:	8f 85       	ldd	r24, Y+15	; 0x0f
 8fc:	98 89       	ldd	r25, Y+16	; 0x10
 8fe:	88 30       	cpi	r24, 0x08	; 8
 900:	91 05       	cpc	r25, r1
 902:	4c f4       	brge	.+18     	; 0x916 <main+0x146>
				writeLCDcharacter(key_queue[0]);
 904:	80 81       	ld	r24, Z
 906:	91 81       	ldd	r25, Z+1	; 0x01
 908:	11 dc       	rcall	.-2014   	; 0x12c <writeLCDcharacter>
				count_queue++;	
 90a:	8f 85       	ldd	r24, Y+15	; 0x0f
 90c:	98 89       	ldd	r25, Y+16	; 0x10
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	98 8b       	std	Y+16, r25	; 0x10
 912:	8f 87       	std	Y+15, r24	; 0x0f
 914:	48 c0       	rjmp	.+144    	; 0x9a6 <main+0x1d6>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
 916:	f8 01       	movw	r30, r16
 918:	80 81       	ld	r24, Z
 91a:	91 81       	ldd	r25, Z+1	; 0x01
 91c:	8a 32       	cpi	r24, 0x2A	; 42
 91e:	91 05       	cpc	r25, r1
 920:	09 f0       	breq	.+2      	; 0x924 <main+0x154>
 922:	41 c0       	rjmp	.+130    	; 0x9a6 <main+0x1d6>
				count = 0;
 924:	d0 92 83 01 	sts	0x0183, r13
 928:	c0 92 82 01 	sts	0x0182, r12
				code_is_correct = 1;
				popKey();
 92c:	be dd       	rcall	.-1156   	; 0x4aa <popKey>
 92e:	f3 01       	movw	r30, r6
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
					++count;				
				}
				*/
				for(int i = 0; i < 9; i++){
 930:	a6 01       	movw	r20, r12
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
				count = 0;
				code_is_correct = 1;
 932:	b5 01       	movw	r22, r10
						code_is_correct = 0;
					++count;				
				}
				*/
				for(int i = 0; i < 9; i++){
					if(key_queue[i] != current_code[i])
 934:	ca 01       	movw	r24, r20
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	80 0f       	add	r24, r16
 93c:	91 1f       	adc	r25, r17
 93e:	dc 01       	movw	r26, r24
 940:	8d 91       	ld	r24, X+
 942:	9c 91       	ld	r25, X
 944:	11 97       	sbiw	r26, 0x01	; 1
 946:	21 91       	ld	r18, Z+
 948:	31 91       	ld	r19, Z+
 94a:	82 17       	cp	r24, r18
 94c:	93 07       	cpc	r25, r19
 94e:	11 f0       	breq	.+4      	; 0x954 <main+0x184>
					code_is_correct = 0;
 950:	6f 2d       	mov	r22, r15
 952:	7e 2d       	mov	r23, r14
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
					++count;				
				}
				*/
				for(int i = 0; i < 9; i++){
 954:	4f 5f       	subi	r20, 0xFF	; 255
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	49 30       	cpi	r20, 0x09	; 9
 95a:	51 05       	cpc	r21, r1
 95c:	59 f7       	brne	.-42     	; 0x934 <main+0x164>
					if(key_queue[i] != current_code[i])
					code_is_correct = 0;
				}
				if(!code_is_correct /*&& count > 0*/){
 95e:	61 15       	cp	r22, r1
 960:	71 05       	cpc	r23, r1
 962:	c1 f4       	brne	.+48     	; 0x994 <main+0x1c4>
					clearLCD();
 964:	04 dc       	rcall	.-2040   	; 0x16e <clearLCD>
					writeLCDline(incorrect_code,1);
 966:	c2 01       	movw	r24, r4
 968:	b5 01       	movw	r22, r10
 96a:	e7 db       	rcall	.-2098   	; 0x13a <writeLCDline>
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	94 e3       	ldi	r25, 0x34	; 52
 970:	ac e0       	ldi	r26, 0x0C	; 12
 972:	81 50       	subi	r24, 0x01	; 1
 974:	90 40       	sbci	r25, 0x00	; 0
 976:	a0 40       	sbci	r26, 0x00	; 0
 978:	e1 f7       	brne	.-8      	; 0x972 <main+0x1a2>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <main+0x1ac>
 97c:	00 00       	nop
					_delay_ms(4000);
					clearKeyQueue();
 97e:	d8 dd       	rcall	.-1104   	; 0x530 <clearKeyQueue>
					count_queue = 0;
 980:	d8 8a       	std	Y+16, r13	; 0x10
 982:	cf 86       	std	Y+15, r12	; 0x0f
					clearLCD();
 984:	f4 db       	rcall	.-2072   	; 0x16e <clearLCD>
					writeLCDline(enter_code,1);
 986:	c4 01       	movw	r24, r8
 988:	b5 01       	movw	r22, r10
 98a:	d7 db       	rcall	.-2130   	; 0x13a <writeLCDline>
					cursorPosition(2);
 98c:	82 e0       	ldi	r24, 0x02	; 2
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	ab db       	rcall	.-2218   	; 0xe8 <cursorPosition>
 992:	09 c0       	rjmp	.+18     	; 0x9a6 <main+0x1d6>
				}else if(code_is_correct /*&& count > 0*/){

					// Unlock the box
					lock_state = unlock(lock_state);
 994:	80 91 0e 01 	lds	r24, 0x010E
 998:	90 91 0f 01 	lds	r25, 0x010F
 99c:	81 de       	rcall	.-766    	; 0x6a0 <unlock>
 99e:	90 93 0f 01 	sts	0x010F, r25
 9a2:	80 93 0e 01 	sts	0x010E, r24
		readFROMeeprom(current_code);
		pushKey('#');
	
		
		// While box is in locked state
		while (lock_state == 1) {
 9a6:	80 91 0e 01 	lds	r24, 0x010E
 9aa:	90 91 0f 01 	lds	r25, 0x010F
 9ae:	81 30       	cpi	r24, 0x01	; 1
 9b0:	91 05       	cpc	r25, r1
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <main+0x1e6>
 9b4:	7b cf       	rjmp	.-266    	; 0x8ac <main+0xdc>
 9b6:	97 c0       	rjmp	.+302    	; 0xae6 <main+0x316>

		// While box is in unlocked state
			while (lock_state == 0 ) {

				// Write unlocked menu
				clearLCD();
 9b8:	da db       	rcall	.-2124   	; 0x16e <clearLCD>
				writeLCDline(unlocked_menu_1, 1);
 9ba:	c1 01       	movw	r24, r2
 9bc:	61 e0       	ldi	r22, 0x01	; 1
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	bc db       	rcall	.-2184   	; 0x13a <writeLCDline>
				writeLCDline(unlocked_menu_2, 2);
 9c2:	80 e3       	ldi	r24, 0x30	; 48
 9c4:	91 e0       	ldi	r25, 0x01	; 1
 9c6:	62 e0       	ldi	r22, 0x02	; 2
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	b7 db       	rcall	.-2194   	; 0x13a <writeLCDline>

				clearKeyQueue();
 9cc:	b1 dd       	rcall	.-1182   	; 0x530 <clearKeyQueue>
				count_queue = 0;
 9ce:	18 8a       	std	Y+16, r1	; 0x10
 9d0:	1f 86       	std	Y+15, r1	; 0x0f

				// Wait for key press
				while(key_queue[count_queue] == '\0');
 9d2:	ef 85       	ldd	r30, Y+15	; 0x0f
 9d4:	f8 89       	ldd	r31, Y+16	; 0x10
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	e0 0f       	add	r30, r16
 9dc:	f1 1f       	adc	r31, r17
 9de:	80 81       	ld	r24, Z
 9e0:	91 81       	ldd	r25, Z+1	; 0x01
 9e2:	00 97       	sbiw	r24, 0x00	; 0
 9e4:	b1 f3       	breq	.-20     	; 0x9d2 <main+0x202>

				// Now that we have a key press we need to look at what was pressed.
				// Is the first key in the queue a '#'...
				if(key_queue[0] == '#'){
 9e6:	d8 01       	movw	r26, r16
 9e8:	8d 91       	ld	r24, X+
 9ea:	9c 91       	ld	r25, X
 9ec:	11 97       	sbiw	r26, 0x01	; 1
 9ee:	83 32       	cpi	r24, 0x23	; 35
 9f0:	91 05       	cpc	r25, r1
 9f2:	a1 f4       	brne	.+40     	; 0xa1c <main+0x24c>
					lock_state = lock(lock_state);
 9f4:	80 91 0e 01 	lds	r24, 0x010E
 9f8:	90 91 0f 01 	lds	r25, 0x010F
 9fc:	6b de       	rcall	.-810    	; 0x6d4 <lock>
 9fe:	90 93 0f 01 	sts	0x010F, r25
 a02:	80 93 0e 01 	sts	0x010E, r24
					clearKeyQueue();
 a06:	94 dd       	rcall	.-1240   	; 0x530 <clearKeyQueue>
					count_queue = 0;
 a08:	18 8a       	std	Y+16, r1	; 0x10
 a0a:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(enter_code,1);
 a0c:	c4 01       	movw	r24, r8
 a0e:	61 e0       	ldi	r22, 0x01	; 1
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	93 db       	rcall	.-2266   	; 0x13a <writeLCDline>
					cursorPosition(2);
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	67 db       	rcall	.-2354   	; 0xe8 <cursorPosition>
 a1a:	6b c0       	rjmp	.+214    	; 0xaf2 <main+0x322>

				// ...or is the first key in the queue a '*'?
				} else if(key_queue[0] == '*'){
 a1c:	f8 01       	movw	r30, r16
 a1e:	80 81       	ld	r24, Z
 a20:	91 81       	ldd	r25, Z+1	; 0x01
 a22:	8a 32       	cpi	r24, 0x2A	; 42
 a24:	91 05       	cpc	r25, r1
 a26:	09 f0       	breq	.+2      	; 0xa2a <main+0x25a>
 a28:	64 c0       	rjmp	.+200    	; 0xaf2 <main+0x322>
					
					clearLCD();
 a2a:	a1 db       	rcall	.-2238   	; 0x16e <clearLCD>
					clearKeyQueue();
 a2c:	81 dd       	rcall	.-1278   	; 0x530 <clearKeyQueue>
					count_queue = 0;
 a2e:	18 8a       	std	Y+16, r1	; 0x10
 a30:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(new_code_menu, 1);
 a32:	80 e2       	ldi	r24, 0x20	; 32
 a34:	91 e0       	ldi	r25, 0x01	; 1
 a36:	61 e0       	ldi	r22, 0x01	; 1
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	7f db       	rcall	.-2306   	; 0x13a <writeLCDline>
					cursorPosition(2);
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	53 db       	rcall	.-2394   	; 0xe8 <cursorPosition>

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 a42:	48 c0       	rjmp	.+144    	; 0xad4 <main+0x304>
						
						// Wait for key press
						while(key_queue[count_queue] == '\0');
 a44:	ef 85       	ldd	r30, Y+15	; 0x0f
 a46:	f8 89       	ldd	r31, Y+16	; 0x10
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	e0 0f       	add	r30, r16
 a4e:	f1 1f       	adc	r31, r17
 a50:	80 81       	ld	r24, Z
 a52:	91 81       	ldd	r25, Z+1	; 0x01
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	b1 f3       	breq	.-20     	; 0xa44 <main+0x274>

						// Was the latest key pressed between 0 and 9, AND has the user
						// entered less than the max number (8) of digits allowed for the
						// code.
						if(key_queue[0] >= '0' && key_queue[0] <= '9' && count_queue < 9){
 a58:	d8 01       	movw	r26, r16
 a5a:	8d 91       	ld	r24, X+
 a5c:	9c 91       	ld	r25, X
 a5e:	11 97       	sbiw	r26, 0x01	; 1
 a60:	80 33       	cpi	r24, 0x30	; 48
 a62:	91 05       	cpc	r25, r1
 a64:	a4 f0       	brlt	.+40     	; 0xa8e <main+0x2be>
 a66:	8d 91       	ld	r24, X+
 a68:	9c 91       	ld	r25, X
 a6a:	11 97       	sbiw	r26, 0x01	; 1
 a6c:	8a 33       	cpi	r24, 0x3A	; 58
 a6e:	91 05       	cpc	r25, r1
 a70:	74 f4       	brge	.+28     	; 0xa8e <main+0x2be>
 a72:	8f 85       	ldd	r24, Y+15	; 0x0f
 a74:	98 89       	ldd	r25, Y+16	; 0x10
 a76:	89 30       	cpi	r24, 0x09	; 9
 a78:	91 05       	cpc	r25, r1
 a7a:	4c f4       	brge	.+18     	; 0xa8e <main+0x2be>
							// QUESTION: DO WE NEED TO MANUALLY SHIFT THE QUEUE??
							writeLCDcharacter(key_queue[0]);
 a7c:	8d 91       	ld	r24, X+
 a7e:	9c 91       	ld	r25, X
 a80:	55 db       	rcall	.-2390   	; 0x12c <writeLCDcharacter>
							++count_queue;
 a82:	8f 85       	ldd	r24, Y+15	; 0x0f
 a84:	98 89       	ldd	r25, Y+16	; 0x10
 a86:	01 96       	adiw	r24, 0x01	; 1
 a88:	98 8b       	std	Y+16, r25	; 0x10
 a8a:	8f 87       	std	Y+15, r24	; 0x0f
 a8c:	23 c0       	rjmp	.+70     	; 0xad4 <main+0x304>
						
						// If the latest key pressed is '*' then lets write the new
						// code to eeprom
						} else if (key_queue[0] == '*') {
 a8e:	f8 01       	movw	r30, r16
 a90:	80 81       	ld	r24, Z
 a92:	91 81       	ldd	r25, Z+1	; 0x01
 a94:	8a 32       	cpi	r24, 0x2A	; 42
 a96:	91 05       	cpc	r25, r1
 a98:	29 f4       	brne	.+10     	; 0xaa4 <main+0x2d4>
							popKey();
 a9a:	07 dd       	rcall	.-1522   	; 0x4aa <popKey>
							writeTOeeprom(key_queue);
 a9c:	89 89       	ldd	r24, Y+17	; 0x11
 a9e:	9a 89       	ldd	r25, Y+18	; 0x12
 aa0:	a6 db       	rcall	.-2228   	; 0x1ee <writeTOeeprom>
							break;
 aa2:	27 c0       	rjmp	.+78     	; 0xaf2 <main+0x322>

						// Otherwise the only key left is '#', so that's what must've been
						// pressed. :)
						} else if(key_queue[0] == '#') {
 aa4:	80 81       	ld	r24, Z
 aa6:	91 81       	ldd	r25, Z+1	; 0x01
 aa8:	83 32       	cpi	r24, 0x23	; 35
 aaa:	91 05       	cpc	r25, r1
 aac:	99 f4       	brne	.+38     	; 0xad4 <main+0x304>
							clearLCD();
 aae:	5f db       	rcall	.-2370   	; 0x16e <clearLCD>
							writeLCDline(cancel_code_change,1);
 ab0:	c7 01       	movw	r24, r14
 ab2:	61 e0       	ldi	r22, 0x01	; 1
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	41 db       	rcall	.-2430   	; 0x13a <writeLCDline>
 ab8:	8f e3       	ldi	r24, 0x3F	; 63
 aba:	9d e0       	ldi	r25, 0x0D	; 13
 abc:	a3 e0       	ldi	r26, 0x03	; 3
 abe:	81 50       	subi	r24, 0x01	; 1
 ac0:	90 40       	sbci	r25, 0x00	; 0
 ac2:	a0 40       	sbci	r26, 0x00	; 0
 ac4:	e1 f7       	brne	.-8      	; 0xabe <main+0x2ee>
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <main+0x2f8>
 ac8:	00 00       	nop
							_delay_ms(1000);
							clearKeyQueue();
 aca:	32 dd       	rcall	.-1436   	; 0x530 <clearKeyQueue>
							count_queue = 0;
 acc:	18 8a       	std	Y+16, r1	; 0x10
 ace:	1f 86       	std	Y+15, r1	; 0x0f
							clearLCD();
 ad0:	4e db       	rcall	.-2404   	; 0x16e <clearLCD>
							break;
 ad2:	0f c0       	rjmp	.+30     	; 0xaf2 <main+0x322>
					writeLCDline(new_code_menu, 1);
					cursorPosition(2);

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 ad4:	d8 01       	movw	r26, r16
 ad6:	8d 91       	ld	r24, X+
 ad8:	9c 91       	ld	r25, X
 ada:	11 97       	sbiw	r26, 0x01	; 1
 adc:	8a 32       	cpi	r24, 0x2A	; 42
 ade:	91 05       	cpc	r25, r1
 ae0:	09 f0       	breq	.+2      	; 0xae4 <main+0x314>
 ae2:	b0 cf       	rjmp	.-160    	; 0xa44 <main+0x274>
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <main+0x322>

						// Otherwise the only key left is '#', so that's what must've been
						// pressed. :)
						} else if(key_queue[0] == '#') {
							clearLCD();
							writeLCDline(cancel_code_change,1);
 ae6:	0f 2e       	mov	r0, r31
 ae8:	f0 e1       	ldi	r31, 0x10	; 16
 aea:	ef 2e       	mov	r14, r31
 aec:	f1 e0       	ldi	r31, 0x01	; 1
 aee:	ff 2e       	mov	r15, r31
 af0:	f0 2d       	mov	r31, r0
				}
			}					
		} // End while (lock_state == 1)

		// While box is in unlocked state
			while (lock_state == 0 ) {
 af2:	80 91 0e 01 	lds	r24, 0x010E
 af6:	90 91 0f 01 	lds	r25, 0x010F
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	09 f0       	breq	.+2      	; 0xb00 <main+0x330>
 afe:	ba ce       	rjmp	.-652    	; 0x874 <main+0xa4>
 b00:	5b cf       	rjmp	.-330    	; 0x9b8 <main+0x1e8>

00000b02 <__eerd_byte_m48a>:
 b02:	f9 99       	sbic	0x1f, 1	; 31
 b04:	fe cf       	rjmp	.-4      	; 0xb02 <__eerd_byte_m48a>
 b06:	12 bc       	out	0x22, r1	; 34
 b08:	81 bd       	out	0x21, r24	; 33
 b0a:	f8 9a       	sbi	0x1f, 0	; 31
 b0c:	99 27       	eor	r25, r25
 b0e:	80 b5       	in	r24, 0x20	; 32
 b10:	08 95       	ret

00000b12 <__eewr_byte_m48a>:
 b12:	26 2f       	mov	r18, r22

00000b14 <__eewr_r18_m48a>:
 b14:	f9 99       	sbic	0x1f, 1	; 31
 b16:	fe cf       	rjmp	.-4      	; 0xb14 <__eewr_r18_m48a>
 b18:	1f ba       	out	0x1f, r1	; 31
 b1a:	12 bc       	out	0x22, r1	; 34
 b1c:	81 bd       	out	0x21, r24	; 33
 b1e:	20 bd       	out	0x20, r18	; 32
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	fa 9a       	sbi	0x1f, 2	; 31
 b26:	f9 9a       	sbi	0x1f, 1	; 31
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	01 96       	adiw	r24, 0x01	; 1
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
