
Lock_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000b90  00000c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800182  00800182  00000ca6  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001638  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a1  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000029b  00000000  00000000  00002759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e9  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  0000340c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5c  00000000  00000000  000037bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000421b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	d6 c2       	rjmp	.+1452   	; 0x5b4 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	59 c3       	rjmp	.+1714   	; 0x6ca <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e9       	ldi	r30, 0x90	; 144
  48:	fb e0       	ldi	r31, 0x0B	; 11
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 38       	cpi	r26, 0x82	; 130
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e8       	ldi	r26, 0x82	; 130
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 3a       	cpi	r26, 0xAE	; 174
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	86 d3       	rcall	.+1804   	; 0x774 <main>
  68:	91 c5       	rjmp	.+2850   	; 0xb8c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <resetTimer>:
	OCR1A = TIMEOUT;
	resetTimer();
}

void resetTimer(void){
	TCNT1 = 0x0000;							// reset 16-bit counter to 0
  6c:	10 92 85 00 	sts	0x0085, r1
  70:	10 92 84 00 	sts	0x0084, r1
}
  74:	08 95       	ret

00000076 <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  76:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	89 ef       	ldi	r24, 0xF9	; 249
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <pulseElatch+0x6>
  80:	00 c0       	rjmp	.+0      	; 0x82 <pulseElatch+0xc>
  82:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  84:	44 98       	cbi	0x08, 4	; 8
}
  86:	08 95       	ret

00000088 <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  90:	8c 01       	movw	r16, r24
  92:	00 7f       	andi	r16, 0xF0	; 240
  94:	10 70       	andi	r17, 0x00	; 0
  96:	15 95       	asr	r17
  98:	07 95       	ror	r16
  9a:	15 95       	asr	r17
  9c:	07 95       	ror	r16
  9e:	15 95       	asr	r17
  a0:	07 95       	ror	r16
  a2:	15 95       	asr	r17
  a4:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  a6:	ec 01       	movw	r28, r24
  a8:	cf 70       	andi	r28, 0x0F	; 15
  aa:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	80 2b       	or	r24, r16
  b6:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  b8:	de df       	rcall	.-68     	; 0x76 <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	00 95       	com	r16
  be:	08 23       	and	r16, r24
  c0:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8c 2b       	or	r24, r28
  c6:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  c8:	d6 df       	rcall	.-84     	; 0x76 <pulseElatch>
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <writeLCDdata+0x46>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <writeLCDdata+0x4c>
  d4:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	c0 95       	com	r28
  da:	c8 23       	and	r28, r24
  dc:	c8 b9       	out	0x08, r28	; 8
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
  f2:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  f4:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
  f6:	58 98       	cbi	0x0b, 0	; 11
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	c5 df       	rcall	.-118    	; 0x88 <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
  fe:	c2 30       	cpi	r28, 0x02	; 2
 100:	d1 05       	cpc	r29, r1
 102:	59 f4       	brne	.+22     	; 0x11a <cursorPosition+0x32>
	{
		writeLCDdata(0x2);			// Sending the cursor home
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	bf df       	rcall	.-130    	; 0x88 <writeLCDdata>
 10a:	c8 e2       	ldi	r28, 0x28	; 40
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 10e:	84 e1       	ldi	r24, 0x14	; 20
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	ba df       	rcall	.-140    	; 0x88 <writeLCDdata>
 114:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 116:	d9 f7       	brne	.-10     	; 0x10e <cursorPosition+0x26>
 118:	03 c0       	rjmp	.+6      	; 0x120 <cursorPosition+0x38>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b4 df       	rcall	.-152    	; 0x88 <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	b1 df       	rcall	.-158    	; 0x88 <writeLCDdata>
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 130:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 132:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 134:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(character);		// Sending the character on the data lines
 136:	a8 df       	rcall	.-176    	; 0x88 <writeLCDdata>
}
 138:	08 95       	ret

0000013a <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
 144:	d9 2f       	mov	r29, r25
 146:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 148:	cf df       	rcall	.-98     	; 0xe8 <cursorPosition>
 14a:	0c 2f       	mov	r16, r28
 14c:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 152:	f8 01       	movw	r30, r16
 154:	81 91       	ld	r24, Z+
 156:	8f 01       	movw	r16, r30
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	e8 df       	rcall	.-48     	; 0x12c <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	c0 31       	cpi	r28, 0x10	; 16
 160:	d1 05       	cpc	r29, r1
 162:	b9 f7       	brne	.-18     	; 0x152 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 172:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 174:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 176:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(0x01);				// Writing clear instruction
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	85 df       	rcall	.-246    	; 0x88 <writeLCDdata>
}
 17e:	08 95       	ret

00000180 <initializeLCD>:
#define LCD_PORT_2 PORTD		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRD			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 7c       	andi	r24, 0xC0	; 192
 18c:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 18e:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 190:	58 98       	cbi	0x0b, 0	; 11
 192:	c4 e0       	ldi	r28, 0x04	; 4
 194:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 19c:	6c df       	rcall	.-296    	; 0x76 <pulseElatch>
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <initializeLCD+0x22>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <initializeLCD+0x28>
 1a8:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8c 7f       	andi	r24, 0xFC	; 252
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 1b2:	89 f7       	brne	.-30     	; 0x196 <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 1b4:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 1b6:	5f df       	rcall	.-322    	; 0x76 <pulseElatch>
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <initializeLCD+0x3c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <initializeLCD+0x42>
 1c2:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 1c4:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	5e df       	rcall	.-324    	; 0x88 <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	5b df       	rcall	.-330    	; 0x88 <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	58 df       	rcall	.-336    	; 0x88 <writeLCDdata>
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <BacklightLCD>:
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
}

// Turns the LCD back light on or off
void BacklightLCD (int on1_off0){
	LCD_DDR_2 |= (1 << BL);		// Making pin PB1 an output
 1de:	51 9a       	sbi	0x0a, 1	; 10
	if (on1_off0 == 1)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	91 05       	cpc	r25, r1
 1e4:	11 f4       	brne	.+4      	; 0x1ea <BacklightLCD+0xc>
		LCD_PORT_2 &= ~(1 << BL);		// Masking or clearing pin PB1 sinking current turning on Back light
 1e6:	59 98       	cbi	0x0b, 1	; 11
 1e8:	08 95       	ret
	else
		LCD_PORT_2 |= (1 << BL);		// Setting PB1 allowing no current flow to turn bakc light off
 1ea:	59 9a       	sbi	0x0b, 1	; 11
 1ec:	08 95       	ret

000001ee <writeTOeeprom>:

int short default_code[9] = {'0','0','0','0','\0','\0','\0','\0','\0'};		// Factory default code 


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
 1f4:	fc 01       	movw	r30, r24
 1f6:	60 81       	ld	r22, Z
 1f8:	71 81       	ldd	r23, Z+1	; 0x01
 1fa:	61 15       	cp	r22, r1
 1fc:	71 05       	cpc	r23, r1
 1fe:	81 f0       	breq	.+32     	; 0x220 <writeTOeeprom+0x32>

int short default_code[9] = {'0','0','0','0','\0','\0','\0','\0','\0'};		// Factory default code 


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
 200:	8c 01       	movw	r16, r24
 202:	0e 5f       	subi	r16, 0xFE	; 254
 204:	1f 4f       	sbci	r17, 0xFF	; 255
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 206:	c1 e0       	ldi	r28, 0x01	; 1
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
		eeprom_write_byte(temp_ee_address, code_to_save[add_count]);	// writing byte to specified address
 208:	8c 2f       	mov	r24, r28
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	b1 d4       	rcall	.+2402   	; 0xb70 <__eewr_byte_m48a>
		temp_ee_address++;												// incrementing address counter
 20e:	cf 5f       	subi	r28, 0xFF	; 255

// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
 210:	f8 01       	movw	r30, r16
 212:	61 91       	ld	r22, Z+
 214:	71 91       	ld	r23, Z+
 216:	8f 01       	movw	r16, r30
 218:	61 15       	cp	r22, r1
 21a:	71 05       	cpc	r23, r1
 21c:	a9 f7       	brne	.-22     	; 0x208 <writeTOeeprom+0x1a>
 21e:	01 c0       	rjmp	.+2      	; 0x222 <writeTOeeprom+0x34>


// Writes an 9 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[]){
	int add_count = 0;													// variable declaration to loop through eeprom addresses
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 220:	c1 e0       	ldi	r28, 0x01	; 1
	while(code_to_save[add_count] != '\0'){								// looping through code to save array
		eeprom_write_byte(temp_ee_address, code_to_save[add_count]);	// writing byte to specified address
		temp_ee_address++;												// incrementing address counter
		add_count++;													// incrementing array counter
	}
	eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing the NULL character to the end of the pass code
 222:	8c 2f       	mov	r24, r28
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a4 d4       	rcall	.+2376   	; 0xb70 <__eewr_byte_m48a>
	eeprom_write_byte(EEPROM_NEWCODE_ADDRESS,0x0);						// Setting new code flag
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	a0 d4       	rcall	.+2368   	; 0xb70 <__eewr_byte_m48a>
}
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <readFROMeeprom>:


// Reads the contents of EEPROM and store them in an 9 element array
void readFROMeeprom(int short *saved_code[]){
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	7c 01       	movw	r14, r24
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	8a d4       	rcall	.+2324   	; 0xb60 <__eerd_byte_m48a>
 24c:	88 23       	and	r24, r24
 24e:	21 f4       	brne	.+8      	; 0x258 <readFROMeeprom+0x20>
 250:	87 01       	movw	r16, r14
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	0e c0       	rjmp	.+28     	; 0x274 <readFROMeeprom+0x3c>
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 258:	80 91 70 01 	lds	r24, 0x0170
 25c:	90 91 71 01 	lds	r25, 0x0171
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	b1 f4       	brne	.+44     	; 0x290 <readFROMeeprom+0x58>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <readFROMeeprom+0x78>
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
 26a:	f8 01       	movw	r30, r16
 26c:	81 93       	st	Z+, r24
 26e:	91 93       	st	Z+, r25
 270:	8f 01       	movw	r16, r30
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
 272:	21 96       	adiw	r28, 0x01	; 1
void readFROMeeprom(int short *saved_code[]){
	int add_count = 0;														// variable declaration to loop through eeprom and elements of array
	uint8_t temp_ee_address = EEPROM_DATA_ADDRESS;							// temp address variable to go through eeprom
	
	if(eeprom_read_byte(EEPROM_NEWCODE_ADDRESS) == 0x0){
		while(eeprom_read_byte(temp_ee_address) != NULL){					// looping through code to save array
 274:	8c 2f       	mov	r24, r28
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	72 d4       	rcall	.+2276   	; 0xb60 <__eerd_byte_m48a>
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	a1 f7       	brne	.-24     	; 0x26a <readFROMeeprom+0x32>
			saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
			temp_ee_address++;												// incrementing address counter		
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
 282:	cc 0f       	add	r28, r28
 284:	dd 1f       	adc	r29, r29
 286:	ce 0d       	add	r28, r14
 288:	df 1d       	adc	r29, r15
 28a:	19 82       	std	Y+1, r1	; 0x01
 28c:	18 82       	st	Y, r1
 28e:	17 c0       	rjmp	.+46     	; 0x2be <readFROMeeprom+0x86>
 290:	d7 01       	movw	r26, r14
 292:	e2 e7       	ldi	r30, 0x72	; 114
 294:	f1 e0       	ldi	r31, 0x01	; 1
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
 29a:	8d 93       	st	X+, r24
 29c:	9d 93       	st	X+, r25
			add_count++;													// incrementing array counter			
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
			add_count ++;													// incrementing array counter
		}
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);			// setting NULL character at the end of pass code array
	}
	else{
		while(default_code[add_count] != NULL){								// looping through code to save array
 2a2:	50 81       	ld	r21, Z
 2a4:	41 81       	ldd	r20, Z+1	; 0x01
 2a6:	32 96       	adiw	r30, 0x02	; 2
 2a8:	85 2f       	mov	r24, r21
 2aa:	94 2f       	mov	r25, r20
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	a9 f7       	brne	.-22     	; 0x29a <readFROMeeprom+0x62>
			saved_code[add_count] = default_code[add_count];				// writing byte to specified address
			add_count++;													// incrementing array counter			
		}
		saved_code[add_count] = default_code[add_count];					// setting NULL character at the end of pass code array
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	e2 0e       	add	r14, r18
 2b6:	f3 1e       	adc	r15, r19
 2b8:	f7 01       	movw	r30, r14
 2ba:	91 83       	std	Z+1, r25	; 0x01
 2bc:	80 83       	st	Z, r24
	}	
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <initializeKeypadInterrupts>:
// globals to be moved later							
volatile int key_queue[KEY_QUEUE_SIZE];							// holds user inputs
int current_key;

// initialize pin-change interrupts for keypad
void initializeKeypadInterrupts(int rows[]){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 2d0:	e8 e6       	ldi	r30, 0x68	; 104
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	20 81       	ld	r18, Z
 2d6:	21 60       	ori	r18, 0x01	; 1
 2d8:	20 83       	st	Z, r18
 2da:	e8 2f       	mov	r30, r24
 2dc:	f9 2f       	mov	r31, r25
 2de:	24 e0       	ldi	r18, 0x04	; 4
 2e0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 2e2:	ab e6       	ldi	r26, 0x6B	; 107
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	6c 91       	ld	r22, X
 2ec:	80 81       	ld	r24, Z
 2ee:	32 96       	adiw	r30, 0x02	; 2
 2f0:	ea 01       	movw	r28, r20
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <initializeKeypadInterrupts+0x2c>
 2f4:	cc 0f       	add	r28, r28
 2f6:	dd 1f       	adc	r29, r29
 2f8:	8a 95       	dec	r24
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <initializeKeypadInterrupts+0x28>
 2fc:	ce 01       	movw	r24, r28
 2fe:	86 2b       	or	r24, r22
 300:	8c 93       	st	X, r24
 302:	21 50       	subi	r18, 0x01	; 1
 304:	30 40       	sbci	r19, 0x00	; 0
int current_key;

// initialize pin-change interrupts for keypad
void initializeKeypadInterrupts(int rows[]){
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 306:	89 f7       	brne	.-30     	; 0x2ea <initializeKeypadInterrupts+0x1e>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	86 ea       	ldi	r24, 0xA6	; 166
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <getButtonState+0x2>
 314:	00 c0       	rjmp	.+0      	; 0x316 <getButtonState+0x8>
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(500);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 316:	1f 9b       	sbis	0x03, 7	; 3
 318:	0b c0       	rjmp	.+22     	; 0x330 <getButtonState+0x22>
	else if(!(PINB &(1 << ROW2))) s = 1;				
 31a:	18 9b       	sbis	0x03, 0	; 3
 31c:	0c c0       	rjmp	.+24     	; 0x336 <getButtonState+0x28>
	else if(!(PINB &(1 << ROW3))) s = 1;				
 31e:	19 9b       	sbis	0x03, 1	; 3
 320:	0d c0       	rjmp	.+26     	; 0x33c <getButtonState+0x2e>
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(500);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	1a 9b       	sbis	0x03, 2	; 3
 328:	0b c0       	rjmp	.+22     	; 0x340 <getButtonState+0x32>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
 340:	08 95       	ret

00000342 <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 342:	1f 9b       	sbis	0x03, 7	; 3
 344:	07 c0       	rjmp	.+14     	; 0x354 <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 346:	18 9b       	sbis	0x03, 0	; 3
 348:	08 c0       	rjmp	.+16     	; 0x35a <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 34a:	19 9b       	sbis	0x03, 1	; 3
 34c:	09 c0       	rjmp	.+18     	; 0x360 <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 34e:	1a 9b       	sbis	0x03, 2	; 3
 350:	0a c0       	rjmp	.+20     	; 0x366 <getRow+0x24>
 352:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
 36a:	08 95       	ret

0000036c <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
 36c:	2b 9a       	sbi	0x05, 3	; 5
 36e:	66 ea       	ldi	r22, 0xA6	; 166
 370:	6a 95       	dec	r22
 372:	f1 f7       	brne	.-4      	; 0x370 <getCol+0x4>
 374:	00 c0       	rjmp	.+0      	; 0x376 <getCol+0xa>
	_delay_us(500);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 376:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
 378:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
 37a:	2c 9a       	sbi	0x05, 4	; 5
 37c:	76 ea       	ldi	r23, 0xA6	; 166
 37e:	7a 95       	dec	r23
 380:	f1 f7       	brne	.-4      	; 0x37e <getCol+0x12>
 382:	00 c0       	rjmp	.+0      	; 0x384 <getCol+0x18>
	_delay_us(500);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 384:	23 b1       	in	r18, 0x03	; 3
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	08 2e       	mov	r0, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <getCol+0x24>
 38c:	35 95       	asr	r19
 38e:	27 95       	ror	r18
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <getCol+0x20>
 394:	20 fd       	sbrc	r18, 0
 396:	03 c0       	rjmp	.+6      	; 0x39e <getCol+0x32>
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <getCol+0x36>
		c = 2;											// then the key press was in the second column
 39e:	22 e0       	ldi	r18, 0x02	; 2
 3a0:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 3a2:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 3a4:	2d 9a       	sbi	0x05, 5	; 5
 3a6:	96 ea       	ldi	r25, 0xA6	; 166
 3a8:	9a 95       	dec	r25
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <getCol+0x3c>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <getCol+0x42>
	_delay_us(500);										// wait for denouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 3ae:	43 b1       	in	r20, 0x03	; 3
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	ba 01       	movw	r22, r20
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <getCol+0x4e>
 3b6:	75 95       	asr	r23
 3b8:	67 95       	ror	r22
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <getCol+0x4a>
 3be:	60 ff       	sbrs	r22, 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <getCol+0x5a>
		c = 3;											// then the key press was in the third column
 3c2:	23 e0       	ldi	r18, 0x03	; 3
 3c4:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 3c6:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 3c8:	82 2f       	mov	r24, r18
 3ca:	93 2f       	mov	r25, r19
 3cc:	08 95       	ret

000003ce <keyMap>:

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 3ce:	87 30       	cpi	r24, 0x07	; 7
 3d0:	91 05       	cpc	r25, r1
 3d2:	51 f4       	brne	.+20     	; 0x3e8 <keyMap+0x1a>
 3d4:	61 30       	cpi	r22, 0x01	; 1
 3d6:	71 05       	cpc	r23, r1
 3d8:	79 f1       	breq	.+94     	; 0x438 <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 3da:	62 30       	cpi	r22, 0x02	; 2
 3dc:	71 05       	cpc	r23, r1
 3de:	79 f1       	breq	.+94     	; 0x43e <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 3e0:	63 30       	cpi	r22, 0x03	; 3
 3e2:	71 05       	cpc	r23, r1
 3e4:	e1 f4       	brne	.+56     	; 0x41e <keyMap+0x50>
 3e6:	2e c0       	rjmp	.+92     	; 0x444 <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	51 f4       	brne	.+20     	; 0x400 <keyMap+0x32>
 3ec:	61 30       	cpi	r22, 0x01	; 1
 3ee:	71 05       	cpc	r23, r1
 3f0:	61 f1       	breq	.+88     	; 0x44a <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 3f2:	62 30       	cpi	r22, 0x02	; 2
 3f4:	71 05       	cpc	r23, r1
 3f6:	61 f1       	breq	.+88     	; 0x450 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 3f8:	63 30       	cpi	r22, 0x03	; 3
 3fa:	71 05       	cpc	r23, r1
 3fc:	e9 f5       	brne	.+122    	; 0x478 <keyMap+0xaa>
 3fe:	2b c0       	rjmp	.+86     	; 0x456 <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	91 05       	cpc	r25, r1
 404:	61 f4       	brne	.+24     	; 0x41e <keyMap+0x50>
 406:	61 30       	cpi	r22, 0x01	; 1
 408:	71 05       	cpc	r23, r1
 40a:	41 f1       	breq	.+80     	; 0x45c <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 40c:	62 30       	cpi	r22, 0x02	; 2
 40e:	71 05       	cpc	r23, r1
 410:	41 f1       	breq	.+80     	; 0x462 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 0x39;
 412:	63 30       	cpi	r22, 0x03	; 3
 414:	71 05       	cpc	r23, r1
 416:	81 f5       	brne	.+96     	; 0x478 <keyMap+0xaa>
 418:	29 e3       	ldi	r18, 0x39	; 57
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	2d c0       	rjmp	.+90     	; 0x478 <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	91 05       	cpc	r25, r1
 422:	51 f5       	brne	.+84     	; 0x478 <keyMap+0xaa>
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	71 05       	cpc	r23, r1
 428:	f9 f0       	breq	.+62     	; 0x468 <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 42a:	62 30       	cpi	r22, 0x02	; 2
 42c:	71 05       	cpc	r23, r1
 42e:	f9 f0       	breq	.+62     	; 0x46e <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 430:	63 30       	cpi	r22, 0x03	; 3
 432:	71 05       	cpc	r23, r1
 434:	09 f5       	brne	.+66     	; 0x478 <keyMap+0xaa>
 436:	1e c0       	rjmp	.+60     	; 0x474 <keyMap+0xa6>
}

int keyMap(int r,int c) { 								// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 438:	21 e3       	ldi	r18, 0x31	; 49
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	1d c0       	rjmp	.+58     	; 0x478 <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 43e:	22 e3       	ldi	r18, 0x32	; 50
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	1a c0       	rjmp	.+52     	; 0x478 <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 444:	23 e3       	ldi	r18, 0x33	; 51
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	17 c0       	rjmp	.+46     	; 0x478 <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 44a:	24 e3       	ldi	r18, 0x34	; 52
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	14 c0       	rjmp	.+40     	; 0x478 <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 450:	25 e3       	ldi	r18, 0x35	; 53
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	11 c0       	rjmp	.+34     	; 0x478 <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 456:	26 e3       	ldi	r18, 0x36	; 54
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	0e c0       	rjmp	.+28     	; 0x478 <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 45c:	27 e3       	ldi	r18, 0x37	; 55
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	0b c0       	rjmp	.+22     	; 0x478 <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 462:	28 e3       	ldi	r18, 0x38	; 56
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	08 c0       	rjmp	.+16     	; 0x478 <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 0x39;
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 468:	2a e2       	ldi	r18, 0x2A	; 42
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	05 c0       	rjmp	.+10     	; 0x478 <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 46e:	20 e3       	ldi	r18, 0x30	; 48
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 474:	23 e2       	ldi	r18, 0x23	; 35
 476:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 478:	82 2f       	mov	r24, r18
 47a:	93 2f       	mov	r25, r19
 47c:	08 95       	ret

0000047e <getKeyPress>:
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
}

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 482:	5f df       	rcall	.-322    	; 0x342 <getRow>
 484:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 486:	72 df       	rcall	.-284    	; 0x36c <getCol>
 488:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 48a:	ce 01       	movw	r24, r28
 48c:	a0 df       	rcall	.-192    	; 0x3ce <keyMap>
	//pushKey(key); 									// push key onto queue		
	current_key = key;
 48e:	90 93 87 01 	sts	0x0187, r25
 492:	80 93 86 01 	sts	0x0186, r24
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <popKey>:
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 49c:	a0 91 88 01 	lds	r26, 0x0188
 4a0:	b0 91 89 01 	lds	r27, 0x0189
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i+1];
 4a8:	68 e8       	ldi	r22, 0x88	; 136
 4aa:	71 e0       	ldi	r23, 0x01	; 1
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <popKey+0x14>
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4ae:	c9 01       	movw	r24, r18
		key_queue[i] = key_queue[i+1];
 4b0:	9c 01       	movw	r18, r24
 4b2:	2f 5f       	subi	r18, 0xFF	; 255
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	f9 01       	movw	r30, r18
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	e6 0f       	add	r30, r22
 4be:	f7 1f       	adc	r31, r23
 4c0:	40 81       	ld	r20, Z
 4c2:	51 81       	ldd	r21, Z+1	; 0x01
 4c4:	fc 01       	movw	r30, r24
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	e6 0f       	add	r30, r22
 4cc:	f7 1f       	adc	r31, r23
 4ce:	51 83       	std	Z+1, r21	; 0x01
 4d0:	40 83       	st	Z, r20
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 4d2:	29 30       	cpi	r18, 0x09	; 9
 4d4:	31 05       	cpc	r19, r1
 4d6:	59 f7       	brne	.-42     	; 0x4ae <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
 4d8:	10 92 9b 01 	sts	0x019B, r1
 4dc:	10 92 9a 01 	sts	0x019A, r1
	return k;
}
 4e0:	8a 2f       	mov	r24, r26
 4e2:	9b 2f       	mov	r25, r27
 4e4:	08 95       	ret

000004e6 <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 4e6:	dc 01       	movw	r26, r24
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 4e8:	89 e0       	ldi	r24, 0x09	; 9
 4ea:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = key_queue[i-1];
 4ec:	68 e8       	ldi	r22, 0x88	; 136
 4ee:	71 e0       	ldi	r23, 0x01	; 1
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
 4f0:	9c 01       	movw	r18, r24
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	30 40       	sbci	r19, 0x00	; 0
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 4f6:	f9 01       	movw	r30, r18
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	e6 0f       	add	r30, r22
 4fe:	f7 1f       	adc	r31, r23
 500:	40 81       	ld	r20, Z
 502:	51 81       	ldd	r21, Z+1	; 0x01
 504:	fc 01       	movw	r30, r24
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e6 0f       	add	r30, r22
 50c:	f7 1f       	adc	r31, r23
 50e:	51 83       	std	Z+1, r21	; 0x01
 510:	40 83       	st	Z, r20
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 512:	c9 01       	movw	r24, r18
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	61 f7       	brne	.-40     	; 0x4f0 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;	
 518:	b0 93 89 01 	sts	0x0189, r27
 51c:	a0 93 88 01 	sts	0x0188, r26
}
 520:	08 95       	ret

00000522 <clearKeyQueue>:

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
		key_queue[i] = '\0';
 526:	28 e8       	ldi	r18, 0x88	; 136
 528:	31 e0       	ldi	r19, 0x01	; 1
 52a:	fc 01       	movw	r30, r24
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	e2 0f       	add	r30, r18
 532:	f3 1f       	adc	r31, r19
 534:	11 82       	std	Z+1, r1	; 0x01
 536:	10 82       	st	Z, r1
	}
	key_queue[0] = k;	
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	8a 30       	cpi	r24, 0x0A	; 10
 53c:	91 05       	cpc	r25, r1
 53e:	a9 f7       	brne	.-22     	; 0x52a <clearKeyQueue+0x8>
		key_queue[i] = '\0';
	}
	
}
 540:	08 95       	ret

00000542 <initRows>:

void initRows(int r[]){									// sets keypad rows as inputs
 542:	e8 2f       	mov	r30, r24
 544:	f9 2f       	mov	r31, r25
 546:	84 e0       	ldi	r24, 0x04	; 4
 548:	90 e0       	ldi	r25, 0x00	; 0
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	64 b1       	in	r22, 0x04	; 4
 550:	20 81       	ld	r18, Z
 552:	32 96       	adiw	r30, 0x02	; 2
 554:	da 01       	movw	r26, r20
 556:	02 c0       	rjmp	.+4      	; 0x55c <initRows+0x1a>
 558:	aa 0f       	add	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	2a 95       	dec	r18
 55e:	e2 f7       	brpl	.-8      	; 0x558 <initRows+0x16>
 560:	9d 01       	movw	r18, r26
 562:	20 95       	com	r18
 564:	26 23       	and	r18, r22
 566:	24 b9       	out	0x04, r18	; 4
 568:	01 97       	sbiw	r24, 0x01	; 1
	}
	
}

void initRows(int r[]){									// sets keypad rows as inputs
for(int i = 0; i < NUM_ROWS; i++){
 56a:	89 f7       	brne	.-30     	; 0x54e <initRows+0xc>
	DDRB &= ~(1 << r[i]);
}
}
 56c:	08 95       	ret

0000056e <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 56e:	e8 2f       	mov	r30, r24
 570:	f9 2f       	mov	r31, r25
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	65 b1       	in	r22, 0x05	; 5
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 57c:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 57e:	ca 01       	movw	r24, r20
 580:	00 80       	ld	r0, Z
 582:	02 c0       	rjmp	.+4      	; 0x588 <initColumns+0x1a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <initColumns+0x16>
 58c:	80 95       	com	r24
 58e:	86 23       	and	r24, r22
 590:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 592:	64 b1       	in	r22, 0x04	; 4
 594:	32 96       	adiw	r30, 0x02	; 2
 596:	ca 01       	movw	r24, r20
 598:	0c 90       	ld	r0, X
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <initColumns+0x32>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <initColumns+0x2e>
 5a4:	86 2b       	or	r24, r22
 5a6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 5a8:	2f 5f       	subi	r18, 0xFF	; 255
 5aa:	3f 4f       	sbci	r19, 0xFF	; 255
 5ac:	23 30       	cpi	r18, 0x03	; 3
 5ae:	31 05       	cpc	r19, r1
 5b0:	21 f7       	brne	.-56     	; 0x57a <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}
 5b2:	08 95       	ret

000005b4 <__vector_3>:

// interrupt service routine for a key press/release
 ISR(PCINT0_vect){
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	89 ef       	ldi	r24, 0xF9	; 249
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <__vector_3+0x26>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__vector_3+0x2c>
 5e0:	00 00       	nop
	 _delay_ms(1);
	 if(getButtonState()){
 5e2:	95 de       	rcall	.-726    	; 0x30e <getButtonState>
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	41 f0       	breq	.+16     	; 0x5f8 <__vector_3+0x44>
		 getKeyPress();
 5e8:	4a df       	rcall	.-364    	; 0x47e <getKeyPress>
 5ea:	83 ed       	ldi	r24, 0xD3	; 211
 5ec:	90 e3       	ldi	r25, 0x30	; 48
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <__vector_3+0x3a>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__vector_3+0x40>
 5f4:	00 00       	nop
 5f6:	0c c0       	rjmp	.+24     	; 0x610 <__vector_3+0x5c>
		 _delay_ms(50);
	 }
	 else if(!getButtonState()){
 5f8:	8a de       	rcall	.-748    	; 0x30e <getButtonState>
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	49 f4       	brne	.+18     	; 0x610 <__vector_3+0x5c>
		 pushKey(current_key);
 5fe:	80 91 86 01 	lds	r24, 0x0186
 602:	90 91 87 01 	lds	r25, 0x0187
 606:	6f df       	rcall	.-290    	; 0x4e6 <pushKey>
		 BacklightLCD(1);
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	e8 dd       	rcall	.-1072   	; 0x1de <BacklightLCD>
		 resetTimer();
 60e:	2e dd       	rcall	.-1444   	; 0x6c <resetTimer>
 610:	81 ee       	ldi	r24, 0xE1	; 225
 612:	94 e0       	ldi	r25, 0x04	; 4
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <__vector_3+0x60>
 618:	00 c0       	rjmp	.+0      	; 0x61a <__vector_3+0x66>
 61a:	00 00       	nop
	 }
	 _delay_ms(5);
 }
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <unlock>:
#define BUFFER 250				// pause for 1/4 sec to allow motor to shove off


int unlock(int status)
{
	cli();							// disable interrupt
 63e:	f8 94       	cli
	
	if(status != 0)					// if not open, open
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	09 f0       	breq	.+2      	; 0x646 <unlock+0x8>
		MOTORPORT |= PULLIN;		// FIN goes high, lock shoves off
 644:	5c 9a       	sbi	0x0b, 4	; 11
 646:	e3 e2       	ldi	r30, 0x23	; 35
 648:	f4 ef       	ldi	r31, 0xF4	; 244
 64a:	31 97       	sbiw	r30, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <unlock+0xc>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <unlock+0x12>
 650:	00 00       	nop
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 0){				// while not open
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	31 f4       	brne	.+12     	; 0x662 <unlock+0x24>
 656:	09 c0       	rjmp	.+18     	; 0x66a <unlock+0x2c>
									
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 658:	1e 99       	sbic	0x03, 6	; 3
 65a:	fe cf       	rjmp	.-4      	; 0x658 <unlock+0x1a>
			status = 0;						// lock is 0=open
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	04 c0       	rjmp	.+8      	; 0x66a <unlock+0x2c>
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 0){				// while not open
									
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 662:	1e 99       	sbic	0x03, 6	; 3
 664:	f9 cf       	rjmp	.-14     	; 0x658 <unlock+0x1a>
			status = 0;						// lock is 0=open
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
	}		

	MOTORPORT &= ~PULLIN;		// FIN goes low, lock stops
 66a:	5c 98       	cbi	0x0b, 4	; 11
	sei();						// re-enable interrupt
 66c:	78 94       	sei
	return status;				// update lock state
}
 66e:	08 95       	ret

00000670 <lock>:

int lock(int status)
{
	cli();						// disable interrupt
 670:	f8 94       	cli
	
	if(status != 1)					// if not locked, lock
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	91 05       	cpc	r25, r1
 676:	09 f0       	breq	.+2      	; 0x67a <lock+0xa>
		MOTORPORT |= PUSHOUT;		// RIN goes high, lock shoves off
 678:	5b 9a       	sbi	0x0b, 3	; 11
 67a:	e3 e2       	ldi	r30, 0x23	; 35
 67c:	f4 ef       	ldi	r31, 0xF4	; 244
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <lock+0xe>
 682:	00 c0       	rjmp	.+0      	; 0x684 <lock+0x14>
 684:	00 00       	nop
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 1){				// while not open
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	91 05       	cpc	r25, r1
 68a:	31 f4       	brne	.+12     	; 0x698 <lock+0x28>
 68c:	09 c0       	rjmp	.+18     	; 0x6a0 <lock+0x30>
	
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 68e:	1e 99       	sbic	0x03, 6	; 3
 690:	fe cf       	rjmp	.-4      	; 0x68e <lock+0x1e>
			status = 1;						// lock is 1=locked
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <lock+0x30>
	
	_delay_ms(BUFFER);				// motor propagation delay
	
	while(status != 1){				// while not open
	
		if((FDBKPORT & (1<<FDBKPIN))==0)	// check for button press
 698:	1e 99       	sbic	0x03, 6	; 3
 69a:	f9 cf       	rjmp	.-14     	; 0x68e <lock+0x1e>
			status = 1;						// lock is 1=locked
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
	}

	MOTORPORT &= ~PUSHOUT;		// RIN goes low, lock stops
 6a0:	5b 98       	cbi	0x0b, 3	; 11
	sei();						// re-enable interrupt
 6a2:	78 94       	sei
	return status;				// update lock state
}
 6a4:	08 95       	ret

000006a6 <testLock>:



 int testLock(int status){
	 int lock_state = 1;
	 DDRD |= (1 << PD6);
 6a6:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD |= (1 << PD6);
 6a8:	5e 9a       	sbi	0x0b, 6	; 11
	 return lock_state;
 }
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <testUnlock>:

 int testUnlock(int status){
	 int lock_state = 0;
	 DDRD |= (1 << PD6);
 6b0:	56 9a       	sbi	0x0a, 6	; 10
	 PORTD &= ~(1 << PD6);
 6b2:	5e 98       	cbi	0x0b, 6	; 11
	 return lock_state;
 }
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <testfun>:

 void testfun(int on_off){
	 DDRD |= (1 << PD7);
 6ba:	57 9a       	sbi	0x0a, 7	; 10
	 if (on_off == 1)
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	91 05       	cpc	r25, r1
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <testfun+0xc>
	 PORTD |= (1 << PD7);
 6c2:	5f 9a       	sbi	0x0b, 7	; 11
 6c4:	08 95       	ret
	 else
	 PORTD &= ~(1 << PD7);
 6c6:	5f 98       	cbi	0x0b, 7	; 11
 6c8:	08 95       	ret

000006ca <__vector_11>:

#include "timeout.h"
#define TIMEOUT 0x1000						// approx 4096 ms

ISR(TIMER1_COMPA_vect){
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
 6ec:	89 ef       	ldi	r24, 0xF9	; 249
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <__vector_11+0x26>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <__vector_11+0x2c>
 6f6:	00 00       	nop
	_delay_ms(1);
	if (lock_state != 1) {
 6f8:	80 91 0e 01 	lds	r24, 0x010E
 6fc:	90 91 0f 01 	lds	r25, 0x010F
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	91 05       	cpc	r25, r1
 704:	41 f0       	breq	.+16     	; 0x716 <__vector_11+0x4c>
		resetTimer();
 706:	b2 dc       	rcall	.-1692   	; 0x6c <resetTimer>
 708:	89 ef       	ldi	r24, 0xF9	; 249
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <__vector_11+0x42>
 710:	00 c0       	rjmp	.+0      	; 0x712 <__vector_11+0x48>
 712:	00 00       	nop
 714:	0c c0       	rjmp	.+24     	; 0x72e <__vector_11+0x64>
		_delay_ms(1);
	}
	else if((lock_state == 1)&&(key_queue[0])){
 716:	80 91 88 01 	lds	r24, 0x0188
 71a:	90 91 89 01 	lds	r25, 0x0189
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	31 f0       	breq	.+12     	; 0x72e <__vector_11+0x64>
		BacklightLCD(0);
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	5b dd       	rcall	.-1354   	; 0x1de <BacklightLCD>
		pushKey('#');
 728:	83 e2       	ldi	r24, 0x23	; 35
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	dc de       	rcall	.-584    	; 0x4e6 <pushKey>

	}
}
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <initializeTimeout>:

void initializeTimeout(void){
	TIMSK1 |= (1 << OCIE1A);				// enable output compare A match interrupt
 750:	ef e6       	ldi	r30, 0x6F	; 111
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	82 60       	ori	r24, 0x02	; 2
 758:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12)|(1 << CS10);		// configure timer/counter clock prescaling
 75a:	e1 e8       	ldi	r30, 0x81	; 129
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	85 60       	ori	r24, 0x05	; 5
 762:	80 83       	st	Z, r24
	OCR1A = TIMEOUT;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e1       	ldi	r25, 0x10	; 16
 768:	90 93 89 00 	sts	0x0089, r25
 76c:	80 93 88 00 	sts	0x0088, r24
	resetTimer();
 770:	7d dc       	rcall	.-1798   	; 0x6c <resetTimer>
}
 772:	08 95       	ret

00000774 <main>:
	int count = 0;											// counter variable used for loops
	
	 #include "timeout.c"
	 #include "timeout.h"

 int main(void) {
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	62 97       	sbiw	r28, 0x12	; 18
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
	 // initialize
	// short int testcode[9] = {'3','2','1','\0','\0','\0','\0','\0','\0'};
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 788:	de 01       	movw	r26, r28
 78a:	11 96       	adiw	r26, 0x01	; 1
 78c:	e0 e0       	ldi	r30, 0x00	; 0
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	88 e0       	ldi	r24, 0x08	; 8
 792:	01 90       	ld	r0, Z+
 794:	0d 92       	st	X+, r0
 796:	81 50       	subi	r24, 0x01	; 1
 798:	e1 f7       	brne	.-8      	; 0x792 <main+0x1e>
	int cols[] = {COL1, COL2, COL3};
 79a:	de 01       	movw	r26, r28
 79c:	19 96       	adiw	r26, 0x09	; 9
 79e:	e8 e0       	ldi	r30, 0x08	; 8
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	86 e0       	ldi	r24, 0x06	; 6
 7a4:	01 90       	ld	r0, Z+
 7a6:	0d 92       	st	X+, r0
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x30>
	volatile int count_queue;							// Keep track of how many characters are
														// in the queue
	int code_is_correct;								 
			
	
	initializeKeypadInterrupts(rows);	
 7ac:	ce 01       	movw	r24, r28
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	8d dd       	rcall	.-1254   	; 0x2cc <initializeKeypadInterrupts>
	sei();												// global interrupt enable
 7b2:	78 94       	sei
	
	initRows(rows);										// set keypad rows as inputs
 7b4:	ce 01       	movw	r24, r28
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	c4 de       	rcall	.-632    	; 0x542 <initRows>
	initColumns(cols);									// set keypad columns as outputs
 7ba:	ce 01       	movw	r24, r28
 7bc:	09 96       	adiw	r24, 0x09	; 9
 7be:	d7 de       	rcall	.-594    	; 0x56e <initColumns>
	initializeLCD();									// set up LCD and initialize in 4 bit mode
 7c0:	df dc       	rcall	.-1602   	; 0x180 <initializeLCD>
	BacklightLCD(1);
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0b dd       	rcall	.-1514   	; 0x1de <BacklightLCD>
	clearKeyQueue();
 7c8:	ac de       	rcall	.-680    	; 0x522 <clearKeyQueue>

	testfun(0);
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	75 df       	rcall	.-278    	; 0x6ba <testfun>

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <main+0x6c>
			lock_state = testLock(2);
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	67 df       	rcall	.-306    	; 0x6a6 <testLock>
 7d8:	90 93 0f 01 	sts	0x010F, r25
 7dc:	80 93 0e 01 	sts	0x010E, r24

	testfun(0);

	
	// Ensure we're locked to start with.
	while (lock_state != 1) {
 7e0:	80 91 0e 01 	lds	r24, 0x010E
 7e4:	90 91 0f 01 	lds	r25, 0x010F
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	91 05       	cpc	r25, r1
 7ec:	91 f7       	brne	.-28     	; 0x7d2 <main+0x5e>
			lock_state = testLock(2);
	}
	initializeTimeout();
 7ee:	b0 df       	rcall	.-160    	; 0x750 <initializeTimeout>
		
		// Print greeting
		clearLCD();
		writeLCDline(enter_code,1);
		cursorPosition(2);
		readFROMeeprom(current_code);
 7f0:	0f 2e       	mov	r0, r31
 7f2:	fc e9       	ldi	r31, 0x9C	; 156
 7f4:	4f 2e       	mov	r4, r31
 7f6:	f1 e0       	ldi	r31, 0x01	; 1
 7f8:	5f 2e       	mov	r5, r31
 7fa:	f0 2d       	mov	r31, r0
			
			

					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 7fc:	0f 2e       	mov	r0, r31
 7fe:	f8 e8       	ldi	r31, 0x88	; 136
 800:	ef 2e       	mov	r14, r31
 802:	f1 e0       	ldi	r31, 0x01	; 1
 804:	ff 2e       	mov	r15, r31
 806:	f0 2d       	mov	r31, r0
	int count = 0;											// counter variable used for loops
	
	 #include "timeout.c"
	 #include "timeout.h"

 int main(void) {
 808:	0f 2e       	mov	r0, r31
 80a:	f2 e1       	ldi	r31, 0x12	; 18
 80c:	af 2e       	mov	r10, r31
 80e:	bb 24       	eor	r11, r11
 810:	f0 2d       	mov	r31, r0
 812:	a4 0c       	add	r10, r4
 814:	b5 1c       	adc	r11, r5
			
			

					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 816:	e9 8a       	std	Y+17, r14	; 0x11
 818:	fa 8a       	std	Y+18, r15	; 0x12
						code_is_correct = 0;
					++count;				
				}
				if(!code_is_correct && count > 0){
					clearLCD();
					writeLCDline(incorrect_code,1);
 81a:	0f 2e       	mov	r0, r31
 81c:	f0 e5       	ldi	r31, 0x50	; 80
 81e:	2f 2e       	mov	r2, r31
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	3f 2e       	mov	r3, r31
 824:	f0 2d       	mov	r31, r0
	while(1) {
		
		
		
		// Print greeting
		clearLCD();
 826:	a3 dc       	rcall	.-1722   	; 0x16e <clearLCD>
		writeLCDline(enter_code,1);
 828:	80 e6       	ldi	r24, 0x60	; 96
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	84 dc       	rcall	.-1784   	; 0x13a <writeLCDline>
		cursorPosition(2);
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	58 dc       	rcall	.-1872   	; 0xe8 <cursorPosition>
		readFROMeeprom(current_code);
 838:	c2 01       	movw	r24, r4
 83a:	fe dc       	rcall	.-1540   	; 0x238 <readFROMeeprom>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
				count = 0;
 83c:	88 24       	eor	r8, r8
 83e:	99 24       	eor	r9, r9
					writeLCDline(incorrect_code,1);
					_delay_ms(5000);
					clearKeyQueue();
					count_queue = 0;
					clearLCD();
					writeLCDline(enter_code,1);
 840:	0f 2e       	mov	r0, r31
 842:	f0 e6       	ldi	r31, 0x60	; 96
 844:	6f 2e       	mov	r6, r31
 846:	f1 e0       	ldi	r31, 0x01	; 1
 848:	7f 2e       	mov	r7, r31
 84a:	f0 2d       	mov	r31, r0
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
 84c:	d8 2c       	mov	r13, r8
 84e:	c9 2c       	mov	r12, r9
		readFROMeeprom(current_code);
		
		
		
		// While box is in locked state
		while (lock_state == 1) {
 850:	d0 c0       	rjmp	.+416    	; 0x9f2 <main+0x27e>
			
			

					
			// Wait for a key press
			while(key_queue[count_queue] == '\0');
 852:	8f 85       	ldd	r24, Y+15	; 0x0f
 854:	98 89       	ldd	r25, Y+16	; 0x10
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	8e 0d       	add	r24, r14
 85c:	9f 1d       	adc	r25, r15
 85e:	dc 01       	movw	r26, r24
 860:	8d 91       	ld	r24, X+
 862:	9c 91       	ld	r25, X
 864:	11 97       	sbiw	r26, 0x01	; 1
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	a1 f3       	breq	.-24     	; 0x852 <main+0xde>
			
			// Now that we have a key press we need to look at what was pressed.
			// Is the first key in the queue a '#'...
			if(key_queue[0] == '#'){
 86a:	f7 01       	movw	r30, r14
 86c:	80 81       	ld	r24, Z
 86e:	91 81       	ldd	r25, Z+1	; 0x01
 870:	83 32       	cpi	r24, 0x23	; 35
 872:	91 05       	cpc	r25, r1
 874:	61 f4       	brne	.+24     	; 0x88e <main+0x11a>
				clearLCD();
 876:	7b dc       	rcall	.-1802   	; 0x16e <clearLCD>
				writeLCDline(enter_code,1);
 878:	c3 01       	movw	r24, r6
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	5d dc       	rcall	.-1862   	; 0x13a <writeLCDline>
				cursorPosition(2);
 880:	82 e0       	ldi	r24, 0x02	; 2
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	31 dc       	rcall	.-1950   	; 0xe8 <cursorPosition>
				clearKeyQueue();
 886:	4d de       	rcall	.-870    	; 0x522 <clearKeyQueue>
				count_queue = 0;
 888:	98 8a       	std	Y+16, r9	; 0x10
 88a:	8f 86       	std	Y+15, r8	; 0x0f
 88c:	b2 c0       	rjmp	.+356    	; 0x9f2 <main+0x27e>
				//testfun(1);
				
			// ...or is the first key in the queue a digit?...
			} 
			else if((key_queue[0] >= '0') && (key_queue[0] <= '9') && (count_queue < 8)){
 88e:	80 81       	ld	r24, Z
 890:	91 81       	ldd	r25, Z+1	; 0x01
 892:	80 33       	cpi	r24, 0x30	; 48
 894:	91 05       	cpc	r25, r1
 896:	9c f0       	brlt	.+38     	; 0x8be <main+0x14a>
 898:	80 81       	ld	r24, Z
 89a:	91 81       	ldd	r25, Z+1	; 0x01
 89c:	8a 33       	cpi	r24, 0x3A	; 58
 89e:	91 05       	cpc	r25, r1
 8a0:	74 f4       	brge	.+28     	; 0x8be <main+0x14a>
 8a2:	8f 85       	ldd	r24, Y+15	; 0x0f
 8a4:	98 89       	ldd	r25, Y+16	; 0x10
 8a6:	88 30       	cpi	r24, 0x08	; 8
 8a8:	91 05       	cpc	r25, r1
 8aa:	4c f4       	brge	.+18     	; 0x8be <main+0x14a>
				writeLCDcharacter(key_queue[0]);
 8ac:	80 81       	ld	r24, Z
 8ae:	91 81       	ldd	r25, Z+1	; 0x01
 8b0:	3d dc       	rcall	.-1926   	; 0x12c <writeLCDcharacter>
				count_queue++;	
 8b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 8b4:	98 89       	ldd	r25, Y+16	; 0x10
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	98 8b       	std	Y+16, r25	; 0x10
 8ba:	8f 87       	std	Y+15, r24	; 0x0f
 8bc:	9a c0       	rjmp	.+308    	; 0x9f2 <main+0x27e>
				
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
 8be:	f7 01       	movw	r30, r14
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	8a 32       	cpi	r24, 0x2A	; 42
 8c6:	91 05       	cpc	r25, r1
 8c8:	09 f0       	breq	.+2      	; 0x8cc <main+0x158>
 8ca:	93 c0       	rjmp	.+294    	; 0x9f2 <main+0x27e>
				count = 0;
 8cc:	90 92 83 01 	sts	0x0183, r9
 8d0:	80 92 82 01 	sts	0x0182, r8
				code_is_correct = 1;
				popKey();
 8d4:	e3 dd       	rcall	.-1082   	; 0x49c <popKey>
				
				clearLCD();
 8d6:	4b dc       	rcall	.-1898   	; 0x16e <clearLCD>
				cursorPosition(1);
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	05 dc       	rcall	.-2038   	; 0xe8 <cursorPosition>
				for(int i = 0; i < 10; i++){
 8de:	84 01       	movw	r16, r8
					writeLCDcharacter(key_queue[i]);
 8e0:	c8 01       	movw	r24, r16
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	8e 0d       	add	r24, r14
 8e8:	9f 1d       	adc	r25, r15
 8ea:	dc 01       	movw	r26, r24
 8ec:	8d 91       	ld	r24, X+
 8ee:	9c 91       	ld	r25, X
 8f0:	1d dc       	rcall	.-1990   	; 0x12c <writeLCDcharacter>
				code_is_correct = 1;
				popKey();
				
				clearLCD();
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
 8f2:	0f 5f       	subi	r16, 0xFF	; 255
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	0a 30       	cpi	r16, 0x0A	; 10
 8f8:	11 05       	cpc	r17, r1
 8fa:	91 f7       	brne	.-28     	; 0x8e0 <main+0x16c>
					writeLCDcharacter(key_queue[i]);
				}
				cursorPosition(2);
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	f3 db       	rcall	.-2074   	; 0xe8 <cursorPosition>
 902:	82 01       	movw	r16, r4
				for(int i = 0; i < 9; i++){
					writeLCDcharacter(current_code[i]);
 904:	f8 01       	movw	r30, r16
 906:	81 91       	ld	r24, Z+
 908:	91 91       	ld	r25, Z+
 90a:	8f 01       	movw	r16, r30
 90c:	0f dc       	rcall	.-2018   	; 0x12c <writeLCDcharacter>
				cursorPosition(1);
				for(int i = 0; i < 10; i++){
					writeLCDcharacter(key_queue[i]);
				}
				cursorPosition(2);
				for(int i = 0; i < 9; i++){
 90e:	0a 15       	cp	r16, r10
 910:	1b 05       	cpc	r17, r11
 912:	c1 f7       	brne	.-16     	; 0x904 <main+0x190>
 914:	8f e3       	ldi	r24, 0x3F	; 63
 916:	9d e0       	ldi	r25, 0x0D	; 13
 918:	a3 e0       	ldi	r26, 0x03	; 3
 91a:	81 50       	subi	r24, 0x01	; 1
 91c:	90 40       	sbci	r25, 0x00	; 0
 91e:	a0 40       	sbci	r26, 0x00	; 0
 920:	e1 f7       	brne	.-8      	; 0x91a <main+0x1a6>
 922:	00 c0       	rjmp	.+0      	; 0x924 <main+0x1b0>
 924:	00 00       	nop
				}
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
 926:	40 91 82 01 	lds	r20, 0x0182
 92a:	50 91 83 01 	lds	r21, 0x0183
 92e:	ca 01       	movw	r24, r20
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	8e 0d       	add	r24, r14
 936:	9f 1d       	adc	r25, r15
 938:	dc 01       	movw	r26, r24
 93a:	8d 91       	ld	r24, X+
 93c:	9c 91       	ld	r25, X
 93e:	11 97       	sbiw	r26, 0x01	; 1
 940:	00 97       	sbiw	r24, 0x00	; 0
 942:	09 f4       	brne	.+2      	; 0x946 <main+0x1d2>
 944:	4a c0       	rjmp	.+148    	; 0x9da <main+0x266>
	int count = 0;											// counter variable used for loops
	
	 #include "timeout.c"
	 #include "timeout.h"

 int main(void) {
 946:	ca 01       	movw	r24, r20
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	fc 01       	movw	r30, r24
 94e:	e4 56       	subi	r30, 0x64	; 100
 950:	fe 4f       	sbci	r31, 0xFE	; 254
			// ...or if first key in the queue isn't a digit or '#' then
			// it must be the '*'
			} 
			else if(key_queue[0] == '*') {
				count = 0;
				code_is_correct = 1;
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	70 e0       	ldi	r23, 0x00	; 0
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
					if(key_queue[count] != current_code[count])
 956:	ca 01       	movw	r24, r20
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	8e 0d       	add	r24, r14
 95e:	9f 1d       	adc	r25, r15
 960:	dc 01       	movw	r26, r24
 962:	8d 91       	ld	r24, X+
 964:	9c 91       	ld	r25, X
 966:	11 97       	sbiw	r26, 0x01	; 1
 968:	21 91       	ld	r18, Z+
 96a:	31 91       	ld	r19, Z+
 96c:	82 17       	cp	r24, r18
 96e:	93 07       	cpc	r25, r19
 970:	11 f0       	breq	.+4      	; 0x976 <main+0x202>
						code_is_correct = 0;
 972:	6d 2d       	mov	r22, r13
 974:	7c 2d       	mov	r23, r12
					++count;				
 976:	4f 5f       	subi	r20, 0xFF	; 255
 978:	5f 4f       	sbci	r21, 0xFF	; 255
				}
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
 97a:	ca 01       	movw	r24, r20
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	8e 0d       	add	r24, r14
 982:	9f 1d       	adc	r25, r15
 984:	dc 01       	movw	r26, r24
 986:	8d 91       	ld	r24, X+
 988:	9c 91       	ld	r25, X
 98a:	11 97       	sbiw	r26, 0x01	; 1
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	19 f7       	brne	.-58     	; 0x956 <main+0x1e2>
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
					++count;				
 990:	ca 01       	movw	r24, r20
				}
				_delay_ms(1000);
									
					
				// Checks the current queue code with the correct code
				while(key_queue[count] != '\0'){
 992:	40 93 82 01 	sts	0x0182, r20
 996:	50 93 83 01 	sts	0x0183, r21
					if(key_queue[count] != current_code[count])
						code_is_correct = 0;
					++count;				
				}
				if(!code_is_correct && count > 0){
 99a:	61 15       	cp	r22, r1
 99c:	71 05       	cpc	r23, r1
 99e:	e9 f4       	brne	.+58     	; 0x9da <main+0x266>
 9a0:	18 16       	cp	r1, r24
 9a2:	19 06       	cpc	r1, r25
 9a4:	34 f5       	brge	.+76     	; 0x9f2 <main+0x27e>
					clearLCD();
 9a6:	e3 db       	rcall	.-2106   	; 0x16e <clearLCD>
					writeLCDline(incorrect_code,1);
 9a8:	c1 01       	movw	r24, r2
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	c5 db       	rcall	.-2166   	; 0x13a <writeLCDline>
 9b0:	8f e3       	ldi	r24, 0x3F	; 63
 9b2:	92 e4       	ldi	r25, 0x42	; 66
 9b4:	af e0       	ldi	r26, 0x0F	; 15
 9b6:	81 50       	subi	r24, 0x01	; 1
 9b8:	90 40       	sbci	r25, 0x00	; 0
 9ba:	a0 40       	sbci	r26, 0x00	; 0
 9bc:	e1 f7       	brne	.-8      	; 0x9b6 <main+0x242>
 9be:	00 c0       	rjmp	.+0      	; 0x9c0 <main+0x24c>
 9c0:	00 00       	nop
					_delay_ms(5000);
					clearKeyQueue();
 9c2:	af dd       	rcall	.-1186   	; 0x522 <clearKeyQueue>
					count_queue = 0;
 9c4:	98 8a       	std	Y+16, r9	; 0x10
 9c6:	8f 86       	std	Y+15, r8	; 0x0f
					clearLCD();
 9c8:	d2 db       	rcall	.-2140   	; 0x16e <clearLCD>
					writeLCDline(enter_code,1);
 9ca:	c3 01       	movw	r24, r6
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	b4 db       	rcall	.-2200   	; 0x13a <writeLCDline>
					cursorPosition(2);
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	88 db       	rcall	.-2288   	; 0xe8 <cursorPosition>
 9d8:	0c c0       	rjmp	.+24     	; 0x9f2 <main+0x27e>
				}else if(code_is_correct && count > 0){
 9da:	14 16       	cp	r1, r20
 9dc:	15 06       	cpc	r1, r21
 9de:	4c f4       	brge	.+18     	; 0x9f2 <main+0x27e>

					// Unlock the box
					lock_state = testUnlock(lock_state);
 9e0:	80 91 0e 01 	lds	r24, 0x010E
 9e4:	90 91 0f 01 	lds	r25, 0x010F
 9e8:	63 de       	rcall	.-826    	; 0x6b0 <testUnlock>
 9ea:	90 93 0f 01 	sts	0x010F, r25
 9ee:	80 93 0e 01 	sts	0x010E, r24
		readFROMeeprom(current_code);
		
		
		
		// While box is in locked state
		while (lock_state == 1) {
 9f2:	80 91 0e 01 	lds	r24, 0x010E
 9f6:	90 91 0f 01 	lds	r25, 0x010F
 9fa:	81 30       	cpi	r24, 0x01	; 1
 9fc:	91 05       	cpc	r25, r1
 9fe:	09 f4       	brne	.+2      	; 0xa02 <main+0x28e>
 a00:	28 cf       	rjmp	.-432    	; 0x852 <main+0xde>
 a02:	98 c0       	rjmp	.+304    	; 0xb34 <main+0x3c0>

		// While box is in unlocked state
			while (lock_state == 0 ) {

				// Write unlocked menu
				clearLCD();
 a04:	b4 db       	rcall	.-2200   	; 0x16e <clearLCD>
				writeLCDline(unlocked_menu_1, 1);
 a06:	80 e4       	ldi	r24, 0x40	; 64
 a08:	91 e0       	ldi	r25, 0x01	; 1
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	95 db       	rcall	.-2262   	; 0x13a <writeLCDline>
				writeLCDline(unlocked_menu_2, 2);
 a10:	80 e3       	ldi	r24, 0x30	; 48
 a12:	91 e0       	ldi	r25, 0x01	; 1
 a14:	62 e0       	ldi	r22, 0x02	; 2
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	90 db       	rcall	.-2272   	; 0x13a <writeLCDline>

				clearKeyQueue();
 a1a:	83 dd       	rcall	.-1274   	; 0x522 <clearKeyQueue>
				count_queue = 0;
 a1c:	18 8a       	std	Y+16, r1	; 0x10
 a1e:	1f 86       	std	Y+15, r1	; 0x0f

				// Wait for key press
				while(key_queue[count_queue] == '\0');
 a20:	8f 85       	ldd	r24, Y+15	; 0x0f
 a22:	98 89       	ldd	r25, Y+16	; 0x10
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	8e 0d       	add	r24, r14
 a2a:	9f 1d       	adc	r25, r15
 a2c:	dc 01       	movw	r26, r24
 a2e:	8d 91       	ld	r24, X+
 a30:	9c 91       	ld	r25, X
 a32:	11 97       	sbiw	r26, 0x01	; 1
 a34:	00 97       	sbiw	r24, 0x00	; 0
 a36:	a1 f3       	breq	.-24     	; 0xa20 <main+0x2ac>

				// Now that we have a key press we need to look at what was pressed.
				// Is the first key in the queue a '#'...
				if(key_queue[0] == '#'){
 a38:	f7 01       	movw	r30, r14
 a3a:	80 81       	ld	r24, Z
 a3c:	91 81       	ldd	r25, Z+1	; 0x01
 a3e:	83 32       	cpi	r24, 0x23	; 35
 a40:	91 05       	cpc	r25, r1
 a42:	a1 f4       	brne	.+40     	; 0xa6c <main+0x2f8>
					lock_state = testLock(lock_state);
 a44:	80 91 0e 01 	lds	r24, 0x010E
 a48:	90 91 0f 01 	lds	r25, 0x010F
 a4c:	2c de       	rcall	.-936    	; 0x6a6 <testLock>
 a4e:	90 93 0f 01 	sts	0x010F, r25
 a52:	80 93 0e 01 	sts	0x010E, r24
					clearKeyQueue();
 a56:	65 dd       	rcall	.-1334   	; 0x522 <clearKeyQueue>
					count_queue = 0;
 a58:	18 8a       	std	Y+16, r1	; 0x10
 a5a:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(enter_code,1);
 a5c:	c4 01       	movw	r24, r8
 a5e:	61 e0       	ldi	r22, 0x01	; 1
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	6b db       	rcall	.-2346   	; 0x13a <writeLCDline>
					cursorPosition(2);
 a64:	82 e0       	ldi	r24, 0x02	; 2
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	3f db       	rcall	.-2434   	; 0xe8 <cursorPosition>
 a6a:	72 c0       	rjmp	.+228    	; 0xb50 <main+0x3dc>

				// ...or is the first key in the queue a '*'?
				} else if(key_queue[0] == '*'){
 a6c:	80 81       	ld	r24, Z
 a6e:	91 81       	ldd	r25, Z+1	; 0x01
 a70:	8a 32       	cpi	r24, 0x2A	; 42
 a72:	91 05       	cpc	r25, r1
 a74:	09 f0       	breq	.+2      	; 0xa78 <main+0x304>
 a76:	6c c0       	rjmp	.+216    	; 0xb50 <main+0x3dc>
					
					clearLCD();
 a78:	7a db       	rcall	.-2316   	; 0x16e <clearLCD>
					clearKeyQueue();
 a7a:	53 dd       	rcall	.-1370   	; 0x522 <clearKeyQueue>
					count_queue = 0;
 a7c:	18 8a       	std	Y+16, r1	; 0x10
 a7e:	1f 86       	std	Y+15, r1	; 0x0f
					writeLCDline(new_code_menu, 1);
 a80:	c8 01       	movw	r24, r16
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	59 db       	rcall	.-2382   	; 0x13a <writeLCDline>
					cursorPosition(2);
 a88:	82 e0       	ldi	r24, 0x02	; 2
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	2d db       	rcall	.-2470   	; 0xe8 <cursorPosition>

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 a8e:	49 c0       	rjmp	.+146    	; 0xb22 <main+0x3ae>
						
						// Wait for key press
						while(key_queue[count_queue] == '\0');
 a90:	8f 85       	ldd	r24, Y+15	; 0x0f
 a92:	98 89       	ldd	r25, Y+16	; 0x10
 a94:	88 0f       	add	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	8e 0d       	add	r24, r14
 a9a:	9f 1d       	adc	r25, r15
 a9c:	fc 01       	movw	r30, r24
 a9e:	80 81       	ld	r24, Z
 aa0:	91 81       	ldd	r25, Z+1	; 0x01
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	a9 f3       	breq	.-22     	; 0xa90 <main+0x31c>

						// Was the latest key pressed between 0 and 9, AND has the user
						// entered less than the max number (8) of digits allowed for the
						// code.
						if(key_queue[0] >= '0' && key_queue[0] <= '9' && count_queue < 9){
 aa6:	d7 01       	movw	r26, r14
 aa8:	8d 91       	ld	r24, X+
 aaa:	9c 91       	ld	r25, X
 aac:	11 97       	sbiw	r26, 0x01	; 1
 aae:	80 33       	cpi	r24, 0x30	; 48
 ab0:	91 05       	cpc	r25, r1
 ab2:	a4 f0       	brlt	.+40     	; 0xadc <main+0x368>
 ab4:	8d 91       	ld	r24, X+
 ab6:	9c 91       	ld	r25, X
 ab8:	11 97       	sbiw	r26, 0x01	; 1
 aba:	8a 33       	cpi	r24, 0x3A	; 58
 abc:	91 05       	cpc	r25, r1
 abe:	74 f4       	brge	.+28     	; 0xadc <main+0x368>
 ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
 ac2:	98 89       	ldd	r25, Y+16	; 0x10
 ac4:	89 30       	cpi	r24, 0x09	; 9
 ac6:	91 05       	cpc	r25, r1
 ac8:	4c f4       	brge	.+18     	; 0xadc <main+0x368>
							// QUESTION: DO WE NEED TO MANUALLY SHIFT THE QUEUE??
							writeLCDcharacter(key_queue[0]);
 aca:	8d 91       	ld	r24, X+
 acc:	9c 91       	ld	r25, X
 ace:	2e db       	rcall	.-2468   	; 0x12c <writeLCDcharacter>
							++count_queue;
 ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
 ad2:	98 89       	ldd	r25, Y+16	; 0x10
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	98 8b       	std	Y+16, r25	; 0x10
 ad8:	8f 87       	std	Y+15, r24	; 0x0f
 ada:	23 c0       	rjmp	.+70     	; 0xb22 <main+0x3ae>
						
						// If the latest key pressed is '*' then lets write the new
						// code to eeprom
						} else if (key_queue[0] == '*') {
 adc:	f7 01       	movw	r30, r14
 ade:	80 81       	ld	r24, Z
 ae0:	91 81       	ldd	r25, Z+1	; 0x01
 ae2:	8a 32       	cpi	r24, 0x2A	; 42
 ae4:	91 05       	cpc	r25, r1
 ae6:	29 f4       	brne	.+10     	; 0xaf2 <main+0x37e>
							popKey();
 ae8:	d9 dc       	rcall	.-1614   	; 0x49c <popKey>
							writeTOeeprom(key_queue);
 aea:	89 89       	ldd	r24, Y+17	; 0x11
 aec:	9a 89       	ldd	r25, Y+18	; 0x12
 aee:	7f db       	rcall	.-2306   	; 0x1ee <writeTOeeprom>
							break;
 af0:	2f c0       	rjmp	.+94     	; 0xb50 <main+0x3dc>

						// Otherwise the only key left is '#', so that's what must've been
						// pressed. :)
						} else if(key_queue[0] == '#') {
 af2:	80 81       	ld	r24, Z
 af4:	91 81       	ldd	r25, Z+1	; 0x01
 af6:	83 32       	cpi	r24, 0x23	; 35
 af8:	91 05       	cpc	r25, r1
 afa:	99 f4       	brne	.+38     	; 0xb22 <main+0x3ae>
							clearLCD();
 afc:	38 db       	rcall	.-2448   	; 0x16e <clearLCD>
							writeLCDline(cancel_code_change,1);
 afe:	c6 01       	movw	r24, r12
 b00:	61 e0       	ldi	r22, 0x01	; 1
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	1a db       	rcall	.-2508   	; 0x13a <writeLCDline>
 b06:	8f e3       	ldi	r24, 0x3F	; 63
 b08:	92 e4       	ldi	r25, 0x42	; 66
 b0a:	af e0       	ldi	r26, 0x0F	; 15
 b0c:	81 50       	subi	r24, 0x01	; 1
 b0e:	90 40       	sbci	r25, 0x00	; 0
 b10:	a0 40       	sbci	r26, 0x00	; 0
 b12:	e1 f7       	brne	.-8      	; 0xb0c <main+0x398>
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <main+0x3a2>
 b16:	00 00       	nop
							_delay_ms(5000);
							clearKeyQueue();
 b18:	04 dd       	rcall	.-1528   	; 0x522 <clearKeyQueue>
							count_queue = 0;
 b1a:	18 8a       	std	Y+16, r1	; 0x10
 b1c:	1f 86       	std	Y+15, r1	; 0x0f
							clearLCD();
 b1e:	27 db       	rcall	.-2482   	; 0x16e <clearLCD>
							break;
 b20:	17 c0       	rjmp	.+46     	; 0xb50 <main+0x3dc>
					writeLCDline(new_code_menu, 1);
					cursorPosition(2);

					// Now we start entering the new code. An '*' indicates that we're
					// done entering the code.
					while(key_queue[0] != '*') {
 b22:	d7 01       	movw	r26, r14
 b24:	8d 91       	ld	r24, X+
 b26:	9c 91       	ld	r25, X
 b28:	11 97       	sbiw	r26, 0x01	; 1
 b2a:	8a 32       	cpi	r24, 0x2A	; 42
 b2c:	91 05       	cpc	r25, r1
 b2e:	09 f0       	breq	.+2      	; 0xb32 <main+0x3be>
 b30:	af cf       	rjmp	.-162    	; 0xa90 <main+0x31c>
 b32:	0e c0       	rjmp	.+28     	; 0xb50 <main+0x3dc>
				} else if(key_queue[0] == '*'){
					
					clearLCD();
					clearKeyQueue();
					count_queue = 0;
					writeLCDline(new_code_menu, 1);
 b34:	00 e2       	ldi	r16, 0x20	; 32
 b36:	11 e0       	ldi	r17, 0x01	; 1

						// Otherwise the only key left is '#', so that's what must've been
						// pressed. :)
						} else if(key_queue[0] == '#') {
							clearLCD();
							writeLCDline(cancel_code_change,1);
 b38:	0f 2e       	mov	r0, r31
 b3a:	f0 e1       	ldi	r31, 0x10	; 16
 b3c:	cf 2e       	mov	r12, r31
 b3e:	f1 e0       	ldi	r31, 0x01	; 1
 b40:	df 2e       	mov	r13, r31
 b42:	f0 2d       	mov	r31, r0
				// Is the first key in the queue a '#'...
				if(key_queue[0] == '#'){
					lock_state = testLock(lock_state);
					clearKeyQueue();
					count_queue = 0;
					writeLCDline(enter_code,1);
 b44:	0f 2e       	mov	r0, r31
 b46:	f0 e6       	ldi	r31, 0x60	; 96
 b48:	8f 2e       	mov	r8, r31
 b4a:	f1 e0       	ldi	r31, 0x01	; 1
 b4c:	9f 2e       	mov	r9, r31
 b4e:	f0 2d       	mov	r31, r0
				}
			}					
		} // End while (lock_state == 1)

		// While box is in unlocked state
			while (lock_state == 0 ) {
 b50:	80 91 0e 01 	lds	r24, 0x010E
 b54:	90 91 0f 01 	lds	r25, 0x010F
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	09 f0       	breq	.+2      	; 0xb5e <main+0x3ea>
 b5c:	64 ce       	rjmp	.-824    	; 0x826 <main+0xb2>
 b5e:	52 cf       	rjmp	.-348    	; 0xa04 <main+0x290>

00000b60 <__eerd_byte_m48a>:
 b60:	f9 99       	sbic	0x1f, 1	; 31
 b62:	fe cf       	rjmp	.-4      	; 0xb60 <__eerd_byte_m48a>
 b64:	12 bc       	out	0x22, r1	; 34
 b66:	81 bd       	out	0x21, r24	; 33
 b68:	f8 9a       	sbi	0x1f, 0	; 31
 b6a:	99 27       	eor	r25, r25
 b6c:	80 b5       	in	r24, 0x20	; 32
 b6e:	08 95       	ret

00000b70 <__eewr_byte_m48a>:
 b70:	26 2f       	mov	r18, r22

00000b72 <__eewr_r18_m48a>:
 b72:	f9 99       	sbic	0x1f, 1	; 31
 b74:	fe cf       	rjmp	.-4      	; 0xb72 <__eewr_r18_m48a>
 b76:	1f ba       	out	0x1f, r1	; 31
 b78:	12 bc       	out	0x22, r1	; 34
 b7a:	81 bd       	out	0x21, r24	; 33
 b7c:	20 bd       	out	0x20, r18	; 32
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
 b82:	fa 9a       	sbi	0x1f, 2	; 31
 b84:	f9 9a       	sbi	0x1f, 1	; 31
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	01 96       	adiw	r24, 0x01	; 1
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
