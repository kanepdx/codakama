
Lock_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  000004f8  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3f  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000249  00000000  00000000  00001947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e8  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000029e  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  000024ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e6       	ldi	r30, 0x62	; 98
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 31       	cpi	r26, 0x16	; 22
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	e4 d1       	rcall	.+968    	; 0x430 <main>
  68:	fa c1       	rjmp	.+1012   	; 0x45e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  6c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	89 ef       	ldi	r24, 0xF9	; 249
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <pulseElatch+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <pulseElatch+0xc>
  78:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  7a:	44 98       	cbi	0x08, 4	; 8
}
  7c:	08 95       	ret

0000007e <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  86:	8c 01       	movw	r16, r24
  88:	00 7f       	andi	r16, 0xF0	; 240
  8a:	10 70       	andi	r17, 0x00	; 0
  8c:	15 95       	asr	r17
  8e:	07 95       	ror	r16
  90:	15 95       	asr	r17
  92:	07 95       	ror	r16
  94:	15 95       	asr	r17
  96:	07 95       	ror	r16
  98:	15 95       	asr	r17
  9a:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  9c:	ec 01       	movw	r28, r24
  9e:	cf 70       	andi	r28, 0x0F	; 15
  a0:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	80 2b       	or	r24, r16
  ac:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  ae:	de df       	rcall	.-68     	; 0x6c <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	00 95       	com	r16
  b4:	08 23       	and	r16, r24
  b6:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8c 2b       	or	r24, r28
  bc:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  be:	d6 df       	rcall	.-84     	; 0x6c <pulseElatch>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <writeLCDdata+0x46>
  c8:	00 c0       	rjmp	.+0      	; 0xca <writeLCDdata+0x4c>
  ca:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	c0 95       	com	r28
  d0:	c8 23       	and	r28, r24
  d2:	c8 b9       	out	0x08, r28	; 8
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
  e8:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  ea:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
  ec:	58 98       	cbi	0x0b, 0	; 11
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	c5 df       	rcall	.-118    	; 0x7e <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
  f4:	c2 30       	cpi	r28, 0x02	; 2
  f6:	d1 05       	cpc	r29, r1
  f8:	59 f4       	brne	.+22     	; 0x110 <cursorPosition+0x32>
	{
		writeLCDdata(0x2);			// Sending the cursor home
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	bf df       	rcall	.-130    	; 0x7e <writeLCDdata>
 100:	c8 e2       	ldi	r28, 0x28	; 40
 102:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ba df       	rcall	.-140    	; 0x7e <writeLCDdata>
 10a:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 10c:	d9 f7       	brne	.-10     	; 0x104 <cursorPosition+0x26>
 10e:	03 c0       	rjmp	.+6      	; 0x116 <cursorPosition+0x38>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	b4 df       	rcall	.-152    	; 0x7e <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	b1 df       	rcall	.-158    	; 0x7e <writeLCDdata>
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 122:	2f e3       	ldi	r18, 0x3F	; 63
 124:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 126:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 128:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 12a:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(character);		// Sending the character on the data lines
 12c:	a8 df       	rcall	.-176    	; 0x7e <writeLCDdata>
}
 12e:	08 95       	ret

00000130 <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	d9 2f       	mov	r29, r25
 13c:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 13e:	cf df       	rcall	.-98     	; 0xde <cursorPosition>
 140:	0c 2f       	mov	r16, r28
 142:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 148:	f8 01       	movw	r30, r16
 14a:	81 91       	ld	r24, Z+
 14c:	8f 01       	movw	r16, r30
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	e8 df       	rcall	.-48     	; 0x122 <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	d1 05       	cpc	r29, r1
 158:	b9 f7       	brne	.-18     	; 0x148 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 168:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 16a:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 16c:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(0x01);				// Writing clear instruction
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	85 df       	rcall	.-246    	; 0x7e <writeLCDdata>
}
 174:	08 95       	ret

00000176 <initializeLCD>:
#define LCD_PORT_2 PORTD		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRD			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	80 7c       	andi	r24, 0xC0	; 192
 182:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 184:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 186:	58 98       	cbi	0x0b, 0	; 11
 188:	c4 e0       	ldi	r28, 0x04	; 4
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 192:	6c df       	rcall	.-296    	; 0x6c <pulseElatch>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <initializeLCD+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <initializeLCD+0x28>
 19e:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 1a8:	89 f7       	brne	.-30     	; 0x18c <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 1aa:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 1ac:	5f df       	rcall	.-322    	; 0x6c <pulseElatch>
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <initializeLCD+0x3c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <initializeLCD+0x42>
 1b8:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 1ba:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	5e df       	rcall	.-324    	; 0x7e <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	5b df       	rcall	.-330    	; 0x7e <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	58 df       	rcall	.-336    	; 0x7e <writeLCDdata>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <BacklightLCD>:
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
}

// Turns the LCD back light on or off
void BacklightLCD (int on1_off0){
	LCD_DDR_2 |= (1 << BL);		// Making pin PB1 an output
 1d4:	51 9a       	sbi	0x0a, 1	; 10
	if (on1_off0 == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	11 f4       	brne	.+4      	; 0x1e0 <BacklightLCD+0xc>
		LCD_PORT_2 &= ~(1 << BL);		// Masking or clearing pin PB1 sinking current turning on Back light
 1dc:	59 98       	cbi	0x0b, 1	; 11
 1de:	08 95       	ret
	else
		LCD_PORT_2 |= (1 << BL);		// Setting PB1 allowing no current flow to turn bakc light off
 1e0:	59 9a       	sbi	0x0b, 1	; 11
 1e2:	08 95       	ret

000001e4 <writeTOeeprom>:
#define EEPROM_DATA_ADDRESS 0x01		// Starting address of saved data

typedef unsigned short int unit8_t;			// making uni8_t mean unsigned short int

// Writes an 8 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[8]){
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
	int add_count;														// variable declaration to loop through eeprom addresses
	unit8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 1ec:	08 2f       	mov	r16, r24
 1ee:	19 2f       	mov	r17, r25
 1f0:	c1 e0       	ldi	r28, 0x01	; 1
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int add_count = 0; add_count <8; add_count++){					// looping through code to save array
	eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing byte to specified address
 1f4:	f8 01       	movw	r30, r16
 1f6:	60 81       	ld	r22, Z
 1f8:	0e 5f       	subi	r16, 0xFE	; 254
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
 1fc:	ce 01       	movw	r24, r28
 1fe:	21 d1       	rcall	.+578    	; 0x442 <__eewr_byte_m48a>
	temp_ee_address++;												// incrementing address counter
 200:	21 96       	adiw	r28, 0x01	; 1
// Writes an 8 element array pass code to EEPROM
void writeTOeeprom(int short code_to_save[8]){
	int add_count;														// variable declaration to loop through eeprom addresses
	unit8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	
	for(int add_count = 0; add_count <8; add_count++){					// looping through code to save array
 202:	c9 30       	cpi	r28, 0x09	; 9
 204:	d1 05       	cpc	r29, r1
 206:	b1 f7       	brne	.-20     	; 0x1f4 <writeTOeeprom+0x10>
	eeprom_write_byte(temp_ee_address, code_to_save[add_count]);		// writing byte to specified address
	temp_ee_address++;												// incrementing address counter
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <readFROMeeprom>:

// Reads the contents of EEPROM and store them in an 8 element array
void readFROMeeprom(int short *saved_code[8]){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
	int add_count;														// variable declaration to loop through eeprom and elements of array
	unit8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
 21a:	c8 2f       	mov	r28, r24
 21c:	d9 2f       	mov	r29, r25
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int add_count = 0; add_count <  8; add_count++){				// looping through code to save array
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
 222:	c8 01       	movw	r24, r16
 224:	06 d1       	rcall	.+524    	; 0x432 <__eerd_byte_m48a>
 226:	88 83       	st	Y, r24
 228:	19 82       	std	Y+1, r1	; 0x01
 22a:	22 96       	adiw	r28, 0x02	; 2
		temp_ee_address++;												// incrementing address counter		
 22c:	0f 5f       	subi	r16, 0xFF	; 255
 22e:	1f 4f       	sbci	r17, 0xFF	; 255
// Reads the contents of EEPROM and store them in an 8 element array
void readFROMeeprom(int short *saved_code[8]){
	int add_count;														// variable declaration to loop through eeprom and elements of array
	unit8_t temp_ee_address = EEPROM_DATA_ADDRESS;						// temp address variable to go through eeprom
	
	for(int add_count = 0; add_count <  8; add_count++){				// looping through code to save array
 230:	09 30       	cpi	r16, 0x09	; 9
 232:	11 05       	cpc	r17, r1
 234:	b1 f7       	brne	.-20     	; 0x222 <readFROMeeprom+0x10>
		saved_code[add_count] = eeprom_read_byte(temp_ee_address);		// writing byte to specified address
		temp_ee_address++;												// incrementing address counter		
	}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	81 e2       	ldi	r24, 0x21	; 33
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <getButtonState+0x2>
 246:	00 00       	nop
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 248:	18 9b       	sbis	0x03, 0	; 3
 24a:	0f c0       	rjmp	.+30     	; 0x26a <getButtonState+0x2a>
	else if(!(PINB &(1 << ROW2))) s = 1;				
 24c:	19 9b       	sbis	0x03, 1	; 3
 24e:	10 c0       	rjmp	.+32     	; 0x270 <getButtonState+0x30>
	else if(!(PINB &(1 << ROW3))) s = 1;				
 250:	1a 9b       	sbis	0x03, 2	; 3
 252:	11 c0       	rjmp	.+34     	; 0x276 <getButtonState+0x36>
	else if(!(PINB &(1 << ROW4))) s = 1;
 254:	83 b1       	in	r24, 0x03	; 3
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
 256:	99 27       	eor	r25, r25
 258:	87 fd       	sbrc	r24, 7
 25a:	90 95       	com	r25
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	88 27       	eor	r24, r24
 262:	99 0f       	add	r25, r25
 264:	88 1f       	adc	r24, r24
 266:	99 27       	eor	r25, r25
 268:	08 95       	ret
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
 27a:	08 95       	ret

0000027c <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 27c:	18 9b       	sbis	0x03, 0	; 3
 27e:	07 c0       	rjmp	.+14     	; 0x28e <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 280:	19 9b       	sbis	0x03, 1	; 3
 282:	08 c0       	rjmp	.+16     	; 0x294 <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 284:	1a 9b       	sbis	0x03, 2	; 3
 286:	09 c0       	rjmp	.+18     	; 0x29a <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 288:	1f 9b       	sbis	0x03, 7	; 3
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <getRow+0x24>
 28c:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
 2a0:	87 e0       	ldi	r24, 0x07	; 7
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
 2a4:	08 95       	ret

000002a6 <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
 2a6:	2b 9a       	sbi	0x05, 3	; 5
 2a8:	6a e0       	ldi	r22, 0x0A	; 10
 2aa:	6a 95       	dec	r22
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <getCol+0x4>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 2ae:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
 2b0:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
 2b2:	2c 9a       	sbi	0x05, 4	; 5
 2b4:	7a e0       	ldi	r23, 0x0A	; 10
 2b6:	7a 95       	dec	r23
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <getCol+0x10>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 2ba:	23 b1       	in	r18, 0x03	; 3
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	08 2e       	mov	r0, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <getCol+0x20>
 2c2:	35 95       	asr	r19
 2c4:	27 95       	ror	r18
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <getCol+0x1c>
 2ca:	20 fd       	sbrc	r18, 0
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <getCol+0x2e>
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <getCol+0x32>
		c = 2;											// then the key press was in the second column
 2d4:	22 e0       	ldi	r18, 0x02	; 2
 2d6:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 2d8:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 2da:	2d 9a       	sbi	0x05, 5	; 5
 2dc:	9a e0       	ldi	r25, 0x0A	; 10
 2de:	9a 95       	dec	r25
 2e0:	f1 f7       	brne	.-4      	; 0x2de <getCol+0x38>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 2e2:	43 b1       	in	r20, 0x03	; 3
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	ba 01       	movw	r22, r20
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <getCol+0x48>
 2ea:	75 95       	asr	r23
 2ec:	67 95       	ror	r22
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <getCol+0x44>
 2f2:	60 ff       	sbrs	r22, 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <getCol+0x54>
		c = 3;											// then the key press was in the third column
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 2fa:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 2fc:	82 2f       	mov	r24, r18
 2fe:	93 2f       	mov	r25, r19
 300:	08 95       	ret

00000302 <keyMap>:

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	51 f4       	brne	.+20     	; 0x31a <keyMap+0x18>
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	71 05       	cpc	r23, r1
 30a:	81 f1       	breq	.+96     	; 0x36c <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 30c:	62 30       	cpi	r22, 0x02	; 2
 30e:	71 05       	cpc	r23, r1
 310:	81 f1       	breq	.+96     	; 0x372 <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 312:	63 30       	cpi	r22, 0x03	; 3
 314:	71 05       	cpc	r23, r1
 316:	e9 f4       	brne	.+58     	; 0x352 <keyMap+0x50>
 318:	2f c0       	rjmp	.+94     	; 0x378 <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 05       	cpc	r25, r1
 31e:	51 f4       	brne	.+20     	; 0x334 <keyMap+0x32>
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	71 05       	cpc	r23, r1
 324:	61 f1       	breq	.+88     	; 0x37e <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 326:	62 30       	cpi	r22, 0x02	; 2
 328:	71 05       	cpc	r23, r1
 32a:	61 f1       	breq	.+88     	; 0x384 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 32c:	63 30       	cpi	r22, 0x03	; 3
 32e:	71 05       	cpc	r23, r1
 330:	e9 f5       	brne	.+122    	; 0x3ac <keyMap+0xaa>
 332:	2b c0       	rjmp	.+86     	; 0x38a <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	91 05       	cpc	r25, r1
 338:	61 f4       	brne	.+24     	; 0x352 <keyMap+0x50>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	71 05       	cpc	r23, r1
 33e:	41 f1       	breq	.+80     	; 0x390 <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 340:	62 30       	cpi	r22, 0x02	; 2
 342:	71 05       	cpc	r23, r1
 344:	41 f1       	breq	.+80     	; 0x396 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 0x39;
 346:	63 30       	cpi	r22, 0x03	; 3
 348:	71 05       	cpc	r23, r1
 34a:	81 f5       	brne	.+96     	; 0x3ac <keyMap+0xaa>
 34c:	29 e3       	ldi	r18, 0x39	; 57
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	2d c0       	rjmp	.+90     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 352:	87 30       	cpi	r24, 0x07	; 7
 354:	91 05       	cpc	r25, r1
 356:	51 f5       	brne	.+84     	; 0x3ac <keyMap+0xaa>
 358:	61 30       	cpi	r22, 0x01	; 1
 35a:	71 05       	cpc	r23, r1
 35c:	f9 f0       	breq	.+62     	; 0x39c <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 35e:	62 30       	cpi	r22, 0x02	; 2
 360:	71 05       	cpc	r23, r1
 362:	f9 f0       	breq	.+62     	; 0x3a2 <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 364:	63 30       	cpi	r22, 0x03	; 3
 366:	71 05       	cpc	r23, r1
 368:	09 f5       	brne	.+66     	; 0x3ac <keyMap+0xaa>
 36a:	1e c0       	rjmp	.+60     	; 0x3a8 <keyMap+0xa6>
}

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 36c:	21 e3       	ldi	r18, 0x31	; 49
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	1d c0       	rjmp	.+58     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 372:	22 e3       	ldi	r18, 0x32	; 50
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	1a c0       	rjmp	.+52     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 378:	23 e3       	ldi	r18, 0x33	; 51
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	17 c0       	rjmp	.+46     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 37e:	24 e3       	ldi	r18, 0x34	; 52
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	14 c0       	rjmp	.+40     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 384:	25 e3       	ldi	r18, 0x35	; 53
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	11 c0       	rjmp	.+34     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 38a:	26 e3       	ldi	r18, 0x36	; 54
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 390:	27 e3       	ldi	r18, 0x37	; 55
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	0b c0       	rjmp	.+22     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 396:	28 e3       	ldi	r18, 0x38	; 56
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 0x39;
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 39c:	2a e2       	ldi	r18, 0x2A	; 42
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 3a2:	20 e3       	ldi	r18, 0x30	; 48
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 3a8:	23 e2       	ldi	r18, 0x23	; 35
 3aa:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 3ac:	82 2f       	mov	r24, r18
 3ae:	93 2f       	mov	r25, r19
 3b0:	08 95       	ret

000003b2 <getKeyPress>:
int lock_state = 1;										// will be updated by Colin's lock/unlock functions
int key_queue[KEY_QUEUE_SIZE];							// holds user inputs
int current_key;

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 3b6:	62 df       	rcall	.-316    	; 0x27c <getRow>
 3b8:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 3ba:	75 df       	rcall	.-278    	; 0x2a6 <getCol>
 3bc:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 3be:	ce 01       	movw	r24, r28
 3c0:	a0 df       	rcall	.-192    	; 0x302 <keyMap>
	//pushKey(key); 									// push key onto queue		
	current_key = key;
 3c2:	90 93 03 01 	sts	0x0103, r25
 3c6:	80 93 02 01 	sts	0x0102, r24
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <popKey>:
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 3d0:	44 e0       	ldi	r20, 0x04	; 4
 3d2:	51 e0       	ldi	r21, 0x01	; 1
 3d4:	80 91 04 01 	lds	r24, 0x0104
 3d8:	90 91 05 01 	lds	r25, 0x0105
 3dc:	fa 01       	movw	r30, r20
	else if((r == ROW4) && (c == 2)) k = 0x30;
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
 3de:	40 5f       	subi	r20, 0xF0	; 240
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
		key_queue[i] = key_queue[i+1];
 3e2:	22 81       	ldd	r18, Z+2	; 0x02
 3e4:	33 81       	ldd	r19, Z+3	; 0x03
 3e6:	21 93       	st	Z+, r18
 3e8:	31 93       	st	Z+, r19
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 3ea:	e4 17       	cp	r30, r20
 3ec:	f5 07       	cpc	r31, r21
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
 3f0:	10 92 15 01 	sts	0x0115, r1
 3f4:	10 92 14 01 	sts	0x0114, r1
	return k;
}
 3f8:	08 95       	ret

000003fa <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 3fa:	ac 01       	movw	r20, r24
 3fc:	e4 e1       	ldi	r30, 0x14	; 20
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	cf 01       	movw	r24, r30
 402:	40 97       	sbiw	r24, 0x10	; 16
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 404:	32 91       	ld	r19, -Z
 406:	22 91       	ld	r18, -Z
 408:	33 83       	std	Z+3, r19	; 0x03
 40a:	22 83       	std	Z+2, r18	; 0x02
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 40c:	e8 17       	cp	r30, r24
 40e:	f9 07       	cpc	r31, r25
 410:	c9 f7       	brne	.-14     	; 0x404 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
 412:	50 93 05 01 	sts	0x0105, r21
 416:	40 93 04 01 	sts	0x0104, r20
}
 41a:	08 95       	ret

0000041c <clearKeyQueue>:

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
 41c:	e4 e0       	ldi	r30, 0x04	; 4
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	cf 01       	movw	r24, r30
 422:	42 96       	adiw	r24, 0x12	; 18
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
		key_queue[i] = '\0';
 424:	11 92       	st	Z+, r1
 426:	11 92       	st	Z+, r1
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 428:	e8 17       	cp	r30, r24
 42a:	f9 07       	cpc	r31, r25
 42c:	d9 f7       	brne	.-10     	; 0x424 <clearKeyQueue+0x8>
		key_queue[i] = '\0';
	}
	
 42e:	08 95       	ret

00000430 <main>:
#include "EEPROM_RW.c"			// EEPROM_RW.c - EEPROM read/write functions
#include "keypad.h"				// keypad.h function library - Function prototypes
#include "keypad.c"				// keypad.c function library - Functions only

int main(void)
{
 430:	ff cf       	rjmp	.-2      	; 0x430 <main>

00000432 <__eerd_byte_m48a>:
 432:	f9 99       	sbic	0x1f, 1	; 31
 434:	fe cf       	rjmp	.-4      	; 0x432 <__eerd_byte_m48a>
 436:	12 bc       	out	0x22, r1	; 34
 438:	81 bd       	out	0x21, r24	; 33
 43a:	f8 9a       	sbi	0x1f, 0	; 31
 43c:	99 27       	eor	r25, r25
 43e:	80 b5       	in	r24, 0x20	; 32
 440:	08 95       	ret

00000442 <__eewr_byte_m48a>:
 442:	26 2f       	mov	r18, r22

00000444 <__eewr_r18_m48a>:
 444:	f9 99       	sbic	0x1f, 1	; 31
 446:	fe cf       	rjmp	.-4      	; 0x444 <__eewr_r18_m48a>
 448:	1f ba       	out	0x1f, r1	; 31
 44a:	12 bc       	out	0x22, r1	; 34
 44c:	81 bd       	out	0x21, r24	; 33
 44e:	20 bd       	out	0x20, r18	; 32
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	fa 9a       	sbi	0x1f, 2	; 31
 456:	f9 9a       	sbi	0x1f, 1	; 31
 458:	0f be       	out	0x3f, r0	; 63
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
