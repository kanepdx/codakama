
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000035a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088d  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001da  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041b  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e5       	ldi	r30, 0x5A	; 90
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 33       	cpi	r26, 0x30	; 48
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e3       	ldi	r26, 0x30	; 48
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 33       	cpi	r26, 0x30	; 48
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	d2 d0       	rcall	.+420    	; 0x20c <main>
  68:	76 c1       	rjmp	.+748    	; 0x356 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  6c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	89 ef       	ldi	r24, 0xF9	; 249
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <pulseElatch+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <pulseElatch+0xc>
  78:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  7a:	44 98       	cbi	0x08, 4	; 8
}
  7c:	08 95       	ret

0000007e <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  86:	8c 01       	movw	r16, r24
  88:	00 7f       	andi	r16, 0xF0	; 240
  8a:	10 70       	andi	r17, 0x00	; 0
  8c:	15 95       	asr	r17
  8e:	07 95       	ror	r16
  90:	15 95       	asr	r17
  92:	07 95       	ror	r16
  94:	15 95       	asr	r17
  96:	07 95       	ror	r16
  98:	15 95       	asr	r17
  9a:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  9c:	ec 01       	movw	r28, r24
  9e:	cf 70       	andi	r28, 0x0F	; 15
  a0:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	80 2b       	or	r24, r16
  ac:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  ae:	de df       	rcall	.-68     	; 0x6c <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	00 95       	com	r16
  b4:	08 23       	and	r16, r24
  b6:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8c 2b       	or	r24, r28
  bc:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  be:	d6 df       	rcall	.-84     	; 0x6c <pulseElatch>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <writeLCDdata+0x46>
  c8:	00 c0       	rjmp	.+0      	; 0xca <writeLCDdata+0x4c>
  ca:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	c0 95       	com	r28
  d0:	c8 23       	and	r28, r24
  d2:	c8 b9       	out	0x08, r28	; 8
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <initializeLCD>:

#include <avr/io.h>
#include <util/delay.h>

// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7c       	andi	r24, 0xC0	; 192
  f2:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  f4:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
  f6:	28 98       	cbi	0x05, 0	; 5
  f8:	c4 e0       	ldi	r28, 0x04	; 4
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
		pulseElatch();
  fc:	06 e3       	ldi	r16, 0x36	; 54
  fe:	10 e0       	ldi	r17, 0x00	; 0
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 100:	88 b1       	in	r24, 0x08	; 8
 102:	83 60       	ori	r24, 0x03	; 3
 104:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 106:	f8 01       	movw	r30, r16
 108:	09 95       	icall
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <initializeLCD+0x30>
 112:	00 c0       	rjmp	.+0      	; 0x114 <initializeLCD+0x36>
 114:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 116:	88 b1       	in	r24, 0x08	; 8
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 11e:	81 f7       	brne	.-32     	; 0x100 <initializeLCD+0x22>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 120:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 122:	f8 01       	movw	r30, r16
 124:	09 95       	icall
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <initializeLCD+0x4c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <initializeLCD+0x52>
 130:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 132:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 134:	cf e3       	ldi	r28, 0x3F	; 63
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fe 01       	movw	r30, r28
 13e:	09 95       	icall
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fe 01       	movw	r30, r28
 146:	09 95       	icall
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fe 01       	movw	r30, r28
 14e:	09 95       	icall
	
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	08 95       	ret

0000015e <clearLCD>:

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 162:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 164:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 166:	28 98       	cbi	0x05, 0	; 5
	writeLCDdata(0x01);				// Writing clear instruction
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	88 df       	rcall	.-240    	; 0x7e <writeLCDdata>
}
 16e:	08 95       	ret

00000170 <writeLCDcharacter>:

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 170:	2f e3       	ldi	r18, 0x3F	; 63
 172:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 174:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 176:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 178:	28 98       	cbi	0x05, 0	; 5
	writeLCDdata(character);		// Sending the character on the data lines
 17a:	81 df       	rcall	.-254    	; 0x7e <writeLCDdata>
}
 17c:	08 95       	ret

0000017e <cursorPosition>:

// Places the cursor to the home of the specified line
void cursorPosition(int line){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	int i =1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 18c:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 18e:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 190:	28 98       	cbi	0x05, 0	; 5
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
 192:	0f e3       	ldi	r16, 0x3F	; 63
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	f8 01       	movw	r30, r16
 19c:	09 95       	icall
	
	if (line == 2)					// Move cursor to line 2
 19e:	c2 30       	cpi	r28, 0x02	; 2
 1a0:	d1 05       	cpc	r29, r1
 1a2:	69 f4       	brne	.+26     	; 0x1be <cursorPosition+0x40>
	{
		writeLCDdata(0x2);			// Sending the cursor home
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	f8 01       	movw	r30, r16
 1aa:	09 95       	icall
 1ac:	c8 e2       	ldi	r28, 0x28	; 40
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	f8 01       	movw	r30, r16
 1b6:	09 95       	icall
 1b8:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <cursorPosition+0x32>
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <cursorPosition+0x48>
		writeLCDdata(0x14);
	}
}
else
writeLCDdata(0x2);			// Sending cursor home
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	f8 01       	movw	r30, r16
 1c4:	09 95       	icall

writeLCDdata(0x0F);				// Turning on the cursor ON
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	f8 01       	movw	r30, r16
 1cc:	09 95       	icall
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <writeLCDline>:

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	c8 2f       	mov	r28, r24
 1e2:	d9 2f       	mov	r29, r25
 1e4:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 1e6:	cb df       	rcall	.-106    	; 0x17e <cursorPosition>
 1e8:	0c 2f       	mov	r16, r28
 1ea:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 1f0:	f8 01       	movw	r30, r16
 1f2:	81 91       	ld	r24, Z+
 1f4:	8f 01       	movw	r16, r30
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	bb df       	rcall	.-138    	; 0x170 <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	c0 31       	cpi	r28, 0x10	; 16
 1fe:	d1 05       	cpc	r29, r1
 200:	b9 f7       	brne	.-18     	; 0x1f0 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <main>:
#include <avr/io.h>				// AVR library
#include <util/delay.h>			// Delay library
#include "LCD.h"				// Our LCD.h library 

int main(void)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	e0 97       	sbiw	r28, 0x30	; 48
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
	/* Defining counter variables*/
   int w = 0;
   int i = 0;
   
   /* Defining 16 element arrays to Display */
	char line1[16] = {'C','O','D','A',' ','K','A','M','A',' ',' ',' ',' ',' ',' ',' '};
 224:	de 01       	movw	r26, r28
 226:	11 96       	adiw	r26, 0x01	; 1
 228:	e0 e0       	ldi	r30, 0x00	; 0
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	81 50       	subi	r24, 0x01	; 1
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
	char line2[16] = {'R','O','C','K','S','!','!','!',' ',' ',' ',' ',' ',' ',' ',' ',' '};
 236:	de 01       	movw	r26, r28
 238:	51 96       	adiw	r26, 0x11	; 17
 23a:	e0 e1       	ldi	r30, 0x10	; 16
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	81 50       	subi	r24, 0x01	; 1
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x34>
	char line1a[16] = {'E','N','T','E','R',' ','C','O','D','E',' ',' ',' ',' ',' ',' '};
 248:	de 01       	movw	r26, r28
 24a:	91 96       	adiw	r26, 0x21	; 33
 24c:	e0 e2       	ldi	r30, 0x20	; 32
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	81 50       	subi	r24, 0x01	; 1
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x46>
				
	initializeLCD();				// Initializing LCD in 4-bit mode
 25a:	41 df       	rcall	.-382    	; 0xde <initializeLCD>
	
	clearLCD();						// Clearing the LCD
 25c:	80 df       	rcall	.-256    	; 0x15e <clearLCD>
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	96 e8       	ldi	r25, 0x86	; 134
 262:	a1 e0       	ldi	r26, 0x01	; 1
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	a0 40       	sbci	r26, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x58>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x62>
 26e:	00 00       	nop
	_delay_ms(500);				
	writeLCDline(line1, 1);			// Writing array line1 to LCD in the 1st row
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	af df       	rcall	.-162    	; 0x1d8 <writeLCDline>
 27a:	8f e9       	ldi	r24, 0x9F	; 159
 27c:	96 e8       	ldi	r25, 0x86	; 134
 27e:	a1 e0       	ldi	r26, 0x01	; 1
 280:	81 50       	subi	r24, 0x01	; 1
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	a0 40       	sbci	r26, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x74>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x7e>
 28a:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line2, 2);			// Writing array line2 to LCD in the 2nd row
 28c:	ce 01       	movw	r24, r28
 28e:	41 96       	adiw	r24, 0x11	; 17
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	a1 df       	rcall	.-190    	; 0x1d8 <writeLCDline>
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	92 e4       	ldi	r25, 0x42	; 66
 29a:	af e0       	ldi	r26, 0x0F	; 15
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	a0 40       	sbci	r26, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x90>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x9a>
 2a6:	00 00       	nop
	_delay_ms(5000);
	
	clearLCD();						// Clearing the LCD
 2a8:	5a df       	rcall	.-332    	; 0x15e <clearLCD>
	writeLCDline(line1a,1);			// Writing array line1a to LCD in the 1st row
 2aa:	ce 01       	movw	r24, r28
 2ac:	81 96       	adiw	r24, 0x21	; 33
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	92 df       	rcall	.-220    	; 0x1d8 <writeLCDline>
	cursorPosition(2);				// Placing the cursor to the first position of the 2nd row
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	62 df       	rcall	.-316    	; 0x17e <cursorPosition>
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	9d e0       	ldi	r25, 0x0D	; 13
 2be:	a3 e0       	ldi	r26, 0x03	; 3
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	a0 40       	sbci	r26, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0xb4>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0xbe>
 2ca:	00 00       	nop
 2cc:	00 e3       	ldi	r16, 0x30	; 48
 2ce:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(1000);
	for(w=0;w<10;w++){				// Looping through integers to display
		writeLCDcharacter(w+0x30);	// Writing specified integer to display in HEX
 2d0:	c8 01       	movw	r24, r16
 2d2:	4e df       	rcall	.-356    	; 0x170 <writeLCDcharacter>
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9d e0       	ldi	r25, 0x0D	; 13
 2d8:	a3 e0       	ldi	r26, 0x03	; 3
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	a0 40       	sbci	r26, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0xce>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0xd8>
 2e4:	00 00       	nop
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
	
	clearLCD();						// Clearing the LCD
	writeLCDline(line1a,1);			// Writing array line1a to LCD in the 1st row
	cursorPosition(2);				// Placing the cursor to the first position of the 2nd row
	_delay_ms(1000);
	for(w=0;w<10;w++){				// Looping through integers to display
 2ea:	0a 33       	cpi	r16, 0x3A	; 58
 2ec:	11 05       	cpc	r17, r1
 2ee:	81 f7       	brne	.-32     	; 0x2d0 <main+0xc4>
 2f0:	8f e3       	ldi	r24, 0x3F	; 63
 2f2:	92 e4       	ldi	r25, 0x42	; 66
 2f4:	af e0       	ldi	r26, 0x0F	; 15
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	a0 40       	sbci	r26, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0xea>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <__stack+0x1>
 300:	00 00       	nop
		writeLCDcharacter(w+0x30);	// Writing specified integer to display in HEX
		_delay_ms(1000);
	}
	
	_delay_ms(5000);
	clearLCD();						// Clearing the LCD
 302:	2d df       	rcall	.-422    	; 0x15e <clearLCD>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	96 e8       	ldi	r25, 0x86	; 134
 308:	a1 e0       	ldi	r26, 0x01	; 1
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	a0 40       	sbci	r26, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <__stack+0xb>
 312:	00 c0       	rjmp	.+0      	; 0x314 <__stack+0x15>
 314:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line1, 1);			// Writing array line1 to LCD in the 1st row
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	5c df       	rcall	.-328    	; 0x1d8 <writeLCDline>
 320:	8f e9       	ldi	r24, 0x9F	; 159
 322:	96 e8       	ldi	r25, 0x86	; 134
 324:	a1 e0       	ldi	r26, 0x01	; 1
 326:	81 50       	subi	r24, 0x01	; 1
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	a0 40       	sbci	r26, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <__stack+0x27>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <__stack+0x31>
 330:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line2, 2);			// Writing array line2 to LCD in the 2nd row
 332:	ce 01       	movw	r24, r28
 334:	41 96       	adiw	r24, 0x11	; 17
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	4e df       	rcall	.-356    	; 0x1d8 <writeLCDline>
	
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	e0 96       	adiw	r28, 0x30	; 48
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
