
testing on micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800118  00800118  00000682  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c0  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021b  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ed  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  00002199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	25 c0       	rjmp	.+74     	; 0x4c <__ctors_end>
   2:	3f c0       	rjmp	.+126    	; 0x82 <__bad_interrupt>
   4:	3e c0       	rjmp	.+124    	; 0x82 <__bad_interrupt>
   6:	4f c2       	rjmp	.+1182   	; 0x4a6 <__vector_3>
   8:	3c c0       	rjmp	.+120    	; 0x82 <__bad_interrupt>
   a:	3b c0       	rjmp	.+118    	; 0x82 <__bad_interrupt>
   c:	3a c0       	rjmp	.+116    	; 0x82 <__bad_interrupt>
   e:	39 c0       	rjmp	.+114    	; 0x82 <__bad_interrupt>
  10:	38 c0       	rjmp	.+112    	; 0x82 <__bad_interrupt>
  12:	37 c0       	rjmp	.+110    	; 0x82 <__bad_interrupt>
  14:	36 c0       	rjmp	.+108    	; 0x82 <__bad_interrupt>
  16:	35 c0       	rjmp	.+106    	; 0x82 <__bad_interrupt>
  18:	34 c0       	rjmp	.+104    	; 0x82 <__bad_interrupt>
  1a:	33 c0       	rjmp	.+102    	; 0x82 <__bad_interrupt>
  1c:	32 c0       	rjmp	.+100    	; 0x82 <__bad_interrupt>
  1e:	31 c0       	rjmp	.+98     	; 0x82 <__bad_interrupt>
  20:	30 c0       	rjmp	.+96     	; 0x82 <__bad_interrupt>
  22:	2f c0       	rjmp	.+94     	; 0x82 <__bad_interrupt>
  24:	2e c0       	rjmp	.+92     	; 0x82 <__bad_interrupt>
  26:	2d c0       	rjmp	.+90     	; 0x82 <__bad_interrupt>
  28:	2c c0       	rjmp	.+88     	; 0x82 <__bad_interrupt>
  2a:	2b c0       	rjmp	.+86     	; 0x82 <__bad_interrupt>
  2c:	2a c0       	rjmp	.+84     	; 0x82 <__bad_interrupt>
  2e:	29 c0       	rjmp	.+82     	; 0x82 <__bad_interrupt>
  30:	28 c0       	rjmp	.+80     	; 0x82 <__bad_interrupt>
  32:	27 c0       	rjmp	.+78     	; 0x82 <__bad_interrupt>
  34:	67 c1       	rjmp	.+718    	; 0x304 <__stack+0x5>
  36:	7e c1       	rjmp	.+764    	; 0x334 <__stack+0x35>
  38:	88 c1       	rjmp	.+784    	; 0x34a <__stack+0x4b>
  3a:	92 c1       	rjmp	.+804    	; 0x360 <__stack+0x61>
  3c:	9c c1       	rjmp	.+824    	; 0x376 <__stack+0x77>
  3e:	a6 c1       	rjmp	.+844    	; 0x38c <__stack+0x8d>
  40:	b0 c1       	rjmp	.+864    	; 0x3a2 <__stack+0xa3>
  42:	ba c1       	rjmp	.+884    	; 0x3b8 <__stack+0xb9>
  44:	c4 c1       	rjmp	.+904    	; 0x3ce <__stack+0xcf>
  46:	ce c1       	rjmp	.+924    	; 0x3e4 <__stack+0xe5>
  48:	d8 c1       	rjmp	.+944    	; 0x3fa <__stack+0xfb>
  4a:	e2 c1       	rjmp	.+964    	; 0x410 <__stack+0x111>

0000004c <__ctors_end>:
  4c:	11 24       	eor	r1, r1
  4e:	1f be       	out	0x3f, r1	; 63
  50:	cf ef       	ldi	r28, 0xFF	; 255
  52:	d2 e0       	ldi	r29, 0x02	; 2
  54:	de bf       	out	0x3e, r29	; 62
  56:	cd bf       	out	0x3d, r28	; 61

00000058 <__do_copy_data>:
  58:	11 e0       	ldi	r17, 0x01	; 1
  5a:	a0 e0       	ldi	r26, 0x00	; 0
  5c:	b1 e0       	ldi	r27, 0x01	; 1
  5e:	e6 ed       	ldi	r30, 0xD6	; 214
  60:	f5 e0       	ldi	r31, 0x05	; 5
  62:	02 c0       	rjmp	.+4      	; 0x68 <__do_copy_data+0x10>
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a8 31       	cpi	r26, 0x18	; 24
  6a:	b1 07       	cpc	r27, r17
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0xc>

0000006e <__do_clear_bss>:
  6e:	11 e0       	ldi	r17, 0x01	; 1
  70:	a8 e1       	ldi	r26, 0x18	; 24
  72:	b1 e0       	ldi	r27, 0x01	; 1
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	65 d2       	rcall	.+1226   	; 0x54a <main>
  80:	a8 c2       	rjmp	.+1360   	; 0x5d2 <_exit>

00000082 <__bad_interrupt>:
  82:	be cf       	rjmp	.-132    	; 0x0 <__vectors>

00000084 <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <getButtonState+0x2>
  8a:	00 00       	nop
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(10);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  8c:	18 9b       	sbis	0x03, 0	; 3
  8e:	0f c0       	rjmp	.+30     	; 0xae <getButtonState+0x2a>
	else if(!(PINB &(1 << ROW2))) s = 1;				
  90:	19 9b       	sbis	0x03, 1	; 3
  92:	10 c0       	rjmp	.+32     	; 0xb4 <getButtonState+0x30>
	else if(!(PINB &(1 << ROW3))) s = 1;				
  94:	1a 9b       	sbis	0x03, 2	; 3
  96:	11 c0       	rjmp	.+34     	; 0xba <getButtonState+0x36>
	else if(!(PINB &(1 << ROW4))) s = 1;
  98:	83 b1       	in	r24, 0x03	; 3
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(10);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  9a:	99 27       	eor	r25, r25
  9c:	87 fd       	sbrc	r24, 7
  9e:	90 95       	com	r25
  a0:	80 95       	com	r24
  a2:	90 95       	com	r25
  a4:	88 27       	eor	r24, r24
  a6:	99 0f       	add	r25, r25
  a8:	88 1f       	adc	r24, r24
  aa:	99 27       	eor	r25, r25
  ac:	08 95       	ret
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
  be:	08 95       	ret

000000c0 <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  c0:	18 9b       	sbis	0x03, 0	; 3
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  c4:	19 9b       	sbis	0x03, 1	; 3
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  c8:	1a 9b       	sbis	0x03, 2	; 3
  ca:	09 c0       	rjmp	.+18     	; 0xde <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  cc:	1f 9b       	sbis	0x03, 7	; 3
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <getRow+0x24>
  d0:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
  e8:	08 95       	ret

000000ea <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
  ea:	2b 9a       	sbi	0x05, 3	; 5
  ec:	00 c0       	rjmp	.+0      	; 0xee <getCol+0x4>
  ee:	00 00       	nop
	_delay_us(3);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  f0:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
  f2:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
  f4:	2c 9a       	sbi	0x05, 4	; 5
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <getCol+0xe>
  f8:	00 00       	nop
	_delay_us(3);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  fa:	23 b1       	in	r18, 0x03	; 3
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <getCol+0x1c>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <getCol+0x18>
 10a:	20 fd       	sbrc	r18, 0
 10c:	03 c0       	rjmp	.+6      	; 0x114 <getCol+0x2a>
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <getCol+0x2e>
		c = 2;											// then the key press was in the second column
 114:	22 e0       	ldi	r18, 0x02	; 2
 116:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 118:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 11a:	2d 9a       	sbi	0x05, 5	; 5
 11c:	00 c0       	rjmp	.+0      	; 0x11e <getCol+0x34>
 11e:	00 00       	nop
	_delay_us(3);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 120:	43 b1       	in	r20, 0x03	; 3
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	ba 01       	movw	r22, r20
 126:	02 c0       	rjmp	.+4      	; 0x12c <getCol+0x42>
 128:	75 95       	asr	r23
 12a:	67 95       	ror	r22
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <getCol+0x3e>
 130:	60 ff       	sbrs	r22, 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <getCol+0x4e>
		c = 3;											// then the key press was in the third column
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 138:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 13a:	82 2f       	mov	r24, r18
 13c:	93 2f       	mov	r25, r19
 13e:	08 95       	ret

00000140 <keyMap>:

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 1;
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	51 f4       	brne	.+20     	; 0x158 <keyMap+0x18>
 144:	61 30       	cpi	r22, 0x01	; 1
 146:	71 05       	cpc	r23, r1
 148:	81 f1       	breq	.+96     	; 0x1aa <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 2;
 14a:	62 30       	cpi	r22, 0x02	; 2
 14c:	71 05       	cpc	r23, r1
 14e:	81 f1       	breq	.+96     	; 0x1b0 <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 3;
 150:	63 30       	cpi	r22, 0x03	; 3
 152:	71 05       	cpc	r23, r1
 154:	e9 f4       	brne	.+58     	; 0x190 <keyMap+0x50>
 156:	2f c0       	rjmp	.+94     	; 0x1b6 <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 4;
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	51 f4       	brne	.+20     	; 0x172 <keyMap+0x32>
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	71 05       	cpc	r23, r1
 162:	61 f1       	breq	.+88     	; 0x1bc <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 5;
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	71 05       	cpc	r23, r1
 168:	61 f1       	breq	.+88     	; 0x1c2 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 6;
 16a:	63 30       	cpi	r22, 0x03	; 3
 16c:	71 05       	cpc	r23, r1
 16e:	e9 f5       	brne	.+122    	; 0x1ea <keyMap+0xaa>
 170:	2b c0       	rjmp	.+86     	; 0x1c8 <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 7;
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	61 f4       	brne	.+24     	; 0x190 <keyMap+0x50>
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	71 05       	cpc	r23, r1
 17c:	41 f1       	breq	.+80     	; 0x1ce <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 8;
 17e:	62 30       	cpi	r22, 0x02	; 2
 180:	71 05       	cpc	r23, r1
 182:	41 f1       	breq	.+80     	; 0x1d4 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 9;
 184:	63 30       	cpi	r22, 0x03	; 3
 186:	71 05       	cpc	r23, r1
 188:	81 f5       	brne	.+96     	; 0x1ea <keyMap+0xaa>
 18a:	29 e0       	ldi	r18, 0x09	; 9
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	2d c0       	rjmp	.+90     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = STAR;
 190:	87 30       	cpi	r24, 0x07	; 7
 192:	91 05       	cpc	r25, r1
 194:	51 f5       	brne	.+84     	; 0x1ea <keyMap+0xaa>
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	71 05       	cpc	r23, r1
 19a:	f9 f0       	breq	.+62     	; 0x1da <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 11;
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	f9 f0       	breq	.+62     	; 0x1e0 <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = POUND;
 1a2:	63 30       	cpi	r22, 0x03	; 3
 1a4:	71 05       	cpc	r23, r1
 1a6:	09 f5       	brne	.+66     	; 0x1ea <keyMap+0xaa>
 1a8:	1e c0       	rjmp	.+60     	; 0x1e6 <keyMap+0xa6>
}

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 1;
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	1d c0       	rjmp	.+58     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 2;
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	1a c0       	rjmp	.+52     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 3;
 1b6:	23 e0       	ldi	r18, 0x03	; 3
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	17 c0       	rjmp	.+46     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 4;
 1bc:	24 e0       	ldi	r18, 0x04	; 4
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 5;
 1c2:	25 e0       	ldi	r18, 0x05	; 5
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 6;
 1c8:	26 e0       	ldi	r18, 0x06	; 6
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 7;
 1ce:	27 e0       	ldi	r18, 0x07	; 7
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 8;
 1d4:	28 e0       	ldi	r18, 0x08	; 8
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 9;
	else if((r == ROW4) && (c == 1)) k = STAR;
 1da:	2a e0       	ldi	r18, 0x0A	; 10
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 11;
 1e0:	2b e0       	ldi	r18, 0x0B	; 11
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = POUND;
 1e6:	2c e0       	ldi	r18, 0x0C	; 12
 1e8:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 1ea:	82 2f       	mov	r24, r18
 1ec:	93 2f       	mov	r25, r19
 1ee:	08 95       	ret

000001f0 <popKey>:

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 1f0:	48 e1       	ldi	r20, 0x18	; 24
 1f2:	51 e0       	ldi	r21, 0x01	; 1
 1f4:	80 91 18 01 	lds	r24, 0x0118
 1f8:	90 91 19 01 	lds	r25, 0x0119
 1fc:	fa 01       	movw	r30, r20
	else if((r == ROW4) && (c == 2)) k = 11;
	else if((r == ROW4) && (c == 3)) k = POUND;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
 1fe:	40 5f       	subi	r20, 0xF0	; 240
 200:	5f 4f       	sbci	r21, 0xFF	; 255
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
		key_queue[i] = key_queue[i+1];
 202:	22 81       	ldd	r18, Z+2	; 0x02
 204:	33 81       	ldd	r19, Z+3	; 0x03
 206:	21 93       	st	Z+, r18
 208:	31 93       	st	Z+, r19
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 20a:	e4 17       	cp	r30, r20
 20c:	f5 07       	cpc	r31, r21
 20e:	c9 f7       	brne	.-14     	; 0x202 <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	return k;
}
 210:	08 95       	ret

00000212 <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 212:	ac 01       	movw	r20, r24
 214:	e8 e2       	ldi	r30, 0x28	; 40
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	cf 01       	movw	r24, r30
 21a:	40 97       	sbiw	r24, 0x10	; 16
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 21c:	32 91       	ld	r19, -Z
 21e:	22 91       	ld	r18, -Z
 220:	33 83       	std	Z+3, r19	; 0x03
 222:	22 83       	std	Z+2, r18	; 0x02
	}	
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 224:	e8 17       	cp	r30, r24
 226:	f9 07       	cpc	r31, r25
 228:	c9 f7       	brne	.-14     	; 0x21c <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
 22a:	50 93 19 01 	sts	0x0119, r21
 22e:	40 93 18 01 	sts	0x0118, r20
}
 232:	08 95       	ret

00000234 <getKeyPress>:
// globals to be moved later
int lock_state = 1;										// will be updated by Colin's lock/unlock functions
int key_queue[KEY_QUEUE_SIZE];							// holds user inputs

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 238:	43 df       	rcall	.-378    	; 0xc0 <getRow>
 23a:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 23c:	56 df       	rcall	.-340    	; 0xea <getCol>
 23e:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 240:	ce 01       	movw	r24, r28
 242:	7e df       	rcall	.-260    	; 0x140 <keyMap>
	pushKey(key); 									// push key onto queue		
 244:	e6 df       	rcall	.-52     	; 0x212 <pushKey>
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <clearKeyQueue>:
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
 24c:	e8 e1       	ldi	r30, 0x18	; 24
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	cf 01       	movw	r24, r30
 252:	42 96       	adiw	r24, 0x12	; 18
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
		key_queue[i] = 0;
 254:	11 92       	st	Z+, r1
 256:	11 92       	st	Z+, r1
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 258:	e8 17       	cp	r30, r24
 25a:	f9 07       	cpc	r31, r25
 25c:	d9 f7       	brne	.-10     	; 0x254 <clearKeyQueue+0x8>
		key_queue[i] = 0;
	}
 25e:	08 95       	ret

00000260 <initRows>:
    {
        _delay_us(5); 
    }
}

void initRows(int r[]){									// sets keypad rows as inputs
 260:	e8 2f       	mov	r30, r24
 262:	f9 2f       	mov	r31, r25
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < NUM_ROWS; i++){
		DDRB &= ~(1 << r[i]);
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	64 b1       	in	r22, 0x04	; 4
 26e:	20 81       	ld	r18, Z
 270:	32 96       	adiw	r30, 0x02	; 2
 272:	da 01       	movw	r26, r20
 274:	02 c0       	rjmp	.+4      	; 0x27a <initRows+0x1a>
 276:	aa 0f       	add	r26, r26
 278:	bb 1f       	adc	r27, r27
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <initRows+0x16>
 27e:	9d 01       	movw	r18, r26
 280:	20 95       	com	r18
 282:	26 23       	and	r18, r22
 284:	24 b9       	out	0x04, r18	; 4
 286:	01 97       	sbiw	r24, 0x01	; 1
        _delay_us(5); 
    }
}

void initRows(int r[]){									// sets keypad rows as inputs
	for(int i = 0; i < NUM_ROWS; i++){
 288:	89 f7       	brne	.-30     	; 0x26c <initRows+0xc>
		DDRB &= ~(1 << r[i]);
	}
}
 28a:	08 95       	ret

0000028c <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 28c:	e8 2f       	mov	r30, r24
 28e:	f9 2f       	mov	r31, r25
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	65 b1       	in	r22, 0x05	; 5
	for(int i = 0; i < NUM_ROWS; i++){
		DDRB &= ~(1 << r[i]);
	}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 29a:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 29c:	ca 01       	movw	r24, r20
 29e:	00 80       	ld	r0, Z
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <initColumns+0x1a>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <initColumns+0x16>
 2aa:	80 95       	com	r24
 2ac:	86 23       	and	r24, r22
 2ae:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 2b0:	64 b1       	in	r22, 0x04	; 4
 2b2:	32 96       	adiw	r30, 0x02	; 2
 2b4:	ca 01       	movw	r24, r20
 2b6:	0c 90       	ld	r0, X
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <initColumns+0x32>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <initColumns+0x2e>
 2c2:	86 2b       	or	r24, r22
 2c4:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << r[i]);
	}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	23 30       	cpi	r18, 0x03	; 3
 2cc:	31 05       	cpc	r19, r1
 2ce:	21 f7       	brne	.-56     	; 0x298 <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}
 2d0:	08 95       	ret

000002d2 <drawKey>:

void drawKey(void){
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	28 97       	sbiw	r28, 0x08	; 8
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	int output[NUM_LEDS];
	switch(key_queue[0]){								// determine LED output values
 2ec:	e0 91 18 01 	lds	r30, 0x0118
 2f0:	f0 91 19 01 	lds	r31, 0x0119
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	ec 30       	cpi	r30, 0x0C	; 12
 2f8:	f1 05       	cpc	r31, r1
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <drawKey+0x2c>
 2fc:	94 c0       	rjmp	.+296    	; 0x426 <__stack+0x127>
 2fe:	e6 5e       	subi	r30, 0xE6	; 230
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	09 94       	ijmp
		case 1:		output[0] = 0;						// a 1 indicates that the led is on, 0 off.
 304:	1a 82       	std	Y+2, r1	; 0x02
 306:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;						// element 0 is most significant bit
 308:	1c 82       	std	Y+4, r1	; 0x04
 30a:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 30c:	1e 82       	std	Y+6, r1	; 0x06
 30e:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	98 87       	std	Y+8, r25	; 0x08
 316:	8f 83       	std	Y+7, r24	; 0x07
					break;
 318:	fe 01       	movw	r30, r28
 31a:	31 96       	adiw	r30, 0x01	; 1
 31c:	0f 2e       	mov	r0, r31
 31e:	fe e0       	ldi	r31, 0x0E	; 14
 320:	ef 2e       	mov	r14, r31
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	ff 2e       	mov	r15, r31
 326:	f0 2d       	mov	r31, r0
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}

void drawKey(void){
 328:	ae 01       	movw	r20, r28
 32a:	47 5f       	subi	r20, 0xF7	; 247
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
		if(output[i] == 0){
			// set output high (off)
			PORTD |= (1 << display[i]);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	82 c0       	rjmp	.+260    	; 0x438 <__stack+0x139>
		case 1:		output[0] = 0;						// a 1 indicates that the led is on, 0 off.
					output[1] = 0;						// element 0 is most significant bit
					output[2] = 0;
					output[3] = 1;
					break;
		case 2:		output[0] = 0;						
 334:	1a 82       	std	Y+2, r1	; 0x02
 336:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 338:	1c 82       	std	Y+4, r1	; 0x04
 33a:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9e 83       	std	Y+6, r25	; 0x06
 342:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 344:	18 86       	std	Y+8, r1	; 0x08
 346:	1f 82       	std	Y+7, r1	; 0x07
					break;
 348:	e7 cf       	rjmp	.-50     	; 0x318 <__stack+0x19>
		case 3:		output[0] = 0;
 34a:	1a 82       	std	Y+2, r1	; 0x02
 34c:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 34e:	1c 82       	std	Y+4, r1	; 0x04
 350:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9e 83       	std	Y+6, r25	; 0x06
 358:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 35a:	98 87       	std	Y+8, r25	; 0x08
 35c:	8f 83       	std	Y+7, r24	; 0x07
					break;
 35e:	dc cf       	rjmp	.-72     	; 0x318 <__stack+0x19>
		case 4:		output[0] = 0;
 360:	1a 82       	std	Y+2, r1	; 0x02
 362:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9c 83       	std	Y+4, r25	; 0x04
 36a:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 36c:	1e 82       	std	Y+6, r1	; 0x06
 36e:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 370:	18 86       	std	Y+8, r1	; 0x08
 372:	1f 82       	std	Y+7, r1	; 0x07
					break;
 374:	d1 cf       	rjmp	.-94     	; 0x318 <__stack+0x19>
		case 5:		output[0] = 0;
 376:	1a 82       	std	Y+2, r1	; 0x02
 378:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	9c 83       	std	Y+4, r25	; 0x04
 380:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 382:	1e 82       	std	Y+6, r1	; 0x06
 384:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 386:	98 87       	std	Y+8, r25	; 0x08
 388:	8f 83       	std	Y+7, r24	; 0x07
					break;
 38a:	c6 cf       	rjmp	.-116    	; 0x318 <__stack+0x19>
		case 6:		output[0] = 0;
 38c:	1a 82       	std	Y+2, r1	; 0x02
 38e:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	9c 83       	std	Y+4, r25	; 0x04
 396:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 1;
 398:	9e 83       	std	Y+6, r25	; 0x06
 39a:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 39c:	18 86       	std	Y+8, r1	; 0x08
 39e:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3a0:	bb cf       	rjmp	.-138    	; 0x318 <__stack+0x19>
		case 7:		output[0] = 0;
 3a2:	1a 82       	std	Y+2, r1	; 0x02
 3a4:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	9c 83       	std	Y+4, r25	; 0x04
 3ac:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 1;
 3ae:	9e 83       	std	Y+6, r25	; 0x06
 3b0:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 3b2:	98 87       	std	Y+8, r25	; 0x08
 3b4:	8f 83       	std	Y+7, r24	; 0x07
					break;
 3b6:	b0 cf       	rjmp	.-160    	; 0x318 <__stack+0x19>
		case 8:		output[0] = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	9a 83       	std	Y+2, r25	; 0x02
 3be:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3c0:	1c 82       	std	Y+4, r1	; 0x04
 3c2:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 3c4:	1e 82       	std	Y+6, r1	; 0x06
 3c6:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 3c8:	18 86       	std	Y+8, r1	; 0x08
 3ca:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3cc:	a5 cf       	rjmp	.-182    	; 0x318 <__stack+0x19>
		case 9:		output[0] = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	9a 83       	std	Y+2, r25	; 0x02
 3d4:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3d6:	1c 82       	std	Y+4, r1	; 0x04
 3d8:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 3da:	1e 82       	std	Y+6, r1	; 0x06
 3dc:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 3de:	98 87       	std	Y+8, r25	; 0x08
 3e0:	8f 83       	std	Y+7, r24	; 0x07
					break;
 3e2:	9a cf       	rjmp	.-204    	; 0x318 <__stack+0x19>
		case STAR:	output[0] = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3ec:	1c 82       	std	Y+4, r1	; 0x04
 3ee:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 3f0:	9e 83       	std	Y+6, r25	; 0x06
 3f2:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 3f4:	18 86       	std	Y+8, r1	; 0x08
 3f6:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3f8:	8f cf       	rjmp	.-226    	; 0x318 <__stack+0x19>
		case 11:	output[0] = 1;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	9a 83       	std	Y+2, r25	; 0x02
 400:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 402:	1c 82       	std	Y+4, r1	; 0x04
 404:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 406:	9e 83       	std	Y+6, r25	; 0x06
 408:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 40a:	98 87       	std	Y+8, r25	; 0x08
 40c:	8f 83       	std	Y+7, r24	; 0x07
					break;
 40e:	84 cf       	rjmp	.-248    	; 0x318 <__stack+0x19>
		case POUND:	output[0] = 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	9a 83       	std	Y+2, r25	; 0x02
 416:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 1;
 418:	9c 83       	std	Y+4, r25	; 0x04
 41a:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 41c:	1e 82       	std	Y+6, r1	; 0x06
 41e:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 420:	18 86       	std	Y+8, r1	; 0x08
 422:	1f 82       	std	Y+7, r1	; 0x07
					break;
 424:	79 cf       	rjmp	.-270    	; 0x318 <__stack+0x19>
		default:	output[0] = 0;
 426:	1a 82       	std	Y+2, r1	; 0x02
 428:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 42a:	1c 82       	std	Y+4, r1	; 0x04
 42c:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 42e:	1e 82       	std	Y+6, r1	; 0x06
 430:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 432:	18 86       	std	Y+8, r1	; 0x08
 434:	1f 82       	std	Y+7, r1	; 0x07
					break;
 436:	70 cf       	rjmp	.-288    	; 0x318 <__stack+0x19>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}

void drawKey(void){
 438:	9f 01       	movw	r18, r30
					output[3] = 0;
					break;
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
		if(output[i] == 0){
 43a:	80 81       	ld	r24, Z
 43c:	91 81       	ldd	r25, Z+1	; 0x01
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	59 f4       	brne	.+22     	; 0x458 <__stack+0x159>
			// set output high (off)
			PORTD |= (1 << display[i]);
 442:	1b b1       	in	r17, 0x0b	; 11
 444:	cb 01       	movw	r24, r22
 446:	d7 01       	movw	r26, r14
 448:	0c 90       	ld	r0, X
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__stack+0x151>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <__stack+0x14d>
 454:	81 2b       	or	r24, r17
 456:	8b b9       	out	0x0b, r24	; 11
 458:	32 96       	adiw	r30, 0x02	; 2
		}
		if(output[i] == 1){
 45a:	d9 01       	movw	r26, r18
 45c:	8d 91       	ld	r24, X+
 45e:	9c 91       	ld	r25, X
 460:	11 97       	sbiw	r26, 0x01	; 1
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	91 05       	cpc	r25, r1
 466:	61 f4       	brne	.+24     	; 0x480 <__stack+0x181>
			// set output low (on)
			PORTD &= ~(1 << display[i]);
 468:	2b b1       	in	r18, 0x0b	; 11
 46a:	cb 01       	movw	r24, r22
 46c:	d7 01       	movw	r26, r14
 46e:	0c 90       	ld	r0, X
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x177>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x173>
 47a:	80 95       	com	r24
 47c:	82 23       	and	r24, r18
 47e:	8b b9       	out	0x0b, r24	; 11
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	e8 0e       	add	r14, r24
 486:	f9 1e       	adc	r15, r25
					output[2] = 0;
					output[3] = 0;
					break;
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
 488:	e4 17       	cp	r30, r20
 48a:	f5 07       	cpc	r31, r21
 48c:	a9 f6       	brne	.-86     	; 0x438 <__stack+0x139>
		if(output[i] == 1){
			// set output low (on)
			PORTD &= ~(1 << display[i]);
		}
	}
}
 48e:	28 96       	adiw	r28, 0x08	; 8
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	08 95       	ret

000004a6 <__vector_3>:

// globals for 4 LED display
int display[] = {LED1, LED2, LED3, LED4};


ISR(PCINT0_vect){
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	83 ec       	ldi	r24, 0xC3	; 195
 4ca:	99 e0       	ldi	r25, 0x09	; 9
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__vector_3+0x26>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__vector_3+0x2c>
 4d2:	00 00       	nop
	_delay_ms(10);
	if(getButtonState()){								// on key down...
 4d4:	d7 dd       	rcall	.-1106   	; 0x84 <getButtonState>
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_3+0x36>
		getKeyPress();
 4da:	ac de       	rcall	.-680    	; 0x234 <getKeyPress>
	}	
	if(!getButtonState()){								// on key release
 4dc:	d3 dd       	rcall	.-1114   	; 0x84 <getButtonState>
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__vector_3+0x3e>
		drawKey();										// draw the key
 4e2:	f7 de       	rcall	.-530    	; 0x2d2 <drawKey>
	}	
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <initDisplay>:
			PORTD &= ~(1 << display[i]);
		}
	}
}

void initDisplay(void){
 506:	ee e0       	ldi	r30, 0x0E	; 14
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	af 01       	movw	r20, r30
 50c:	48 5f       	subi	r20, 0xF8	; 248
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < NUM_LEDS; i++){
		PORTD &= ~(1 << display[i]);						// set led outputs high (off)
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	6b b1       	in	r22, 0x0b	; 11
			PORTD &= ~(1 << display[i]);
		}
	}
}

void initDisplay(void){
 516:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_LEDS; i++){
		PORTD &= ~(1 << display[i]);						// set led outputs high (off)
 518:	c9 01       	movw	r24, r18
 51a:	00 80       	ld	r0, Z
 51c:	02 c0       	rjmp	.+4      	; 0x522 <initDisplay+0x1c>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <initDisplay+0x18>
 526:	80 95       	com	r24
 528:	86 23       	and	r24, r22
 52a:	8b b9       	out	0x0b, r24	; 11
		DDRD |= (1 << display[i]);						// set led pins as outputs
 52c:	6a b1       	in	r22, 0x0a	; 10
 52e:	32 96       	adiw	r30, 0x02	; 2
 530:	c9 01       	movw	r24, r18
 532:	0c 90       	ld	r0, X
 534:	02 c0       	rjmp	.+4      	; 0x53a <initDisplay+0x34>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <initDisplay+0x30>
 53e:	86 2b       	or	r24, r22
 540:	8a b9       	out	0x0a, r24	; 10
		}
	}
}

void initDisplay(void){
	for(int i = 0; i < NUM_LEDS; i++){
 542:	e4 17       	cp	r30, r20
 544:	f5 07       	cpc	r31, r21
 546:	31 f7       	brne	.-52     	; 0x514 <initDisplay+0xe>
		PORTD &= ~(1 << display[i]);						// set led outputs high (off)
		DDRD |= (1 << display[i]);						// set led pins as outputs
	}
 548:	08 95       	ret

0000054a <main>:
		drawKey();										// draw the key
	}	
}

int main(void)
{			
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	2e 97       	sbiw	r28, 0x0e	; 14
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
	// initialize IO
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 55e:	de 01       	movw	r26, r28
 560:	11 96       	adiw	r26, 0x01	; 1
 562:	e0 e0       	ldi	r30, 0x00	; 0
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	88 e0       	ldi	r24, 0x08	; 8
 568:	01 90       	ld	r0, Z+
 56a:	0d 92       	st	X+, r0
 56c:	81 50       	subi	r24, 0x01	; 1
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x1e>
	int cols[] = {COL1, COL2, COL3};
 570:	de 01       	movw	r26, r28
 572:	19 96       	adiw	r26, 0x09	; 9
 574:	e8 e0       	ldi	r30, 0x08	; 8
 576:	f1 e0       	ldi	r31, 0x01	; 1
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	01 90       	ld	r0, Z+
 57c:	0d 92       	st	X+, r0
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0x30>
	initColumns(cols);									// set keypad columns as outputs
 582:	8e 01       	movw	r16, r28
 584:	07 5f       	subi	r16, 0xF7	; 247
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	c8 01       	movw	r24, r16
 58a:	80 de       	rcall	.-768    	; 0x28c <initColumns>
	initRows(rows);										// set keypad rows as inputs
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	67 de       	rcall	.-818    	; 0x260 <initRows>
	initDisplay();										// initialize a 4 LED display on port D
 592:	b9 df       	rcall	.-142    	; 0x506 <initDisplay>
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 594:	e8 e6       	ldi	r30, 0x68	; 104
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	80 83       	st	Z, r24
 59e:	fe 01       	movw	r30, r28
 5a0:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 5a2:	ab e6       	ldi	r26, 0x6B	; 107
 5a4:	b0 e0       	ldi	r27, 0x00	; 0
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	4c 91       	ld	r20, X
 5ac:	80 81       	ld	r24, Z
 5ae:	32 96       	adiw	r30, 0x02	; 2
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <main+0x6e>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <main+0x6a>
 5bc:	cb 01       	movw	r24, r22
 5be:	84 2b       	or	r24, r20
 5c0:	8c 93       	st	X, r24
	initRows(rows);										// set keypad rows as inputs
	initDisplay();										// initialize a 4 LED display on port D
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 5c2:	e0 17       	cp	r30, r16
 5c4:	f1 07       	cpc	r31, r17
 5c6:	89 f7       	brne	.-30     	; 0x5aa <main+0x60>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
	sei();	
 5c8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x82>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x84>
 5ce:	00 00       	nop
 5d0:	fc cf       	rjmp	.-8      	; 0x5ca <main+0x80>

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
