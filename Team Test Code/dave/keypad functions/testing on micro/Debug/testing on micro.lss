
testing on micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800118  00800118  0000068a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c0  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021b  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000500  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ed  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	25 c0       	rjmp	.+74     	; 0x4c <__ctors_end>
   2:	3f c0       	rjmp	.+126    	; 0x82 <__bad_interrupt>
   4:	3e c0       	rjmp	.+124    	; 0x82 <__bad_interrupt>
   6:	52 c2       	rjmp	.+1188   	; 0x4ac <__vector_3>
   8:	3c c0       	rjmp	.+120    	; 0x82 <__bad_interrupt>
   a:	3b c0       	rjmp	.+118    	; 0x82 <__bad_interrupt>
   c:	3a c0       	rjmp	.+116    	; 0x82 <__bad_interrupt>
   e:	39 c0       	rjmp	.+114    	; 0x82 <__bad_interrupt>
  10:	38 c0       	rjmp	.+112    	; 0x82 <__bad_interrupt>
  12:	37 c0       	rjmp	.+110    	; 0x82 <__bad_interrupt>
  14:	36 c0       	rjmp	.+108    	; 0x82 <__bad_interrupt>
  16:	35 c0       	rjmp	.+106    	; 0x82 <__bad_interrupt>
  18:	34 c0       	rjmp	.+104    	; 0x82 <__bad_interrupt>
  1a:	33 c0       	rjmp	.+102    	; 0x82 <__bad_interrupt>
  1c:	32 c0       	rjmp	.+100    	; 0x82 <__bad_interrupt>
  1e:	31 c0       	rjmp	.+98     	; 0x82 <__bad_interrupt>
  20:	30 c0       	rjmp	.+96     	; 0x82 <__bad_interrupt>
  22:	2f c0       	rjmp	.+94     	; 0x82 <__bad_interrupt>
  24:	2e c0       	rjmp	.+92     	; 0x82 <__bad_interrupt>
  26:	2d c0       	rjmp	.+90     	; 0x82 <__bad_interrupt>
  28:	2c c0       	rjmp	.+88     	; 0x82 <__bad_interrupt>
  2a:	2b c0       	rjmp	.+86     	; 0x82 <__bad_interrupt>
  2c:	2a c0       	rjmp	.+84     	; 0x82 <__bad_interrupt>
  2e:	29 c0       	rjmp	.+82     	; 0x82 <__bad_interrupt>
  30:	28 c0       	rjmp	.+80     	; 0x82 <__bad_interrupt>
  32:	27 c0       	rjmp	.+78     	; 0x82 <__bad_interrupt>
  34:	6a c1       	rjmp	.+724    	; 0x30a <__stack+0xb>
  36:	81 c1       	rjmp	.+770    	; 0x33a <__stack+0x3b>
  38:	8b c1       	rjmp	.+790    	; 0x350 <__stack+0x51>
  3a:	95 c1       	rjmp	.+810    	; 0x366 <__stack+0x67>
  3c:	9f c1       	rjmp	.+830    	; 0x37c <__stack+0x7d>
  3e:	a9 c1       	rjmp	.+850    	; 0x392 <__stack+0x93>
  40:	b3 c1       	rjmp	.+870    	; 0x3a8 <__stack+0xa9>
  42:	bd c1       	rjmp	.+890    	; 0x3be <__stack+0xbf>
  44:	c7 c1       	rjmp	.+910    	; 0x3d4 <__stack+0xd5>
  46:	d1 c1       	rjmp	.+930    	; 0x3ea <__stack+0xeb>
  48:	db c1       	rjmp	.+950    	; 0x400 <__stack+0x101>
  4a:	e5 c1       	rjmp	.+970    	; 0x416 <__stack+0x117>

0000004c <__ctors_end>:
  4c:	11 24       	eor	r1, r1
  4e:	1f be       	out	0x3f, r1	; 63
  50:	cf ef       	ldi	r28, 0xFF	; 255
  52:	d2 e0       	ldi	r29, 0x02	; 2
  54:	de bf       	out	0x3e, r29	; 62
  56:	cd bf       	out	0x3d, r28	; 61

00000058 <__do_copy_data>:
  58:	11 e0       	ldi	r17, 0x01	; 1
  5a:	a0 e0       	ldi	r26, 0x00	; 0
  5c:	b1 e0       	ldi	r27, 0x01	; 1
  5e:	ee ed       	ldi	r30, 0xDE	; 222
  60:	f5 e0       	ldi	r31, 0x05	; 5
  62:	02 c0       	rjmp	.+4      	; 0x68 <__do_copy_data+0x10>
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a8 31       	cpi	r26, 0x18	; 24
  6a:	b1 07       	cpc	r27, r17
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0xc>

0000006e <__do_clear_bss>:
  6e:	11 e0       	ldi	r17, 0x01	; 1
  70:	a8 e1       	ldi	r26, 0x18	; 24
  72:	b1 e0       	ldi	r27, 0x01	; 1
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	69 d2       	rcall	.+1234   	; 0x552 <main>
  80:	ac c2       	rjmp	.+1368   	; 0x5da <_exit>

00000082 <__bad_interrupt>:
  82:	be cf       	rjmp	.-132    	; 0x0 <__vectors>

00000084 <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	81 e2       	ldi	r24, 0x21	; 33
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <getButtonState+0x2>
  8a:	00 00       	nop
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  8c:	18 9b       	sbis	0x03, 0	; 3
  8e:	0f c0       	rjmp	.+30     	; 0xae <getButtonState+0x2a>
	else if(!(PINB &(1 << ROW2))) s = 1;				
  90:	19 9b       	sbis	0x03, 1	; 3
  92:	10 c0       	rjmp	.+32     	; 0xb4 <getButtonState+0x30>
	else if(!(PINB &(1 << ROW3))) s = 1;				
  94:	1a 9b       	sbis	0x03, 2	; 3
  96:	11 c0       	rjmp	.+34     	; 0xba <getButtonState+0x36>
	else if(!(PINB &(1 << ROW4))) s = 1;
  98:	83 b1       	in	r24, 0x03	; 3
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  9a:	99 27       	eor	r25, r25
  9c:	87 fd       	sbrc	r24, 7
  9e:	90 95       	com	r25
  a0:	80 95       	com	r24
  a2:	90 95       	com	r25
  a4:	88 27       	eor	r24, r24
  a6:	99 0f       	add	r25, r25
  a8:	88 1f       	adc	r24, r24
  aa:	99 27       	eor	r25, r25
  ac:	08 95       	ret
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
  be:	08 95       	ret

000000c0 <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  c0:	18 9b       	sbis	0x03, 0	; 3
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  c4:	19 9b       	sbis	0x03, 1	; 3
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  c8:	1a 9b       	sbis	0x03, 2	; 3
  ca:	09 c0       	rjmp	.+18     	; 0xde <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  cc:	1f 9b       	sbis	0x03, 7	; 3
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <getRow+0x24>
  d0:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
  e8:	08 95       	ret

000000ea <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
  ea:	2b 9a       	sbi	0x05, 3	; 5
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	6a 95       	dec	r22
  f0:	f1 f7       	brne	.-4      	; 0xee <getCol+0x4>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  f2:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
  f4:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
  f6:	2c 9a       	sbi	0x05, 4	; 5
  f8:	7a e0       	ldi	r23, 0x0A	; 10
  fa:	7a 95       	dec	r23
  fc:	f1 f7       	brne	.-4      	; 0xfa <getCol+0x10>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  fe:	23 b1       	in	r18, 0x03	; 3
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <getCol+0x20>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <getCol+0x1c>
 10e:	20 fd       	sbrc	r18, 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <getCol+0x2e>
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <getCol+0x32>
		c = 2;											// then the key press was in the second column
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 11c:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 11e:	2d 9a       	sbi	0x05, 5	; 5
 120:	9a e0       	ldi	r25, 0x0A	; 10
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <getCol+0x38>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 126:	43 b1       	in	r20, 0x03	; 3
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	ba 01       	movw	r22, r20
 12c:	02 c0       	rjmp	.+4      	; 0x132 <getCol+0x48>
 12e:	75 95       	asr	r23
 130:	67 95       	ror	r22
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <getCol+0x44>
 136:	60 ff       	sbrs	r22, 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <getCol+0x54>
		c = 3;											// then the key press was in the third column
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 13e:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 140:	82 2f       	mov	r24, r18
 142:	93 2f       	mov	r25, r19
 144:	08 95       	ret

00000146 <keyMap>:

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 1;
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	51 f4       	brne	.+20     	; 0x15e <keyMap+0x18>
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	71 05       	cpc	r23, r1
 14e:	81 f1       	breq	.+96     	; 0x1b0 <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 2;
 150:	62 30       	cpi	r22, 0x02	; 2
 152:	71 05       	cpc	r23, r1
 154:	81 f1       	breq	.+96     	; 0x1b6 <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 3;
 156:	63 30       	cpi	r22, 0x03	; 3
 158:	71 05       	cpc	r23, r1
 15a:	e9 f4       	brne	.+58     	; 0x196 <keyMap+0x50>
 15c:	2f c0       	rjmp	.+94     	; 0x1bc <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 4;
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 05       	cpc	r25, r1
 162:	51 f4       	brne	.+20     	; 0x178 <keyMap+0x32>
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	71 05       	cpc	r23, r1
 168:	61 f1       	breq	.+88     	; 0x1c2 <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 5;
 16a:	62 30       	cpi	r22, 0x02	; 2
 16c:	71 05       	cpc	r23, r1
 16e:	61 f1       	breq	.+88     	; 0x1c8 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 6;
 170:	63 30       	cpi	r22, 0x03	; 3
 172:	71 05       	cpc	r23, r1
 174:	e9 f5       	brne	.+122    	; 0x1f0 <keyMap+0xaa>
 176:	2b c0       	rjmp	.+86     	; 0x1ce <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 7;
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	91 05       	cpc	r25, r1
 17c:	61 f4       	brne	.+24     	; 0x196 <keyMap+0x50>
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	71 05       	cpc	r23, r1
 182:	41 f1       	breq	.+80     	; 0x1d4 <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 8;
 184:	62 30       	cpi	r22, 0x02	; 2
 186:	71 05       	cpc	r23, r1
 188:	41 f1       	breq	.+80     	; 0x1da <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 9;
 18a:	63 30       	cpi	r22, 0x03	; 3
 18c:	71 05       	cpc	r23, r1
 18e:	81 f5       	brne	.+96     	; 0x1f0 <keyMap+0xaa>
 190:	29 e0       	ldi	r18, 0x09	; 9
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	2d c0       	rjmp	.+90     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = STAR;
 196:	87 30       	cpi	r24, 0x07	; 7
 198:	91 05       	cpc	r25, r1
 19a:	51 f5       	brne	.+84     	; 0x1f0 <keyMap+0xaa>
 19c:	61 30       	cpi	r22, 0x01	; 1
 19e:	71 05       	cpc	r23, r1
 1a0:	f9 f0       	breq	.+62     	; 0x1e0 <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 11;
 1a2:	62 30       	cpi	r22, 0x02	; 2
 1a4:	71 05       	cpc	r23, r1
 1a6:	f9 f0       	breq	.+62     	; 0x1e6 <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = POUND;
 1a8:	63 30       	cpi	r22, 0x03	; 3
 1aa:	71 05       	cpc	r23, r1
 1ac:	09 f5       	brne	.+66     	; 0x1f0 <keyMap+0xaa>
 1ae:	1e c0       	rjmp	.+60     	; 0x1ec <keyMap+0xa6>
}

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 1;
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 2;
 1b6:	22 e0       	ldi	r18, 0x02	; 2
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	1a c0       	rjmp	.+52     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 3;
 1bc:	23 e0       	ldi	r18, 0x03	; 3
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 4;
 1c2:	24 e0       	ldi	r18, 0x04	; 4
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 5;
 1c8:	25 e0       	ldi	r18, 0x05	; 5
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	11 c0       	rjmp	.+34     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 6;
 1ce:	26 e0       	ldi	r18, 0x06	; 6
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 7;
 1d4:	27 e0       	ldi	r18, 0x07	; 7
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 8;
 1da:	28 e0       	ldi	r18, 0x08	; 8
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 9;
	else if((r == ROW4) && (c == 1)) k = STAR;
 1e0:	2a e0       	ldi	r18, 0x0A	; 10
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 11;
 1e6:	2b e0       	ldi	r18, 0x0B	; 11
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = POUND;
 1ec:	2c e0       	ldi	r18, 0x0C	; 12
 1ee:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 1f0:	82 2f       	mov	r24, r18
 1f2:	93 2f       	mov	r25, r19
 1f4:	08 95       	ret

000001f6 <popKey>:

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 1f6:	48 e1       	ldi	r20, 0x18	; 24
 1f8:	51 e0       	ldi	r21, 0x01	; 1
 1fa:	80 91 18 01 	lds	r24, 0x0118
 1fe:	90 91 19 01 	lds	r25, 0x0119
 202:	fa 01       	movw	r30, r20
	else if((r == ROW4) && (c == 2)) k = 11;
	else if((r == ROW4) && (c == 3)) k = POUND;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
 204:	40 5f       	subi	r20, 0xF0	; 240
 206:	5f 4f       	sbci	r21, 0xFF	; 255
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
		key_queue[i] = key_queue[i+1];
 208:	22 81       	ldd	r18, Z+2	; 0x02
 20a:	33 81       	ldd	r19, Z+3	; 0x03
 20c:	21 93       	st	Z+, r18
 20e:	31 93       	st	Z+, r19
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 210:	e4 17       	cp	r30, r20
 212:	f5 07       	cpc	r31, r21
 214:	c9 f7       	brne	.-14     	; 0x208 <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	return k;
}
 216:	08 95       	ret

00000218 <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 218:	ac 01       	movw	r20, r24
 21a:	e8 e2       	ldi	r30, 0x28	; 40
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	cf 01       	movw	r24, r30
 220:	40 97       	sbiw	r24, 0x10	; 16
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 222:	32 91       	ld	r19, -Z
 224:	22 91       	ld	r18, -Z
 226:	33 83       	std	Z+3, r19	; 0x03
 228:	22 83       	std	Z+2, r18	; 0x02
	}	
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 22a:	e8 17       	cp	r30, r24
 22c:	f9 07       	cpc	r31, r25
 22e:	c9 f7       	brne	.-14     	; 0x222 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
 230:	50 93 19 01 	sts	0x0119, r21
 234:	40 93 18 01 	sts	0x0118, r20
}
 238:	08 95       	ret

0000023a <getKeyPress>:
// globals to be moved later
int lock_state = 1;										// will be updated by Colin's lock/unlock functions
int key_queue[KEY_QUEUE_SIZE];							// holds user inputs

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 23e:	40 df       	rcall	.-384    	; 0xc0 <getRow>
 240:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 242:	53 df       	rcall	.-346    	; 0xea <getCol>
 244:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 246:	ce 01       	movw	r24, r28
 248:	7e df       	rcall	.-260    	; 0x146 <keyMap>
	pushKey(key); 									// push key onto queue		
 24a:	e6 df       	rcall	.-52     	; 0x218 <pushKey>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <clearKeyQueue>:
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
 252:	e8 e1       	ldi	r30, 0x18	; 24
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	cf 01       	movw	r24, r30
 258:	42 96       	adiw	r24, 0x12	; 18
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
		key_queue[i] = 0;
 25a:	11 92       	st	Z+, r1
 25c:	11 92       	st	Z+, r1
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 25e:	e8 17       	cp	r30, r24
 260:	f9 07       	cpc	r31, r25
 262:	d9 f7       	brne	.-10     	; 0x25a <clearKeyQueue+0x8>
		key_queue[i] = 0;
	}
 264:	08 95       	ret

00000266 <initRows>:
    {
        _delay_us(5); 
    }
}

void initRows(int r[]){									// sets keypad rows as inputs
 266:	e8 2f       	mov	r30, r24
 268:	f9 2f       	mov	r31, r25
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < NUM_ROWS; i++){
		DDRB &= ~(1 << r[i]);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	64 b1       	in	r22, 0x04	; 4
 274:	20 81       	ld	r18, Z
 276:	32 96       	adiw	r30, 0x02	; 2
 278:	da 01       	movw	r26, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <initRows+0x1a>
 27c:	aa 0f       	add	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <initRows+0x16>
 284:	9d 01       	movw	r18, r26
 286:	20 95       	com	r18
 288:	26 23       	and	r18, r22
 28a:	24 b9       	out	0x04, r18	; 4
 28c:	01 97       	sbiw	r24, 0x01	; 1
        _delay_us(5); 
    }
}

void initRows(int r[]){									// sets keypad rows as inputs
	for(int i = 0; i < NUM_ROWS; i++){
 28e:	89 f7       	brne	.-30     	; 0x272 <initRows+0xc>
		DDRB &= ~(1 << r[i]);
	}
}
 290:	08 95       	ret

00000292 <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 292:	e8 2f       	mov	r30, r24
 294:	f9 2f       	mov	r31, r25
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	65 b1       	in	r22, 0x05	; 5
	for(int i = 0; i < NUM_ROWS; i++){
		DDRB &= ~(1 << r[i]);
	}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 2a0:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 2a2:	ca 01       	movw	r24, r20
 2a4:	00 80       	ld	r0, Z
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <initColumns+0x1a>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <initColumns+0x16>
 2b0:	80 95       	com	r24
 2b2:	86 23       	and	r24, r22
 2b4:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 2b6:	64 b1       	in	r22, 0x04	; 4
 2b8:	32 96       	adiw	r30, 0x02	; 2
 2ba:	ca 01       	movw	r24, r20
 2bc:	0c 90       	ld	r0, X
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <initColumns+0x32>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <initColumns+0x2e>
 2c8:	86 2b       	or	r24, r22
 2ca:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << r[i]);
	}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	23 30       	cpi	r18, 0x03	; 3
 2d2:	31 05       	cpc	r19, r1
 2d4:	21 f7       	brne	.-56     	; 0x29e <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}
 2d6:	08 95       	ret

000002d8 <drawKey>:

void drawKey(void){
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	28 97       	sbiw	r28, 0x08	; 8
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
	int output[NUM_LEDS];
	switch(key_queue[0]){								// determine LED output values
 2f2:	e0 91 18 01 	lds	r30, 0x0118
 2f6:	f0 91 19 01 	lds	r31, 0x0119
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	ec 30       	cpi	r30, 0x0C	; 12
 2fe:	f1 05       	cpc	r31, r1
 300:	08 f0       	brcs	.+2      	; 0x304 <__stack+0x5>
 302:	94 c0       	rjmp	.+296    	; 0x42c <__stack+0x12d>
 304:	e6 5e       	subi	r30, 0xE6	; 230
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	09 94       	ijmp
		case 1:		output[0] = 0;						// a 1 indicates that the led is on, 0 off.
 30a:	1a 82       	std	Y+2, r1	; 0x02
 30c:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;						// element 0 is most significant bit
 30e:	1c 82       	std	Y+4, r1	; 0x04
 310:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 312:	1e 82       	std	Y+6, r1	; 0x06
 314:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	98 87       	std	Y+8, r25	; 0x08
 31c:	8f 83       	std	Y+7, r24	; 0x07
					break;
 31e:	fe 01       	movw	r30, r28
 320:	31 96       	adiw	r30, 0x01	; 1
 322:	0f 2e       	mov	r0, r31
 324:	fe e0       	ldi	r31, 0x0E	; 14
 326:	ef 2e       	mov	r14, r31
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	ff 2e       	mov	r15, r31
 32c:	f0 2d       	mov	r31, r0
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}

void drawKey(void){
 32e:	ae 01       	movw	r20, r28
 330:	47 5f       	subi	r20, 0xF7	; 247
 332:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
		if(output[i] == 0){
			// set output high (off)
			PORTD |= (1 << display[i]);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	82 c0       	rjmp	.+260    	; 0x43e <__stack+0x13f>
		case 1:		output[0] = 0;						// a 1 indicates that the led is on, 0 off.
					output[1] = 0;						// element 0 is most significant bit
					output[2] = 0;
					output[3] = 1;
					break;
		case 2:		output[0] = 0;						
 33a:	1a 82       	std	Y+2, r1	; 0x02
 33c:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 33e:	1c 82       	std	Y+4, r1	; 0x04
 340:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	9e 83       	std	Y+6, r25	; 0x06
 348:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 34a:	18 86       	std	Y+8, r1	; 0x08
 34c:	1f 82       	std	Y+7, r1	; 0x07
					break;
 34e:	e7 cf       	rjmp	.-50     	; 0x31e <__stack+0x1f>
		case 3:		output[0] = 0;
 350:	1a 82       	std	Y+2, r1	; 0x02
 352:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 354:	1c 82       	std	Y+4, r1	; 0x04
 356:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	9e 83       	std	Y+6, r25	; 0x06
 35e:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 360:	98 87       	std	Y+8, r25	; 0x08
 362:	8f 83       	std	Y+7, r24	; 0x07
					break;
 364:	dc cf       	rjmp	.-72     	; 0x31e <__stack+0x1f>
		case 4:		output[0] = 0;
 366:	1a 82       	std	Y+2, r1	; 0x02
 368:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9c 83       	std	Y+4, r25	; 0x04
 370:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 372:	1e 82       	std	Y+6, r1	; 0x06
 374:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 376:	18 86       	std	Y+8, r1	; 0x08
 378:	1f 82       	std	Y+7, r1	; 0x07
					break;
 37a:	d1 cf       	rjmp	.-94     	; 0x31e <__stack+0x1f>
		case 5:		output[0] = 0;
 37c:	1a 82       	std	Y+2, r1	; 0x02
 37e:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9c 83       	std	Y+4, r25	; 0x04
 386:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 388:	1e 82       	std	Y+6, r1	; 0x06
 38a:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 38c:	98 87       	std	Y+8, r25	; 0x08
 38e:	8f 83       	std	Y+7, r24	; 0x07
					break;
 390:	c6 cf       	rjmp	.-116    	; 0x31e <__stack+0x1f>
		case 6:		output[0] = 0;
 392:	1a 82       	std	Y+2, r1	; 0x02
 394:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	9c 83       	std	Y+4, r25	; 0x04
 39c:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 1;
 39e:	9e 83       	std	Y+6, r25	; 0x06
 3a0:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 3a2:	18 86       	std	Y+8, r1	; 0x08
 3a4:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3a6:	bb cf       	rjmp	.-138    	; 0x31e <__stack+0x1f>
		case 7:		output[0] = 0;
 3a8:	1a 82       	std	Y+2, r1	; 0x02
 3aa:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	9c 83       	std	Y+4, r25	; 0x04
 3b2:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 1;
 3b4:	9e 83       	std	Y+6, r25	; 0x06
 3b6:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 3b8:	98 87       	std	Y+8, r25	; 0x08
 3ba:	8f 83       	std	Y+7, r24	; 0x07
					break;
 3bc:	b0 cf       	rjmp	.-160    	; 0x31e <__stack+0x1f>
		case 8:		output[0] = 1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9a 83       	std	Y+2, r25	; 0x02
 3c4:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3c6:	1c 82       	std	Y+4, r1	; 0x04
 3c8:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 3ca:	1e 82       	std	Y+6, r1	; 0x06
 3cc:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 3ce:	18 86       	std	Y+8, r1	; 0x08
 3d0:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3d2:	a5 cf       	rjmp	.-182    	; 0x31e <__stack+0x1f>
		case 9:		output[0] = 1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9a 83       	std	Y+2, r25	; 0x02
 3da:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3dc:	1c 82       	std	Y+4, r1	; 0x04
 3de:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 3e0:	1e 82       	std	Y+6, r1	; 0x06
 3e2:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 1;
 3e4:	98 87       	std	Y+8, r25	; 0x08
 3e6:	8f 83       	std	Y+7, r24	; 0x07
					break;
 3e8:	9a cf       	rjmp	.-204    	; 0x31e <__stack+0x1f>
		case STAR:	output[0] = 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	9a 83       	std	Y+2, r25	; 0x02
 3f0:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 3f2:	1c 82       	std	Y+4, r1	; 0x04
 3f4:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 3f6:	9e 83       	std	Y+6, r25	; 0x06
 3f8:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 0;
 3fa:	18 86       	std	Y+8, r1	; 0x08
 3fc:	1f 82       	std	Y+7, r1	; 0x07
					break;
 3fe:	8f cf       	rjmp	.-226    	; 0x31e <__stack+0x1f>
		case 11:	output[0] = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 0;
 408:	1c 82       	std	Y+4, r1	; 0x04
 40a:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 1;
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	8d 83       	std	Y+5, r24	; 0x05
					output[3] = 1;
 410:	98 87       	std	Y+8, r25	; 0x08
 412:	8f 83       	std	Y+7, r24	; 0x07
					break;
 414:	84 cf       	rjmp	.-248    	; 0x31e <__stack+0x1f>
		case POUND:	output[0] = 1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
					output[1] = 1;
 41e:	9c 83       	std	Y+4, r25	; 0x04
 420:	8b 83       	std	Y+3, r24	; 0x03
					output[2] = 0;
 422:	1e 82       	std	Y+6, r1	; 0x06
 424:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 426:	18 86       	std	Y+8, r1	; 0x08
 428:	1f 82       	std	Y+7, r1	; 0x07
					break;
 42a:	79 cf       	rjmp	.-270    	; 0x31e <__stack+0x1f>
		default:	output[0] = 0;
 42c:	1a 82       	std	Y+2, r1	; 0x02
 42e:	19 82       	std	Y+1, r1	; 0x01
					output[1] = 0;
 430:	1c 82       	std	Y+4, r1	; 0x04
 432:	1b 82       	std	Y+3, r1	; 0x03
					output[2] = 0;
 434:	1e 82       	std	Y+6, r1	; 0x06
 436:	1d 82       	std	Y+5, r1	; 0x05
					output[3] = 0;
 438:	18 86       	std	Y+8, r1	; 0x08
 43a:	1f 82       	std	Y+7, r1	; 0x07
					break;
 43c:	70 cf       	rjmp	.-288    	; 0x31e <__stack+0x1f>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
}

void drawKey(void){
 43e:	9f 01       	movw	r18, r30
					output[3] = 0;
					break;
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
		if(output[i] == 0){
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	59 f4       	brne	.+22     	; 0x45e <__stack+0x15f>
			// set output high (off)
			PORTD |= (1 << display[i]);
 448:	1b b1       	in	r17, 0x0b	; 11
 44a:	cb 01       	movw	r24, r22
 44c:	d7 01       	movw	r26, r14
 44e:	0c 90       	ld	r0, X
 450:	02 c0       	rjmp	.+4      	; 0x456 <__stack+0x157>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <__stack+0x153>
 45a:	81 2b       	or	r24, r17
 45c:	8b b9       	out	0x0b, r24	; 11
 45e:	32 96       	adiw	r30, 0x02	; 2
		}
		if(output[i] == 1){
 460:	d9 01       	movw	r26, r18
 462:	8d 91       	ld	r24, X+
 464:	9c 91       	ld	r25, X
 466:	11 97       	sbiw	r26, 0x01	; 1
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	91 05       	cpc	r25, r1
 46c:	61 f4       	brne	.+24     	; 0x486 <__stack+0x187>
			// set output low (on)
			PORTD &= ~(1 << display[i]);
 46e:	2b b1       	in	r18, 0x0b	; 11
 470:	cb 01       	movw	r24, r22
 472:	d7 01       	movw	r26, r14
 474:	0c 90       	ld	r0, X
 476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x17d>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__stack+0x179>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	8b b9       	out	0x0b, r24	; 11
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	e8 0e       	add	r14, r24
 48c:	f9 1e       	adc	r15, r25
					output[2] = 0;
					output[3] = 0;
					break;
	}
	
	for(int i = 0; i < NUM_LEDS; i++){
 48e:	e4 17       	cp	r30, r20
 490:	f5 07       	cpc	r31, r21
 492:	a9 f6       	brne	.-86     	; 0x43e <__stack+0x13f>
		if(output[i] == 1){
			// set output low (on)
			PORTD &= ~(1 << display[i]);
		}
	}
}
 494:	28 96       	adiw	r28, 0x08	; 8
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	08 95       	ret

000004ac <__vector_3>:

// globals for 4 LED display
int display[] = {LED1, LED2, LED3, LED4};


ISR(PCINT0_vect){
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	cli();
 4ce:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	81 ee       	ldi	r24, 0xE1	; 225
 4d2:	94 e0       	ldi	r25, 0x04	; 4
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__vector_3+0x28>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__vector_3+0x2e>
 4da:	00 00       	nop
	_delay_ms(5);
	if(getButtonState()){								// on key down...
 4dc:	d3 dd       	rcall	.-1114   	; 0x84 <getButtonState>
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__vector_3+0x38>
		getKeyPress();
 4e2:	ab de       	rcall	.-682    	; 0x23a <getKeyPress>
	}	
	if(!getButtonState()){								// on key release
 4e4:	cf dd       	rcall	.-1122   	; 0x84 <getButtonState>
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	09 f4       	brne	.+2      	; 0x4ec <__vector_3+0x40>
		drawKey();										// draw the key
 4ea:	f6 de       	rcall	.-532    	; 0x2d8 <drawKey>
	}	
	sei();
 4ec:	78 94       	sei
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <initDisplay>:
			PORTD &= ~(1 << display[i]);
		}
	}
}

void initDisplay(void){
 510:	ee e0       	ldi	r30, 0x0E	; 14
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	af 01       	movw	r20, r30
 516:	48 5f       	subi	r20, 0xF8	; 248
 518:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < NUM_LEDS; i++){
		PORTD |= (1 << display[i]);						// set led outputs high (off)
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	6b b1       	in	r22, 0x0b	; 11
			PORTD &= ~(1 << display[i]);
		}
	}
}

void initDisplay(void){
 520:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_LEDS; i++){
		PORTD |= (1 << display[i]);						// set led outputs high (off)
 522:	c9 01       	movw	r24, r18
 524:	00 80       	ld	r0, Z
 526:	02 c0       	rjmp	.+4      	; 0x52c <initDisplay+0x1c>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <initDisplay+0x18>
 530:	86 2b       	or	r24, r22
 532:	8b b9       	out	0x0b, r24	; 11
		DDRD |= (1 << display[i]);						// set led pins as outputs
 534:	6a b1       	in	r22, 0x0a	; 10
 536:	32 96       	adiw	r30, 0x02	; 2
 538:	c9 01       	movw	r24, r18
 53a:	0c 90       	ld	r0, X
 53c:	02 c0       	rjmp	.+4      	; 0x542 <initDisplay+0x32>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <initDisplay+0x2e>
 546:	86 2b       	or	r24, r22
 548:	8a b9       	out	0x0a, r24	; 10
		}
	}
}

void initDisplay(void){
	for(int i = 0; i < NUM_LEDS; i++){
 54a:	e4 17       	cp	r30, r20
 54c:	f5 07       	cpc	r31, r21
 54e:	39 f7       	brne	.-50     	; 0x51e <initDisplay+0xe>
		PORTD |= (1 << display[i]);						// set led outputs high (off)
		DDRD |= (1 << display[i]);						// set led pins as outputs
	}
 550:	08 95       	ret

00000552 <main>:
	}	
	sei();
}

int main(void)
{			
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	2e 97       	sbiw	r28, 0x0e	; 14
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
	// initialize IO
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 566:	de 01       	movw	r26, r28
 568:	11 96       	adiw	r26, 0x01	; 1
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f1 e0       	ldi	r31, 0x01	; 1
 56e:	88 e0       	ldi	r24, 0x08	; 8
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	81 50       	subi	r24, 0x01	; 1
 576:	e1 f7       	brne	.-8      	; 0x570 <main+0x1e>
	int cols[] = {COL1, COL2, COL3};
 578:	de 01       	movw	r26, r28
 57a:	19 96       	adiw	r26, 0x09	; 9
 57c:	e8 e0       	ldi	r30, 0x08	; 8
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	01 90       	ld	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	81 50       	subi	r24, 0x01	; 1
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x30>
	initColumns(cols);									// set keypad columns as outputs
 58a:	8e 01       	movw	r16, r28
 58c:	07 5f       	subi	r16, 0xF7	; 247
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	c8 01       	movw	r24, r16
 592:	7f de       	rcall	.-770    	; 0x292 <initColumns>
	initRows(rows);										// set keypad rows as inputs
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	66 de       	rcall	.-820    	; 0x266 <initRows>
	initDisplay();										// initialize a 4 LED display on port D
 59a:	ba df       	rcall	.-140    	; 0x510 <initDisplay>
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 59c:	e8 e6       	ldi	r30, 0x68	; 104
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	80 83       	st	Z, r24
 5a6:	fe 01       	movw	r30, r28
 5a8:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 5aa:	ab e6       	ldi	r26, 0x6B	; 107
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	4c 91       	ld	r20, X
 5b4:	80 81       	ld	r24, Z
 5b6:	32 96       	adiw	r30, 0x02	; 2
 5b8:	b9 01       	movw	r22, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <main+0x6e>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	8a 95       	dec	r24
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <main+0x6a>
 5c4:	cb 01       	movw	r24, r22
 5c6:	84 2b       	or	r24, r20
 5c8:	8c 93       	st	X, r24
	initRows(rows);										// set keypad rows as inputs
	initDisplay();										// initialize a 4 LED display on port D
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 5ca:	e0 17       	cp	r30, r16
 5cc:	f1 07       	cpc	r31, r17
 5ce:	89 f7       	brne	.-30     	; 0x5b2 <main+0x60>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
	sei();	
 5d0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0x82>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x84>
 5d6:	00 00       	nop
 5d8:	fc cf       	rjmp	.-8      	; 0x5d2 <main+0x80>

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
