
testing with lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000005b6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001d0  008001d0  0000071a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b75  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024a  00000000  00000000  00001a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bb  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	de c1       	rjmp	.+956    	; 0x3c4 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 eb       	ldi	r30, 0xB6	; 182
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 3d       	cpi	r26, 0xD0	; 208
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 ed       	ldi	r26, 0xD0	; 208
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 3e       	cpi	r26, 0xE4	; 228
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	27 d2       	rcall	.+1102   	; 0x4b6 <main>
  68:	a4 c2       	rjmp	.+1352   	; 0x5b2 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <getButtonState>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	81 e2       	ldi	r24, 0x21	; 33
  6e:	8a 95       	dec	r24
  70:	f1 f7       	brne	.-4      	; 0x6e <getButtonState+0x2>
  72:	00 00       	nop
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  74:	18 9b       	sbis	0x03, 0	; 3
  76:	0f c0       	rjmp	.+30     	; 0x96 <getButtonState+0x2a>
	else if(!(PINB &(1 << ROW2))) s = 1;				
  78:	19 9b       	sbis	0x03, 1	; 3
  7a:	10 c0       	rjmp	.+32     	; 0x9c <getButtonState+0x30>
	else if(!(PINB &(1 << ROW3))) s = 1;				
  7c:	1a 9b       	sbis	0x03, 2	; 3
  7e:	11 c0       	rjmp	.+34     	; 0xa2 <getButtonState+0x36>
	else if(!(PINB &(1 << ROW4))) s = 1;
  80:	83 b1       	in	r24, 0x03	; 3
}

int getButtonState(){									// check rows, if any are low then a key is being pressed
	_delay_us(100);
	int s = 0;
	if(!(PINB &(1 << ROW1))) s = 1;
  82:	99 27       	eor	r25, r25
  84:	87 fd       	sbrc	r24, 7
  86:	90 95       	com	r25
  88:	80 95       	com	r24
  8a:	90 95       	com	r25
  8c:	88 27       	eor	r24, r24
  8e:	99 0f       	add	r25, r25
  90:	88 1f       	adc	r24, r24
  92:	99 27       	eor	r25, r25
  94:	08 95       	ret
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) s = 1;				
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) s = 1;				
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
	else if(!(PINB &(1 << ROW4))) s = 1;
	return s;
}
  a6:	08 95       	ret

000000a8 <getRow>:

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  a8:	18 9b       	sbis	0x03, 0	; 3
  aa:	07 c0       	rjmp	.+14     	; 0xba <getRow+0x12>
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  ac:	19 9b       	sbis	0x03, 1	; 3
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <getRow+0x18>
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  b0:	1a 9b       	sbis	0x03, 2	; 3
  b2:	09 c0       	rjmp	.+18     	; 0xc6 <getRow+0x1e>
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  b4:	1f 9b       	sbis	0x03, 7	; 3
  b6:	0a c0       	rjmp	.+20     	; 0xcc <getRow+0x24>
  b8:	08 95       	ret
	return s;
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
		 if(!(PINB &(1 << ROW1))) r = ROW1;				// if row 1 is low then the key press was in row 1
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
	else if(!(PINB &(1 << ROW2))) r = ROW2;				// if row 2 is low then the key press was in row 2	
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret
	else if(!(PINB &(1 << ROW3))) r = ROW3;				// if row 3 is low then the key press was in row 3
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret
	else if(!(PINB &(1 << ROW4))) r = ROW4;				// if row 4 is low then the key press was in row 4
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	90 e0       	ldi	r25, 0x00	; 0
	return r;
}
  d0:	08 95       	ret

000000d2 <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
		
	PORTB |= (1 << COL1);								// set first column high
  d2:	2b 9a       	sbi	0x05, 3	; 5
  d4:	6a e0       	ldi	r22, 0x0A	; 10
  d6:	6a 95       	dec	r22
  d8:	f1 f7       	brne	.-4      	; 0xd6 <getCol+0x4>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  da:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key press was in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
  dc:	2b 98       	cbi	0x05, 3	; 5
	
	
	PORTB |= (1 << COL2);								// set second column high
  de:	2c 9a       	sbi	0x05, 4	; 5
  e0:	7a e0       	ldi	r23, 0x0A	; 10
  e2:	7a 95       	dec	r23
  e4:	f1 f7       	brne	.-4      	; 0xe2 <getCol+0x10>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
  e6:	23 b1       	in	r18, 0x03	; 3
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	08 2e       	mov	r0, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <getCol+0x20>
  ee:	35 95       	asr	r19
  f0:	27 95       	ror	r18
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <getCol+0x1c>
  f6:	20 fd       	sbrc	r18, 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <getCol+0x2e>
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <getCol+0x32>
		c = 2;											// then the key press was in the second column
 100:	22 e0       	ldi	r18, 0x02	; 2
 102:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 104:	2c 98       	cbi	0x05, 4	; 5

	
	PORTB |= (1 << COL3);								// set third column high
 106:	2d 9a       	sbi	0x05, 5	; 5
 108:	9a e0       	ldi	r25, 0x0A	; 10
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <getCol+0x38>
	_delay_us(30);										// wait for debouncing filter
	if((PINB & (1 << r))) {								// if the row went high
 10e:	43 b1       	in	r20, 0x03	; 3
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	ba 01       	movw	r22, r20
 114:	02 c0       	rjmp	.+4      	; 0x11a <getCol+0x48>
 116:	75 95       	asr	r23
 118:	67 95       	ror	r22
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <getCol+0x44>
 11e:	60 ff       	sbrs	r22, 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <getCol+0x54>
		c = 3;											// then the key press was in the third column
 122:	23 e0       	ldi	r18, 0x03	; 3
 124:	30 e0       	ldi	r19, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 126:	2d 98       	cbi	0x05, 5	; 5

	
	return c;
}
 128:	82 2f       	mov	r24, r18
 12a:	93 2f       	mov	r25, r19
 12c:	08 95       	ret

0000012e <keyMap>:

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	51 f4       	brne	.+20     	; 0x146 <keyMap+0x18>
 132:	61 30       	cpi	r22, 0x01	; 1
 134:	71 05       	cpc	r23, r1
 136:	81 f1       	breq	.+96     	; 0x198 <keyMap+0x6a>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 138:	62 30       	cpi	r22, 0x02	; 2
 13a:	71 05       	cpc	r23, r1
 13c:	81 f1       	breq	.+96     	; 0x19e <keyMap+0x70>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 13e:	63 30       	cpi	r22, 0x03	; 3
 140:	71 05       	cpc	r23, r1
 142:	e9 f4       	brne	.+58     	; 0x17e <keyMap+0x50>
 144:	2f c0       	rjmp	.+94     	; 0x1a4 <keyMap+0x76>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	91 05       	cpc	r25, r1
 14a:	51 f4       	brne	.+20     	; 0x160 <keyMap+0x32>
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	71 05       	cpc	r23, r1
 150:	61 f1       	breq	.+88     	; 0x1aa <keyMap+0x7c>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 152:	62 30       	cpi	r22, 0x02	; 2
 154:	71 05       	cpc	r23, r1
 156:	61 f1       	breq	.+88     	; 0x1b0 <keyMap+0x82>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 158:	63 30       	cpi	r22, 0x03	; 3
 15a:	71 05       	cpc	r23, r1
 15c:	e9 f5       	brne	.+122    	; 0x1d8 <keyMap+0xaa>
 15e:	2b c0       	rjmp	.+86     	; 0x1b6 <keyMap+0x88>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	91 05       	cpc	r25, r1
 164:	61 f4       	brne	.+24     	; 0x17e <keyMap+0x50>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	71 05       	cpc	r23, r1
 16a:	41 f1       	breq	.+80     	; 0x1bc <keyMap+0x8e>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	71 05       	cpc	r23, r1
 170:	41 f1       	breq	.+80     	; 0x1c2 <keyMap+0x94>
	else if((r == ROW3) && (c == 3)) k = 0x39;
 172:	63 30       	cpi	r22, 0x03	; 3
 174:	71 05       	cpc	r23, r1
 176:	81 f5       	brne	.+96     	; 0x1d8 <keyMap+0xaa>
 178:	29 e3       	ldi	r18, 0x39	; 57
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	2d c0       	rjmp	.+90     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 17e:	87 30       	cpi	r24, 0x07	; 7
 180:	91 05       	cpc	r25, r1
 182:	51 f5       	brne	.+84     	; 0x1d8 <keyMap+0xaa>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 05       	cpc	r23, r1
 188:	f9 f0       	breq	.+62     	; 0x1c8 <keyMap+0x9a>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	71 05       	cpc	r23, r1
 18e:	f9 f0       	breq	.+62     	; 0x1ce <keyMap+0xa0>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 190:	63 30       	cpi	r22, 0x03	; 3
 192:	71 05       	cpc	r23, r1
 194:	09 f5       	brne	.+66     	; 0x1d8 <keyMap+0xaa>
 196:	1e c0       	rjmp	.+60     	; 0x1d4 <keyMap+0xa6>
}

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
														// adjust row value to account for 0 index
		 if((r == ROW1) && (c == 1)) k = 0x31;
 198:	21 e3       	ldi	r18, 0x31	; 49
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	1d c0       	rjmp	.+58     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW1) && (c == 2)) k = 0x32;
 19e:	22 e3       	ldi	r18, 0x32	; 50
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW1) && (c == 3)) k = 0x33;
 1a4:	23 e3       	ldi	r18, 0x33	; 51
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW2) && (c == 1)) k = 0x34;
 1aa:	24 e3       	ldi	r18, 0x34	; 52
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW2) && (c == 2)) k = 0x35;
 1b0:	25 e3       	ldi	r18, 0x35	; 53
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW2) && (c == 3)) k = 0x36;
 1b6:	26 e3       	ldi	r18, 0x36	; 54
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	0e c0       	rjmp	.+28     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW3) && (c == 1)) k = 0x37;
 1bc:	27 e3       	ldi	r18, 0x37	; 55
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW3) && (c == 2)) k = 0x38;
 1c2:	28 e3       	ldi	r18, 0x38	; 56
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW3) && (c == 3)) k = 0x39;
	else if((r == ROW4) && (c == 1)) k = 0x2A;
 1c8:	2a e2       	ldi	r18, 0x2A	; 42
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW4) && (c == 2)) k = 0x30;
 1ce:	20 e3       	ldi	r18, 0x30	; 48
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <keyMap+0xaa>
	else if((r == ROW4) && (c == 3)) k = 0x23;
 1d4:	23 e2       	ldi	r18, 0x23	; 35
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	return k;
}
 1d8:	82 2f       	mov	r24, r18
 1da:	93 2f       	mov	r25, r19
 1dc:	08 95       	ret

000001de <getKeyPress>:
int lock_state = 1;										// will be updated by Colin's lock/unlock functions
int key_queue[KEY_QUEUE_SIZE];							// holds user inputs
int current_key;

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	int row;
	int col;
	int key;							
	row = getRow();									// get the row of current key being pressed
 1e2:	62 df       	rcall	.-316    	; 0xa8 <getRow>
 1e4:	ec 01       	movw	r28, r24
	col = getCol(row); 								// get the col of current key being pressed		
 1e6:	75 df       	rcall	.-278    	; 0xd2 <getCol>
 1e8:	bc 01       	movw	r22, r24
	key = keyMap(row,col);							// will hold the key value to be added to queue
 1ea:	ce 01       	movw	r24, r28
 1ec:	a0 df       	rcall	.-192    	; 0x12e <keyMap>
	//pushKey(key); 									// push key onto queue		
	current_key = key;
 1ee:	90 93 d1 01 	sts	0x01D1, r25
 1f2:	80 93 d0 01 	sts	0x01D0, r24
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <popKey>:
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 1fc:	42 ed       	ldi	r20, 0xD2	; 210
 1fe:	51 e0       	ldi	r21, 0x01	; 1
 200:	80 91 d2 01 	lds	r24, 0x01D2
 204:	90 91 d3 01 	lds	r25, 0x01D3
 208:	fa 01       	movw	r30, r20
	else if((r == ROW4) && (c == 2)) k = 0x30;
	else if((r == ROW4) && (c == 3)) k = 0x23;
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
 20a:	40 5f       	subi	r20, 0xF0	; 240
 20c:	5f 4f       	sbci	r21, 0xFF	; 255
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
		key_queue[i] = key_queue[i+1];
 20e:	22 81       	ldd	r18, Z+2	; 0x02
 210:	33 81       	ldd	r19, Z+3	; 0x03
 212:	21 93       	st	Z+, r18
 214:	31 93       	st	Z+, r19
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 216:	e4 17       	cp	r30, r20
 218:	f5 07       	cpc	r31, r21
 21a:	c9 f7       	brne	.-14     	; 0x20e <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
 21c:	10 92 e3 01 	sts	0x01E3, r1
 220:	10 92 e2 01 	sts	0x01E2, r1
	return k;
}
 224:	08 95       	ret

00000226 <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 226:	ac 01       	movw	r20, r24
 228:	e2 ee       	ldi	r30, 0xE2	; 226
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	cf 01       	movw	r24, r30
 22e:	40 97       	sbiw	r24, 0x10	; 16
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 230:	32 91       	ld	r19, -Z
 232:	22 91       	ld	r18, -Z
 234:	33 83       	std	Z+3, r19	; 0x03
 236:	22 83       	std	Z+2, r18	; 0x02
	key_queue[KEY_QUEUE_SIZE-1] = '\0';
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 238:	e8 17       	cp	r30, r24
 23a:	f9 07       	cpc	r31, r25
 23c:	c9 f7       	brne	.-14     	; 0x230 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
 23e:	50 93 d3 01 	sts	0x01D3, r21
 242:	40 93 d2 01 	sts	0x01D2, r20
}
 246:	08 95       	ret

00000248 <clearKeyQueue>:

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
 248:	e2 ed       	ldi	r30, 0xD2	; 210
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	cf 01       	movw	r24, r30
 24e:	42 96       	adiw	r24, 0x12	; 18
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
		key_queue[i] = '\0';
 250:	11 92       	st	Z+, r1
 252:	11 92       	st	Z+, r1
	}
	key_queue[0] = k;		
}

void clearKeyQueue(void){ 										// clears submit_input, code_input, and input_index
	for(int i = 0; i < KEY_QUEUE_SIZE; i++){
 254:	e8 17       	cp	r30, r24
 256:	f9 07       	cpc	r31, r25
 258:	d9 f7       	brne	.-10     	; 0x250 <clearKeyQueue+0x8>
		key_queue[i] = '\0';
	}
	
 25a:	08 95       	ret

0000025c <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
 25c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <pulseElatch+0x6>
 266:	00 c0       	rjmp	.+0      	; 0x268 <pulseElatch+0xc>
 268:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
 26a:	44 98       	cbi	0x08, 4	; 8
}
 26c:	08 95       	ret

0000026e <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
 276:	8c 01       	movw	r16, r24
 278:	00 7f       	andi	r16, 0xF0	; 240
 27a:	10 70       	andi	r17, 0x00	; 0
 27c:	15 95       	asr	r17
 27e:	07 95       	ror	r16
 280:	15 95       	asr	r17
 282:	07 95       	ror	r16
 284:	15 95       	asr	r17
 286:	07 95       	ror	r16
 288:	15 95       	asr	r17
 28a:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
 28c:	ec 01       	movw	r28, r24
 28e:	cf 70       	andi	r28, 0x0F	; 15
 290:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
 292:	88 b1       	in	r24, 0x08	; 8
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
 298:	88 b1       	in	r24, 0x08	; 8
 29a:	80 2b       	or	r24, r16
 29c:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
 29e:	de df       	rcall	.-68     	; 0x25c <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	00 95       	com	r16
 2a4:	08 23       	and	r16, r24
 2a6:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	8c 2b       	or	r24, r28
 2ac:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
 2ae:	d6 df       	rcall	.-84     	; 0x25c <pulseElatch>
 2b0:	89 ef       	ldi	r24, 0xF9	; 249
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <writeLCDdata+0x46>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <writeLCDdata+0x4c>
 2ba:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
 2bc:	88 b1       	in	r24, 0x08	; 8
 2be:	c0 95       	com	r28
 2c0:	c8 23       	and	r28, r24
 2c2:	c8 b9       	out	0x08, r28	; 8
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 2d8:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 2da:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 2dc:	58 98       	cbi	0x0b, 0	; 11
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	c5 df       	rcall	.-118    	; 0x26e <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
 2e4:	c2 30       	cpi	r28, 0x02	; 2
 2e6:	d1 05       	cpc	r29, r1
 2e8:	59 f4       	brne	.+22     	; 0x300 <__stack+0x1>
	{
		writeLCDdata(0x2);			// Sending the cursor home
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	bf df       	rcall	.-130    	; 0x26e <writeLCDdata>
 2f0:	c8 e2       	ldi	r28, 0x28	; 40
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 2f4:	84 e1       	ldi	r24, 0x14	; 20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ba df       	rcall	.-140    	; 0x26e <writeLCDdata>
 2fa:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <cursorPosition+0x26>
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <__stack+0x7>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	b4 df       	rcall	.-152    	; 0x26e <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 306:	8f e0       	ldi	r24, 0x0F	; 15
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	b1 df       	rcall	.-158    	; 0x26e <writeLCDdata>
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 312:	2f e3       	ldi	r18, 0x3F	; 63
 314:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 316:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 318:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 31a:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(character);		// Sending the character on the data lines
 31c:	a8 df       	rcall	.-176    	; 0x26e <writeLCDdata>
}
 31e:	08 95       	ret

00000320 <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	c8 2f       	mov	r28, r24
 32a:	d9 2f       	mov	r29, r25
 32c:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 32e:	cf df       	rcall	.-98     	; 0x2ce <cursorPosition>
 330:	0c 2f       	mov	r16, r28
 332:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 338:	f8 01       	movw	r30, r16
 33a:	81 91       	ld	r24, Z+
 33c:	8f 01       	movw	r16, r30
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	e8 df       	rcall	.-48     	; 0x312 <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	c0 31       	cpi	r28, 0x10	; 16
 346:	d1 05       	cpc	r29, r1
 348:	b9 f7       	brne	.-18     	; 0x338 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 354:	8f e3       	ldi	r24, 0x3F	; 63
 356:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 358:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 35a:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 35c:	58 98       	cbi	0x0b, 0	; 11
	writeLCDdata(0x01);				// Writing clear instruction
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	85 df       	rcall	.-246    	; 0x26e <writeLCDdata>
}
 364:	08 95       	ret

00000366 <initializeLCD>:
#define LCD_PORT_2 PORTD		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRD			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 36a:	8f e3       	ldi	r24, 0x3F	; 63
 36c:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 36e:	88 b1       	in	r24, 0x08	; 8
 370:	80 7c       	andi	r24, 0xC0	; 192
 372:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 374:	50 9a       	sbi	0x0a, 0	; 10
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 376:	58 98       	cbi	0x0b, 0	; 11
 378:	c4 e0       	ldi	r28, 0x04	; 4
 37a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 37c:	88 b1       	in	r24, 0x08	; 8
 37e:	83 60       	ori	r24, 0x03	; 3
 380:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 382:	6c df       	rcall	.-296    	; 0x25c <pulseElatch>
 384:	89 ef       	ldi	r24, 0xF9	; 249
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <initializeLCD+0x22>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <initializeLCD+0x28>
 38e:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 390:	88 b1       	in	r24, 0x08	; 8
 392:	8c 7f       	andi	r24, 0xFC	; 252
 394:	88 b9       	out	0x08, r24	; 8
 396:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 398:	89 f7       	brne	.-30     	; 0x37c <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 39a:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 39c:	5f df       	rcall	.-322    	; 0x25c <pulseElatch>
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <initializeLCD+0x3c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <initializeLCD+0x42>
 3a8:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 3aa:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	5e df       	rcall	.-324    	; 0x26e <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	5b df       	rcall	.-330    	; 0x26e <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	58 df       	rcall	.-336    	; 0x26e <writeLCDdata>
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <__vector_3>:
int unlocked_menu_1[16] = {'#',' ','-',' ','T','O',' ','L','O','C','K',' ',' ',' ',' ',' ',};
int unlocked_menu_2[16] = {'*',' ','-',' ','S','E','T',' ','N','E','W',' ','C','O','D','E',};
int new_code_menu[16] = {'S','E','T',' ','N','E','W',' ','C','O','D','E',' ',' ',' ',' ',};
int cancel_code_change[16] = {' ',' ','-','-','C','A','N','C','E','L','E','D','-','-',' ',' ',};

ISR(PCINT0_vect){
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
 3e6:	81 ee       	ldi	r24, 0xE1	; 225
 3e8:	94 e0       	ldi	r25, 0x04	; 4
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <__vector_3+0x26>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <__vector_3+0x2c>
 3f0:	00 00       	nop
	_delay_ms(5);
	if(getButtonState()){		
 3f2:	3c de       	rcall	.-904    	; 0x6c <getButtonState>
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	41 f0       	breq	.+16     	; 0x408 <__vector_3+0x44>
		getKeyPress();		
 3f8:	f2 de       	rcall	.-540    	; 0x1de <getKeyPress>
 3fa:	83 ed       	ldi	r24, 0xD3	; 211
 3fc:	90 e3       	ldi	r25, 0x30	; 48
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <__vector_3+0x3a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__vector_3+0x40>
 404:	00 00       	nop
 406:	0d c0       	rjmp	.+26     	; 0x422 <__vector_3+0x5e>
		//_delay_ms(500);
		//writeLCDcharacter('p');
		_delay_ms(50);
	}
	else if(!getButtonState()){
 408:	31 de       	rcall	.-926    	; 0x6c <getButtonState>
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	51 f4       	brne	.+20     	; 0x422 <__vector_3+0x5e>
		//writeLCDcharacter('q');
		pushKey(current_key);
 40e:	80 91 d0 01 	lds	r24, 0x01D0
 412:	90 91 d1 01 	lds	r25, 0x01D1
 416:	07 df       	rcall	.-498    	; 0x226 <pushKey>
		writeLCDcharacter(key_queue[0]);		
 418:	80 91 d2 01 	lds	r24, 0x01D2
 41c:	90 91 d3 01 	lds	r25, 0x01D3
 420:	78 df       	rcall	.-272    	; 0x312 <writeLCDcharacter>
	}
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <initRows>:
			key_queue[0] = '?';
		}
	}
}

void initRows(int r[]){									// sets keypad rows as inputs
 444:	e8 2f       	mov	r30, r24
 446:	f9 2f       	mov	r31, r25
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	90 e0       	ldi	r25, 0x00	; 0
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	64 b1       	in	r22, 0x04	; 4
 452:	20 81       	ld	r18, Z
 454:	32 96       	adiw	r30, 0x02	; 2
 456:	da 01       	movw	r26, r20
 458:	02 c0       	rjmp	.+4      	; 0x45e <initRows+0x1a>
 45a:	aa 0f       	add	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	2a 95       	dec	r18
 460:	e2 f7       	brpl	.-8      	; 0x45a <initRows+0x16>
 462:	9d 01       	movw	r18, r26
 464:	20 95       	com	r18
 466:	26 23       	and	r18, r22
 468:	24 b9       	out	0x04, r18	; 4
 46a:	01 97       	sbiw	r24, 0x01	; 1
		}
	}
}

void initRows(int r[]){									// sets keypad rows as inputs
for(int i = 0; i < NUM_ROWS; i++){
 46c:	89 f7       	brne	.-30     	; 0x450 <initRows+0xc>
	DDRB &= ~(1 << r[i]);
}
}
 46e:	08 95       	ret

00000470 <initColumns>:

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 470:	e8 2f       	mov	r30, r24
 472:	f9 2f       	mov	r31, r25
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << c[i]);							// columns to output low
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	65 b1       	in	r22, 0x05	; 5
for(int i = 0; i < NUM_ROWS; i++){
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
 47e:	df 01       	movw	r26, r30
	for(int i = 0; i < NUM_COLS; i++){
		PORTB &= ~(1 << c[i]);							// columns to output low
 480:	ca 01       	movw	r24, r20
 482:	00 80       	ld	r0, Z
 484:	02 c0       	rjmp	.+4      	; 0x48a <initColumns+0x1a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <initColumns+0x16>
 48e:	80 95       	com	r24
 490:	86 23       	and	r24, r22
 492:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1 << c[i]);							// set columns as outputs
 494:	64 b1       	in	r22, 0x04	; 4
 496:	32 96       	adiw	r30, 0x02	; 2
 498:	ca 01       	movw	r24, r20
 49a:	0c 90       	ld	r0, X
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <initColumns+0x32>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <initColumns+0x2e>
 4a6:	86 2b       	or	r24, r22
 4a8:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << r[i]);
}
}

void initColumns(int c[]){								// sets keypad columns as outputs
	for(int i = 0; i < NUM_COLS; i++){
 4aa:	2f 5f       	subi	r18, 0xFF	; 255
 4ac:	3f 4f       	sbci	r19, 0xFF	; 255
 4ae:	23 30       	cpi	r18, 0x03	; 3
 4b0:	31 05       	cpc	r19, r1
 4b2:	21 f7       	brne	.-56     	; 0x47c <initColumns+0xc>
		PORTB &= ~(1 << c[i]);							// columns to output low
		DDRB |= (1 << c[i]);							// set columns as outputs
	}
 4b4:	08 95       	ret

000004b6 <main>:
		writeLCDcharacter(key_queue[0]);		
	}
}

int main(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	2e 97       	sbiw	r28, 0x0e	; 14
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
	// initialize
	int rows[] = {ROW1, ROW2, ROW3, ROW4};
 4ca:	de 01       	movw	r26, r28
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	e0 e0       	ldi	r30, 0x00	; 0
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	01 90       	ld	r0, Z+
 4d6:	0d 92       	st	X+, r0
 4d8:	81 50       	subi	r24, 0x01	; 1
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <main+0x1e>
	int cols[] = {COL1, COL2, COL3};
 4dc:	de 01       	movw	r26, r28
 4de:	19 96       	adiw	r26, 0x09	; 9
 4e0:	e8 e0       	ldi	r30, 0x08	; 8
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	01 90       	ld	r0, Z+
 4e8:	0d 92       	st	X+, r0
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0x30>
	int i;
	initRows(rows);										// set keypad rows as inputs
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	a8 df       	rcall	.-176    	; 0x444 <initRows>
	initColumns(cols);									// set keypad columns as outputs
 4f4:	8e 01       	movw	r16, r28
 4f6:	07 5f       	subi	r16, 0xF7	; 247
 4f8:	1f 4f       	sbci	r17, 0xFF	; 255
 4fa:	c8 01       	movw	r24, r16
 4fc:	b9 df       	rcall	.-142    	; 0x470 <initColumns>
	initializeLCD();									// set up LCD and initialize in 4 bit mode
 4fe:	33 df       	rcall	.-410    	; 0x366 <initializeLCD>
	clearKeyQueue();
 500:	a3 de       	rcall	.-698    	; 0x248 <clearKeyQueue>
	clearLCD();
 502:	28 df       	rcall	.-432    	; 0x354 <clearLCD>
	writeLCDline(enter_code,1);
 504:	8e ea       	ldi	r24, 0xAE	; 174
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	09 df       	rcall	.-494    	; 0x320 <writeLCDline>
	cursorPosition(2);
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	dd de       	rcall	.-582    	; 0x2ce <cursorPosition>
	writeLCDcharacter('#');
 514:	83 e2       	ldi	r24, 0x23	; 35
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc de       	rcall	.-520    	; 0x312 <writeLCDcharacter>
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
 51a:	e8 e6       	ldi	r30, 0x68	; 104
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	81 60       	ori	r24, 0x01	; 1
 522:	80 83       	st	Z, r24
 524:	fe 01       	movw	r30, r28
 526:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < NUM_ROWS; i++){
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
 528:	ab e6       	ldi	r26, 0x6B	; 107
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	4c 91       	ld	r20, X
 532:	80 81       	ld	r24, Z
 534:	32 96       	adiw	r30, 0x02	; 2
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <main+0x88>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <main+0x84>
 542:	cb 01       	movw	r24, r22
 544:	84 2b       	or	r24, r20
 546:	8c 93       	st	X, r24
	cursorPosition(2);
	writeLCDcharacter('#');
	
	// initialize interrupts
	PCICR |= (1 << PCIE0);								// set bit 0 of PCICR
	for(int i = 0; i < NUM_ROWS; i++){
 548:	e0 17       	cp	r30, r16
 54a:	f1 07       	cpc	r31, r17
 54c:	89 f7       	brne	.-30     	; 0x530 <main+0x7a>
		PCMSK0 |= (1 << rows[i]);						// allow row pins to trigger interrupts
	}
	sei();												// global interrupt enable
 54e:	78 94       	sei
	// wait loop
	while(1)											
	{
		_delay_us(5);
		
		if(key_queue[0] == '#'){
 550:	0f 2e       	mov	r0, r31
 552:	f2 ed       	ldi	r31, 0xD2	; 210
 554:	ef 2e       	mov	r14, r31
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	ff 2e       	mov	r15, r31
 55a:	f0 2d       	mov	r31, r0
			i = 1;
			while(key_queue[i] != '\0'){
 55c:	0f 2e       	mov	r0, r31
 55e:	f4 ed       	ldi	r31, 0xD4	; 212
 560:	cf 2e       	mov	r12, r31
 562:	f1 e0       	ldi	r31, 0x01	; 1
 564:	df 2e       	mov	r13, r31
 566:	f0 2d       	mov	r31, r0
				writeLCDcharacter(key_queue[i]);
				i++;	
			}
			key_queue[0] = '?';
 568:	0f 2e       	mov	r0, r31
 56a:	ff e3       	ldi	r31, 0x3F	; 63
 56c:	af 2e       	mov	r10, r31
 56e:	bb 24       	eor	r11, r11
 570:	f0 2d       	mov	r31, r0
	{
		_delay_us(5);
		
		if(key_queue[0] == '#'){
			i = 1;
			while(key_queue[i] != '\0'){
 572:	0f 2e       	mov	r0, r31
 574:	f6 ed       	ldi	r31, 0xD6	; 214
 576:	8f 2e       	mov	r8, r31
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	9f 2e       	mov	r9, r31
 57c:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0xca>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0xcc>
 582:	00 00       	nop
	// wait loop
	while(1)											
	{
		_delay_us(5);
		
		if(key_queue[0] == '#'){
 584:	f7 01       	movw	r30, r14
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	83 32       	cpi	r24, 0x23	; 35
 58c:	91 05       	cpc	r25, r1
 58e:	b9 f7       	brne	.-18     	; 0x57e <main+0xc8>
			i = 1;
			while(key_queue[i] != '\0'){
 590:	f6 01       	movw	r30, r12
 592:	80 81       	ld	r24, Z
 594:	91 81       	ldd	r25, Z+1	; 0x01
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	41 f0       	breq	.+16     	; 0x5aa <main+0xf4>
 59a:	84 01       	movw	r16, r8
				writeLCDcharacter(key_queue[i]);
 59c:	ba de       	rcall	.-652    	; 0x312 <writeLCDcharacter>
	{
		_delay_us(5);
		
		if(key_queue[0] == '#'){
			i = 1;
			while(key_queue[i] != '\0'){
 59e:	f8 01       	movw	r30, r16
 5a0:	81 91       	ld	r24, Z+
 5a2:	91 91       	ld	r25, Z+
 5a4:	8f 01       	movw	r16, r30
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	c9 f7       	brne	.-14     	; 0x59c <main+0xe6>
				writeLCDcharacter(key_queue[i]);
				i++;	
			}
			key_queue[0] = '?';
 5aa:	f7 01       	movw	r30, r14
 5ac:	b1 82       	std	Z+1, r11	; 0x01
 5ae:	a0 82       	st	Z, r10
 5b0:	e6 cf       	rjmp	.-52     	; 0x57e <main+0xc8>

000005b2 <_exit>:
 5b2:	f8 94       	cli

000005b4 <__stop_program>:
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stop_program>
