
testing keypad functions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800120  00800120  00000420  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000754  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c1  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001db  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c6  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 01 	call	0x302	; 0x302 <main>
  9e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getRow>:
				break;
		case 1: r = ROW2;
				break;
		case 2: r = ROW3;
				break;
		case 3: r = ROW4;
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
	for(int i=0; i < NUM_ROWS; i++){
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
		if((PINB & (1 << rows[i])) == 0){				// a logic low indicates that a key was pressed in that row.
  ae:	43 b1       	in	r20, 0x03	; 3
  b0:	20 81       	ld	r18, Z
  b2:	32 96       	adiw	r30, 0x02	; 2
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	da 01       	movw	r26, r20
  b8:	02 c0       	rjmp	.+4      	; 0xbe <getRow+0x18>
  ba:	b5 95       	asr	r27
  bc:	a7 95       	ror	r26
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <getRow+0x14>
  c2:	a0 ff       	sbrs	r26, 0
  c4:	bc 01       	movw	r22, r24
	}
}

int getRow(void){										// determine which row on the keypad caused the interrupts.
	int r;												// temporary placeholder for the row 
	for(int i=0; i < NUM_ROWS; i++){
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	91 05       	cpc	r25, r1
  cc:	81 f7       	brne	.-32     	; 0xae <getRow+0x8>
		if((PINB & (1 << rows[i])) == 0){				// a logic low indicates that a key was pressed in that row.
			r = i;									
		}
	}
	switch(r){
  ce:	77 23       	and	r23, r23
  d0:	4c f0       	brlt	.+18     	; 0xe4 <getRow+0x3e>
  d2:	63 30       	cpi	r22, 0x03	; 3
  d4:	71 05       	cpc	r23, r1
  d6:	44 f0       	brlt	.+16     	; 0xe8 <getRow+0x42>
  d8:	63 30       	cpi	r22, 0x03	; 3
  da:	71 05       	cpc	r23, r1
  dc:	19 f4       	brne	.+6      	; 0xe4 <getRow+0x3e>
				break;
		case 1: r = ROW2;
				break;
		case 2: r = ROW3;
				break;
		case 3: r = ROW4;
  de:	67 e0       	ldi	r22, 0x07	; 7
  e0:	70 e0       	ldi	r23, 0x00	; 0
				break;
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <getRow+0x42>
		default: r = ROW4;
  e4:	67 e0       	ldi	r22, 0x07	; 7
  e6:	70 e0       	ldi	r23, 0x00	; 0
				break;
	}
	return r;
}
  e8:	86 2f       	mov	r24, r22
  ea:	97 2f       	mov	r25, r23
  ec:	08 95       	ret

000000ee <getCol>:

int getCol(int r) {										// strobe outputs to determine column
	int c;
	
	PORTB |= (1 << COL1);								// set first column high
  ee:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	41 e2       	ldi	r20, 0x21	; 33
  f2:	4a 95       	dec	r20
  f4:	f1 f7       	brne	.-4      	; 0xf2 <getCol+0x4>
  f6:	00 00       	nop
	_delay_us(100);										// wait for debouncing filter
	if((PINB & (1 << r)) == 1) {					// if the row went high
  f8:	93 b1       	in	r25, 0x03	; 3
		c = 1;											// then the key is in the first column
	}
	PORTB &= ~(1 << COL1);								// set first column back to low
  fa:	2b 98       	cbi	0x05, 3	; 5
	
	PORTB |= (1 << COL2);								// set second column high
  fc:	2c 9a       	sbi	0x05, 4	; 5
  fe:	91 e2       	ldi	r25, 0x21	; 33
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <getCol+0x12>
 104:	00 00       	nop
	_delay_us(100);										// wait for debouncing filter
	if((PINB & (1 << r)) == 1) {					// if the row went high
 106:	93 b1       	in	r25, 0x03	; 3
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	9a 01       	movw	r18, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <getCol+0x26>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <getCol+0x22>
 118:	89 2f       	mov	r24, r25
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	82 23       	and	r24, r18
 11e:	93 23       	and	r25, r19
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	19 f0       	breq	.+6      	; 0x12c <getCol+0x3e>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <getCol+0x42>
		c = 2;											// then the key is in the second column
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	90 e0       	ldi	r25, 0x00	; 0
	}
	PORTB &= ~(1 << COL2);								// set the second column back to low
 130:	2c 98       	cbi	0x05, 4	; 5
	
	PORTB |= (1 << COL3);								// set third column high
 132:	2d 9a       	sbi	0x05, 5	; 5
 134:	41 e2       	ldi	r20, 0x21	; 33
 136:	4a 95       	dec	r20
 138:	f1 f7       	brne	.-4      	; 0x136 <getCol+0x48>
 13a:	00 00       	nop
	_delay_us(100);										// wait for debouncing filter
	if((PINB & (1 << r)) == 1) {					// if the row went high
 13c:	43 b1       	in	r20, 0x03	; 3
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	24 23       	and	r18, r20
 142:	35 23       	and	r19, r21
 144:	21 30       	cpi	r18, 0x01	; 1
 146:	31 05       	cpc	r19, r1
 148:	11 f4       	brne	.+4      	; 0x14e <getCol+0x60>
		c = 3;											// then the key is in the third column
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	90 e0       	ldi	r25, 0x00	; 0
	}
	PORTB &= ~(1 << COL3);								// set the third column back to low
 14e:	2d 98       	cbi	0x05, 5	; 5
	
	return c;
}
 150:	08 95       	ret

00000152 <keyMap>:

int keyMap(int r,int c) { 										// maps (row,column) pairs to an integer value corresponding to a key
	int k;
	r++;														// adjust row value to account for 0 index
 152:	01 96       	adiw	r24, 0x01	; 1
	switch(r){
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	91 05       	cpc	r25, r1
 158:	19 f1       	breq	.+70     	; 0x1a0 <keyMap+0x4e>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	91 05       	cpc	r25, r1
 15e:	2c f4       	brge	.+10     	; 0x16a <keyMap+0x18>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	09 f0       	breq	.+2      	; 0x168 <keyMap+0x16>
 166:	52 c0       	rjmp	.+164    	; 0x20c <keyMap+0xba>
 168:	08 c0       	rjmp	.+16     	; 0x17a <keyMap+0x28>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	91 05       	cpc	r25, r1
 16e:	51 f1       	breq	.+84     	; 0x1c4 <keyMap+0x72>
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	91 05       	cpc	r25, r1
 174:	09 f0       	breq	.+2      	; 0x178 <keyMap+0x26>
 176:	4a c0       	rjmp	.+148    	; 0x20c <keyMap+0xba>
 178:	37 c0       	rjmp	.+110    	; 0x1e8 <keyMap+0x96>
		case 1:		switch(c){
 17a:	62 30       	cpi	r22, 0x02	; 2
 17c:	71 05       	cpc	r23, r1
 17e:	09 f4       	brne	.+2      	; 0x182 <keyMap+0x30>
 180:	48 c0       	rjmp	.+144    	; 0x212 <keyMap+0xc0>
 182:	63 30       	cpi	r22, 0x03	; 3
 184:	71 05       	cpc	r23, r1
 186:	31 f0       	breq	.+12     	; 0x194 <keyMap+0x42>
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	71 05       	cpc	r23, r1
 18c:	31 f4       	brne	.+12     	; 0x19a <keyMap+0x48>
						case 1:		k = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret
						break;
						case 2:		k = 2;
						break;
						case 3:		k = 3;
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	90 e0       	ldi	r25, 0x00	; 0
						break;
 198:	08 95       	ret
						default:	k = POUND;
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	90 e0       	ldi	r25, 0x00	; 0
						break;
 19e:	08 95       	ret
					}
					break;
		
		case 2:		switch(c){
 1a0:	62 30       	cpi	r22, 0x02	; 2
 1a2:	71 05       	cpc	r23, r1
 1a4:	c9 f1       	breq	.+114    	; 0x218 <keyMap+0xc6>
 1a6:	63 30       	cpi	r22, 0x03	; 3
 1a8:	71 05       	cpc	r23, r1
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <keyMap+0x66>
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	71 05       	cpc	r23, r1
 1b0:	31 f4       	brne	.+12     	; 0x1be <keyMap+0x6c>
						case 1:		k = 4;
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret
						break;
						case 2:		k = 5;
						break;
						case 3:		k = 6;
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	90 e0       	ldi	r25, 0x00	; 0
						break;
 1bc:	08 95       	ret
						default:	k = POUND;
 1be:	8b e0       	ldi	r24, 0x0B	; 11
 1c0:	90 e0       	ldi	r25, 0x00	; 0
						break;
 1c2:	08 95       	ret
					}
					break;
		
		case 3:		switch(c){
 1c4:	62 30       	cpi	r22, 0x02	; 2
 1c6:	71 05       	cpc	r23, r1
 1c8:	51 f1       	breq	.+84     	; 0x21e <keyMap+0xcc>
 1ca:	63 30       	cpi	r22, 0x03	; 3
 1cc:	71 05       	cpc	r23, r1
 1ce:	31 f0       	breq	.+12     	; 0x1dc <keyMap+0x8a>
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	71 05       	cpc	r23, r1
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <keyMap+0x90>
						case 1:		k = 7;
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
						break;
						case 2:		k = 8;
						break;
						case 3:		k = 9;
 1dc:	89 e0       	ldi	r24, 0x09	; 9
 1de:	90 e0       	ldi	r25, 0x00	; 0
						break;
 1e0:	08 95       	ret
						default:	k = POUND;
 1e2:	8b e0       	ldi	r24, 0x0B	; 11
 1e4:	90 e0       	ldi	r25, 0x00	; 0
						break;
 1e6:	08 95       	ret
					}
					break;
		
		case 4:		switch(c){
 1e8:	62 30       	cpi	r22, 0x02	; 2
 1ea:	71 05       	cpc	r23, r1
 1ec:	d9 f0       	breq	.+54     	; 0x224 <keyMap+0xd2>
 1ee:	63 30       	cpi	r22, 0x03	; 3
 1f0:	71 05       	cpc	r23, r1
 1f2:	31 f0       	breq	.+12     	; 0x200 <keyMap+0xae>
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	71 05       	cpc	r23, r1
 1f8:	31 f4       	brne	.+12     	; 0x206 <keyMap+0xb4>
						case 1:		k = STAR;
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret
						break;
						case 2:		k = 0;
						break;
						case 3:		k = POUND;
 200:	8b e0       	ldi	r24, 0x0B	; 11
 202:	90 e0       	ldi	r25, 0x00	; 0
						break;
 204:	08 95       	ret
						default:	k = POUND;
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	90 e0       	ldi	r25, 0x00	; 0
						break;
 20a:	08 95       	ret
					}
					break;
		
		default:	k = POUND;
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret
	r++;														// adjust row value to account for 0 index
	switch(r){
		case 1:		switch(c){
						case 1:		k = 1;
						break;
						case 2:		k = 2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret
					break;
		
		case 2:		switch(c){
						case 1:		k = 4;
						break;
						case 2:		k = 5;
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
					break;
		
		case 3:		switch(c){
						case 1:		k = 7;
						break;
						case 2:		k = 8;
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
					break;
		
		case 4:		switch(c){
						case 1:		k = STAR;
						break;
						case 2:		k = 0;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
		
		default:	k = POUND;
		break;
	}
	return k;
}
 228:	08 95       	ret

0000022a <popKey>:

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
 22a:	46 e2       	ldi	r20, 0x26	; 38
 22c:	51 e0       	ldi	r21, 0x01	; 1
 22e:	80 91 26 01 	lds	r24, 0x0126
 232:	90 91 27 01 	lds	r25, 0x0127
 236:	fa 01       	movw	r30, r20
		break;
	}
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
 238:	42 5f       	subi	r20, 0xF2	; 242
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
		key_queue[i] = key_queue[i+1];
 23c:	22 81       	ldd	r18, Z+2	; 0x02
 23e:	33 81       	ldd	r19, Z+3	; 0x03
 240:	21 93       	st	Z+, r18
 242:	31 93       	st	Z+, r19
	return k;
}

int popKey(void){ 											// pop first element and shift queue;
	int k = key_queue[0];
	for(int i = 0; i < KEY_QUEUE_SIZE - 1; i++){
 244:	e4 17       	cp	r30, r20
 246:	f5 07       	cpc	r31, r21
 248:	c9 f7       	brne	.-14     	; 0x23c <popKey+0x12>
		key_queue[i] = key_queue[i+1];
	}	
	return k;
}
 24a:	08 95       	ret

0000024c <pushKey>:

void pushKey(int k){ 										// shift queue and update first element
 24c:	ac 01       	movw	r20, r24
 24e:	e4 e3       	ldi	r30, 0x34	; 52
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	cf 01       	movw	r24, r30
 254:	0e 97       	sbiw	r24, 0x0e	; 14
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
		key_queue[i] = key_queue[i-1];
 256:	32 91       	ld	r19, -Z
 258:	22 91       	ld	r18, -Z
 25a:	33 83       	std	Z+3, r19	; 0x03
 25c:	22 83       	std	Z+2, r18	; 0x02
	}	
	return k;
}

void pushKey(int k){ 										// shift queue and update first element
	for(int i = KEY_QUEUE_SIZE - 1; i > 0; i--){
 25e:	e8 17       	cp	r30, r24
 260:	f9 07       	cpc	r31, r25
 262:	c9 f7       	brne	.-14     	; 0x256 <pushKey+0xa>
		key_queue[i] = key_queue[i-1];
	}
	key_queue[0] = k;		
 264:	50 93 27 01 	sts	0x0127, r21
 268:	40 93 26 01 	sts	0x0126, r20
}
 26c:	08 95       	ret

0000026e <getKeyPress>:
// for convenience
int columns[] = {COL1, COL2, COL3};						// an array of columns. for use in loops.
int rows[] = {ROW1, ROW2, ROW3, ROW4};					// an array of the rows. for use in loops.

// adds the most recent key press to the key_queue
void getKeyPress(void){		
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
	int row;
	int col;
	int key;							
	if(button_state == 0){
 272:	80 91 22 01 	lds	r24, 0x0122
 276:	90 91 23 01 	lds	r25, 0x0123
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	91 f4       	brne	.+36     	; 0x2a2 <getKeyPress+0x34>
		button_state = 1; 								// button was previously unpressed and is now pressed
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 23 01 	sts	0x0123, r25
 286:	80 93 22 01 	sts	0x0122, r24
		row = getRow();									// get the row of current key being pressed
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <getRow>
 28e:	ec 01       	movw	r28, r24
		col = getCol(row); 								// get the col of current key being pressed		
 290:	0e 94 77 00 	call	0xee	; 0xee <getCol>
 294:	bc 01       	movw	r22, r24
		key = keyMap(row,col);							// will hold the key value to be added to queue
 296:	ce 01       	movw	r24, r28
 298:	0e 94 a9 00 	call	0x152	; 0x152 <keyMap>
		pushKey(key); 									// push key onto queue		
 29c:	0e 94 26 01 	call	0x24c	; 0x24c <pushKey>
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <getKeyPress+0x3c>
	}
	else {
		button_state = 0;								// button was previously pressed and is now unpressed
 2a2:	10 92 23 01 	sts	0x0123, r1
 2a6:	10 92 22 01 	sts	0x0122, r1
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <clearInput>:
	}
	key_queue[0] = k;		
}

void clearInput(void){ 										// clears submit_input, code_input, and input_index
	input_index = 0;
 2b0:	10 92 21 01 	sts	0x0121, r1
 2b4:	10 92 20 01 	sts	0x0120, r1
	for(int i = 0; i < INPUT_SIZE; i++){
		code_input[i] = 0;
 2b8:	10 92 37 01 	sts	0x0137, r1
 2bc:	10 92 36 01 	sts	0x0136, r1
 2c0:	10 92 39 01 	sts	0x0139, r1
 2c4:	10 92 38 01 	sts	0x0138, r1
 2c8:	10 92 3b 01 	sts	0x013B, r1
 2cc:	10 92 3a 01 	sts	0x013A, r1
 2d0:	10 92 3d 01 	sts	0x013D, r1
 2d4:	10 92 3c 01 	sts	0x013C, r1
 2d8:	10 92 3f 01 	sts	0x013F, r1
 2dc:	10 92 3e 01 	sts	0x013E, r1
 2e0:	10 92 41 01 	sts	0x0141, r1
 2e4:	10 92 40 01 	sts	0x0140, r1
 2e8:	10 92 43 01 	sts	0x0143, r1
 2ec:	10 92 42 01 	sts	0x0142, r1
 2f0:	10 92 45 01 	sts	0x0145, r1
 2f4:	10 92 44 01 	sts	0x0144, r1
 2f8:	10 92 47 01 	sts	0x0147, r1
 2fc:	10 92 46 01 	sts	0x0146, r1
		submit_input[0] = 0;
	}
 300:	08 95       	ret

00000302 <main>:
		
		Changing row 2 to low will simulate a keypress on row 2.
		
		In this program we will simulate a user pressing the '5' key (row 2, column 2).
	*/
	DDRB |= 0xFF;										// set all pins as outputs								
 302:	84 b1       	in	r24, 0x04	; 4
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	84 b9       	out	0x04, r24	; 4
 308:	e8 e0       	ldi	r30, 0x08	; 8
 30a:	f1 e0       	ldi	r31, 0x01	; 1
#include <avr/interrupt.h>
#include <util/delay.h>
*/
#include "keypad.c"

int main(void)
 30c:	9f 01       	movw	r18, r30
 30e:	2a 5f       	subi	r18, 0xFA	; 250
 310:	3f 4f       	sbci	r19, 0xFF	; 255
		
		In this program we will simulate a user pressing the '5' key (row 2, column 2).
	*/
	DDRB |= 0xFF;										// set all pins as outputs								
	for(int i = 0; i < NUM_COLS; i++){					// set columns low
		PORTB &= ~(1 << columns[i]);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	65 b1       	in	r22, 0x05	; 5
 318:	80 81       	ld	r24, Z
 31a:	32 96       	adiw	r30, 0x02	; 2
 31c:	da 01       	movw	r26, r20
 31e:	02 c0       	rjmp	.+4      	; 0x324 <main+0x22>
 320:	aa 0f       	add	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	8a 95       	dec	r24
 326:	e2 f7       	brpl	.-8      	; 0x320 <main+0x1e>
 328:	cd 01       	movw	r24, r26
 32a:	80 95       	com	r24
 32c:	86 23       	and	r24, r22
 32e:	85 b9       	out	0x05, r24	; 5
		Changing row 2 to low will simulate a keypress on row 2.
		
		In this program we will simulate a user pressing the '5' key (row 2, column 2).
	*/
	DDRB |= 0xFF;										// set all pins as outputs								
	for(int i = 0; i < NUM_COLS; i++){					// set columns low
 330:	e2 17       	cp	r30, r18
 332:	f3 07       	cpc	r31, r19
 334:	81 f7       	brne	.-32     	; 0x316 <main+0x14>
 336:	e0 e0       	ldi	r30, 0x00	; 0
 338:	f1 e0       	ldi	r31, 0x01	; 1
#include <avr/interrupt.h>
#include <util/delay.h>
*/
#include "keypad.c"

int main(void)
 33a:	9f 01       	movw	r18, r30
 33c:	28 5f       	subi	r18, 0xF8	; 248
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB |= 0xFF;										// set all pins as outputs								
	for(int i = 0; i < NUM_COLS; i++){					// set columns low
		PORTB &= ~(1 << columns[i]);
	}												
	for(int i = 0; i < NUM_ROWS; i++){					// set rows high
		PORTB |= (1 << rows[i]);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	65 b1       	in	r22, 0x05	; 5
 346:	80 81       	ld	r24, Z
 348:	32 96       	adiw	r30, 0x02	; 2
 34a:	da 01       	movw	r26, r20
 34c:	02 c0       	rjmp	.+4      	; 0x352 <main+0x50>
 34e:	aa 0f       	add	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <main+0x4c>
 356:	cd 01       	movw	r24, r26
 358:	86 2b       	or	r24, r22
 35a:	85 b9       	out	0x05, r24	; 5
	*/
	DDRB |= 0xFF;										// set all pins as outputs								
	for(int i = 0; i < NUM_COLS; i++){					// set columns low
		PORTB &= ~(1 << columns[i]);
	}												
	for(int i = 0; i < NUM_ROWS; i++){					// set rows high
 35c:	e2 17       	cp	r30, r18
 35e:	f3 07       	cpc	r31, r19
 360:	89 f7       	brne	.-30     	; 0x344 <main+0x42>
		PORTB |= (1 << rows[i]);
	}
	
	getKeyPress();
 362:	0e 94 37 01 	call	0x26e	; 0x26e <getKeyPress>
 366:	ff cf       	rjmp	.-2      	; 0x366 <main+0x64>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
