
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000898  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c4  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000264  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e7       	ldi	r30, 0x7E	; 126
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 33       	cpi	r26, 0x3A	; 58
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	aa e3       	ldi	r26, 0x3A	; 58
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 33       	cpi	r26, 0x3A	; 58
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	be d0       	rcall	.+380    	; 0x1e4 <main>
  68:	88 c1       	rjmp	.+784    	; 0x37a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pulseElatch>:
	}
}

// Pulses Enable pin to latch in an instruction
void pulseElatch(void){	
	LCD_PORT_1 |= 1 << E;		// Setting Enable high
  6c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	89 ef       	ldi	r24, 0xF9	; 249
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <pulseElatch+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <pulseElatch+0xc>
  78:	00 00       	nop
	_delay_ms(1);				// Delaying 1 ms
	LCD_PORT_1 &= ~(1 << E);	// Clearing Enable 
  7a:	44 98       	cbi	0x08, 4	; 8
}
  7c:	08 95       	ret

0000007e <writeLCDdata>:

// Writes nibbles on data lines 
void writeLCDdata(int data_byte){
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	int uppernibble = (data_byte & 0xF0) >> 4;	// Defining uppernibble to variable
  86:	8c 01       	movw	r16, r24
  88:	00 7f       	andi	r16, 0xF0	; 240
  8a:	10 70       	andi	r17, 0x00	; 0
  8c:	15 95       	asr	r17
  8e:	07 95       	ror	r16
  90:	15 95       	asr	r17
  92:	07 95       	ror	r16
  94:	15 95       	asr	r17
  96:	07 95       	ror	r16
  98:	15 95       	asr	r17
  9a:	07 95       	ror	r16
	int lowernibble = data_byte & 0x0F;			// Defining lowernibble to variable
  9c:	ec 01       	movw	r28, r24
  9e:	cf 70       	andi	r28, 0x0F	; 15
  a0:	d0 70       	andi	r29, 0x00	; 0
	LCD_PORT_1 &= ~0x0F;						// Clearing nibble on LCD
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	88 b9       	out	0x08, r24	; 8
	LCD_PORT_1 |= uppernibble;					// Sending uppernibble
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	80 2b       	or	r24, r16
  ac:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in upper nibble
  ae:	de df       	rcall	.-68     	; 0x6c <pulseElatch>
	LCD_PORT_1 &= ~(uppernibble);				// Clearing uppernibble
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	00 95       	com	r16
  b4:	08 23       	and	r16, r24
  b6:	08 b9       	out	0x08, r16	; 8
	LCD_PORT_1 |= lowernibble;					// Sending lowernibble
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8c 2b       	or	r24, r28
  bc:	88 b9       	out	0x08, r24	; 8
	pulseElatch();								// Latching in lowernibble
  be:	d6 df       	rcall	.-84     	; 0x6c <pulseElatch>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <writeLCDdata+0x46>
  c8:	00 c0       	rjmp	.+0      	; 0xca <writeLCDdata+0x4c>
  ca:	00 00       	nop
	_delay_ms(1);								// Delaying to ensure instruction is executed
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	c0 95       	com	r28
  d0:	c8 23       	and	r28, r24
  d2:	c8 b9       	out	0x08, r28	; 8
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <cursorPosition>:
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
	writeLCDdata(character);		// Sending the character on the data lines
}

// Places the cursor to the home of the specified line
void cursorPosition(int line){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	int i = 1;
	
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
  e8:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
  ea:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
  ec:	28 98       	cbi	0x05, 0	; 5
	
	writeLCDdata(0x0C);				// Turning the cursor OFF
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	c5 df       	rcall	.-118    	; 0x7e <writeLCDdata>
	
	if (line == 2)					// Move cursor to line 2
  f4:	c2 30       	cpi	r28, 0x02	; 2
  f6:	d1 05       	cpc	r29, r1
  f8:	59 f4       	brne	.+22     	; 0x110 <cursorPosition+0x32>
	{
		writeLCDdata(0x2);			// Sending the cursor home
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	bf df       	rcall	.-130    	; 0x7e <writeLCDdata>
 100:	c8 e2       	ldi	r28, 0x28	; 40
 102:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
		writeLCDdata(0x14);
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ba df       	rcall	.-140    	; 0x7e <writeLCDdata>
 10a:	21 97       	sbiw	r28, 0x01	; 1
	writeLCDdata(0x0C);				// Turning the cursor OFF
	
	if (line == 2)					// Move cursor to line 2
	{
		writeLCDdata(0x2);			// Sending the cursor home
		for(i=1;i<16+25;i++){		// Loop cursor move to the right instruction
 10c:	d9 f7       	brne	.-10     	; 0x104 <cursorPosition+0x26>
 10e:	03 c0       	rjmp	.+6      	; 0x116 <cursorPosition+0x38>
		writeLCDdata(0x14);
		}
	}
	else
	writeLCDdata(0x2);			// Sending cursor home
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	b4 df       	rcall	.-152    	; 0x7e <writeLCDdata>

	writeLCDdata(0x0F);				// Turning on the cursor ON
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	b1 df       	rcall	.-158    	; 0x7e <writeLCDdata>
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <writeLCDcharacter>:
	writeLCDdata(0x01);				// Writing clear instruction
}

// Writes a character to current cursor position
void writeLCDcharacter(int character){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 122:	2f e3       	ldi	r18, 0x3F	; 63
 124:	27 b9       	out	0x07, r18	; 7
	LCD_PORT_1 |= (1 << RS);		// Setting RS to send data
 126:	45 9a       	sbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 128:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 12a:	28 98       	cbi	0x05, 0	; 5
	writeLCDdata(character);		// Sending the character on the data lines
 12c:	a8 df       	rcall	.-176    	; 0x7e <writeLCDdata>
}
 12e:	08 95       	ret

00000130 <writeLCDline>:

	writeLCDdata(0x0F);				// Turning on the cursor ON
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	d9 2f       	mov	r29, r25
 13c:	cb 01       	movw	r24, r22
	cursorPosition(line);					// Setting cursor position
 13e:	cf df       	rcall	.-98     	; 0xde <cursorPosition>
 140:	0c 2f       	mov	r16, r28
 142:	1d 2f       	mov	r17, r29
	for(int i=0; i<16; i++){				// Looping through character array
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
 148:	f8 01       	movw	r30, r16
 14a:	81 91       	ld	r24, Z+
 14c:	8f 01       	movw	r16, r30
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	e8 df       	rcall	.-48     	; 0x122 <writeLCDcharacter>
}

// Writes an array of 16 characters to the specified line
void writeLCDline(char line_data[16], int line){
	cursorPosition(line);					// Setting cursor position
	for(int i=0; i<16; i++){				// Looping through character array
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	d1 05       	cpc	r29, r1
 158:	b9 f7       	brne	.-18     	; 0x148 <writeLCDline+0x18>
		writeLCDcharacter(line_data[i]);	// Displaying character in specified array element
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <clearLCD>:
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
}

// Clears the LCD and places cursor at home (1x1)
void clearLCD (void){
	LCD_DDR_1 = 0x3F;				// Making LCD PORTC pins outputs
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(1 << RS);		// Clearing RS to send command
 168:	45 98       	cbi	0x08, 5	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB0 an output
 16a:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB0 to be low for write operation
 16c:	28 98       	cbi	0x05, 0	; 5
	writeLCDdata(0x01);				// Writing clear instruction
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	85 df       	rcall	.-246    	; 0x7e <writeLCDdata>
}
 174:	08 95       	ret

00000176 <initializeLCD>:
#define LCD_PORT_2 PORTB		// Using Port B (MC) for the LCD
#define LCD_DDR_2 DDRB			// With Port B (MC) being assigned direction register assignment


// Sets up LCD and initializes it in 4 bit mode
void initializeLCD(void){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	int i = 0;						// counter variable for FOR loop
	
	LCD_DDR_1 = 0x3F;				// Making all LCD pins of port C outputs
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	87 b9       	out	0x07, r24	; 7
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	80 7c       	andi	r24, 0xC0	; 192
 182:	88 b9       	out	0x08, r24	; 8
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
 184:	20 9a       	sbi	0x04, 0	; 4
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
 186:	28 98       	cbi	0x05, 0	; 5
 188:	c4 e0       	ldi	r28, 0x04	; 4
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
		LCD_PORT_1 |= 0x3;
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	88 b9       	out	0x08, r24	; 8
		pulseElatch();
 192:	6c df       	rcall	.-296    	; 0x6c <pulseElatch>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <initializeLCD+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <initializeLCD+0x28>
 19e:	00 00       	nop
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	21 97       	sbiw	r28, 0x01	; 1
	LCD_PORT_1 &= ~(0x3F);			// Clearing LCD pins in port C
	LCD_DDR_2 |= (1 << R_W);		// Making pin PB1 an output
	LCD_PORT_2 &= ~(1 << R_W);		// Masking or clearing pin PB1 to be low for write operation
	
	/* 3 8-bit Function Set instructions to reset LCD */
	for(i=0; i<=3; i++){
 1a8:	89 f7       	brne	.-30     	; 0x18c <initializeLCD+0x16>
		_delay_ms(1);
		LCD_PORT_1 &= ~(0x3);
	}
	
	/* Setting Function in 4-bit mode*/
	LCD_PORT_1 |= 0x2;
 1aa:	41 9a       	sbi	0x08, 1	; 8
	pulseElatch();
 1ac:	5f df       	rcall	.-322    	; 0x6c <pulseElatch>
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <initializeLCD+0x3c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <initializeLCD+0x42>
 1b8:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_1 &= ~(0x2);
 1ba:	41 98       	cbi	0x08, 1	; 8
	
	/* 4 BIT MODE NOW */

	writeLCDdata(0x28); /* Setting Function Set (4 bit, Dual Line, 5x8 dots */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	5e df       	rcall	.-324    	; 0x7e <writeLCDdata>
	writeLCDdata(0x0F); /* Setting Display (Display ON, Cursor Blinking, Cursor Position ON */
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	5b df       	rcall	.-330    	; 0x7e <writeLCDdata>
	writeLCDdata(0x06); /*  Setting Entry Mode (Increment after every read write op.*/
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	58 df       	rcall	.-336    	; 0x7e <writeLCDdata>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <BacklightLCD>:
	LCD_PORT_1 &= ~(lowernibble);				// Clearing lower nibble
}

// Turns the LCD back light on or off
void BacklightLCD (int on1_off0){
	LCD_DDR_2 |= (1 << BL);		// Making pin PB1 an output
 1d4:	21 9a       	sbi	0x04, 1	; 4
	if (on1_off0 == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	11 f4       	brne	.+4      	; 0x1e0 <BacklightLCD+0xc>
		LCD_PORT_2 &= ~(1 << BL);		// Masking or clearing pin PB1 sinking current turning on Back light
 1dc:	29 98       	cbi	0x05, 1	; 5
 1de:	08 95       	ret
	else
		LCD_PORT_2 |= (1 << BL);		// Setting PB1 allowing no current flow to turn bakc light off
 1e0:	29 9a       	sbi	0x05, 1	; 5
 1e2:	08 95       	ret

000001e4 <main>:
#include <util/delay.h>			// Delay library
#include "LCD.h"				// LCD.h library - Prototypes only
#include "LCD.c"				// LCD.c function library - Functions only


int main(void){
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	ea 97       	sbiw	r28, 0x3a	; 58
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
	
	/* Defining counter variables*/
	int w = 0;
	
	/* Defining 16 element arrays to Display */
	char line1[16] = {'C','O','D','A',' ','K','A','M','A',' ',' ',' ',' ',' ',' ',' '};
 200:	de 01       	movw	r26, r28
 202:	11 96       	adiw	r26, 0x01	; 1
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x26>
	char line2[16] = {'R','O','C','K','S','!','!','!',' ',' ',' ',' ',' ',' ',' ',' ',' '};
 212:	de 01       	movw	r26, r28
 214:	51 96       	adiw	r26, 0x11	; 17
 216:	e0 e1       	ldi	r30, 0x10	; 16
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	81 50       	subi	r24, 0x01	; 1
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x38>
	char line1a[16] = {'E','N','T','E','R',' ','C','O','D','E',' ',' ',' ',' ',' ',' '};
 224:	de 01       	movw	r26, r28
 226:	91 96       	adiw	r26, 0x21	; 33
 228:	e0 e2       	ldi	r30, 0x20	; 32
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	81 50       	subi	r24, 0x01	; 1
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x4a>
	char numbers[10] = {'0','1','2','3','4','5','6','7','8','9'};
 236:	de 01       	movw	r26, r28
 238:	d1 96       	adiw	r26, 0x31	; 49
 23a:	e0 e3       	ldi	r30, 0x30	; 48
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	81 50       	subi	r24, 0x01	; 1
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x5c>
				
	initializeLCD();				// Initializing LCD in 4-bit mode
 248:	96 df       	rcall	.-212    	; 0x176 <initializeLCD>
	
	clearLCD();						// Clearing the LCD
 24a:	8c df       	rcall	.-232    	; 0x164 <clearLCD>
	
	BacklightLCD(1);				// Turning on the LCD back light
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	c1 df       	rcall	.-126    	; 0x1d4 <BacklightLCD>
 252:	8f e9       	ldi	r24, 0x9F	; 159
 254:	96 e8       	ldi	r25, 0x86	; 134
 256:	a1 e0       	ldi	r26, 0x01	; 1
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	a0 40       	sbci	r26, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x74>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x7e>
 262:	00 00       	nop
		
	_delay_ms(500);				
	writeLCDline(line1, 1);			// Writing array line1 to LCD in the 1st row
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	61 df       	rcall	.-318    	; 0x130 <writeLCDline>
 26e:	8f e9       	ldi	r24, 0x9F	; 159
 270:	96 e8       	ldi	r25, 0x86	; 134
 272:	a1 e0       	ldi	r26, 0x01	; 1
 274:	81 50       	subi	r24, 0x01	; 1
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	a0 40       	sbci	r26, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x90>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x9a>
 27e:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line2, 2);			// Writing array line2 to LCD in the 2nd row
 280:	ce 01       	movw	r24, r28
 282:	41 96       	adiw	r24, 0x11	; 17
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	53 df       	rcall	.-346    	; 0x130 <writeLCDline>
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	92 e4       	ldi	r25, 0x42	; 66
 28e:	af e0       	ldi	r26, 0x0F	; 15
 290:	81 50       	subi	r24, 0x01	; 1
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	a0 40       	sbci	r26, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0xac>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0xb6>
 29a:	00 00       	nop
	_delay_ms(5000);
	
	clearLCD();						// Clearing the LCD
 29c:	63 df       	rcall	.-314    	; 0x164 <clearLCD>
	writeLCDline(line1a,1);			// Writing array line1a to LCD in the 1st row
 29e:	ce 01       	movw	r24, r28
 2a0:	81 96       	adiw	r24, 0x21	; 33
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	44 df       	rcall	.-376    	; 0x130 <writeLCDline>
	cursorPosition(2);				// Placing the cursor to the first position of the 2nd row
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	18 df       	rcall	.-464    	; 0xde <cursorPosition>
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9d e0       	ldi	r25, 0x0D	; 13
 2b2:	a3 e0       	ldi	r26, 0x03	; 3
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	a0 40       	sbci	r26, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0xd0>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0xda>
 2be:	00 00       	nop
 2c0:	8e 01       	movw	r16, r28
 2c2:	0f 5c       	subi	r16, 0xCF	; 207
 2c4:	1f 4f       	sbci	r17, 0xFF	; 255
#include <util/delay.h>			// Delay library
#include "LCD.h"				// LCD.h library - Prototypes only
#include "LCD.c"				// LCD.c function library - Functions only


int main(void){
 2c6:	0f 2e       	mov	r0, r31
 2c8:	fb e3       	ldi	r31, 0x3B	; 59
 2ca:	ef 2e       	mov	r14, r31
 2cc:	ff 24       	eor	r15, r15
 2ce:	f0 2d       	mov	r31, r0
 2d0:	ec 0e       	add	r14, r28
 2d2:	fd 1e       	adc	r15, r29
	writeLCDline(line1a,1);			// Writing array line1a to LCD in the 1st row
	cursorPosition(2);				// Placing the cursor to the first position of the 2nd row
	_delay_ms(1000);
	
	for(w=0;w<10;w++){				// Looping through integers to display
		writeLCDcharacter(numbers[w]);	// Writing specified integer to display in HEX
 2d4:	d8 01       	movw	r26, r16
 2d6:	8d 91       	ld	r24, X+
 2d8:	8d 01       	movw	r16, r26
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	22 df       	rcall	.-444    	; 0x122 <writeLCDcharacter>
 2de:	8f e3       	ldi	r24, 0x3F	; 63
 2e0:	9d e0       	ldi	r25, 0x0D	; 13
 2e2:	a3 e0       	ldi	r26, 0x03	; 3
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x100>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x10a>
 2ee:	00 00       	nop
	clearLCD();						// Clearing the LCD
	writeLCDline(line1a,1);			// Writing array line1a to LCD in the 1st row
	cursorPosition(2);				// Placing the cursor to the first position of the 2nd row
	_delay_ms(1000);
	
	for(w=0;w<10;w++){				// Looping through integers to display
 2f0:	0e 15       	cp	r16, r14
 2f2:	1f 05       	cpc	r17, r15
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <main+0xf0>
 2f6:	8f e3       	ldi	r24, 0x3F	; 63
 2f8:	92 e4       	ldi	r25, 0x42	; 66
 2fa:	af e0       	ldi	r26, 0x0F	; 15
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	a0 40       	sbci	r26, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x118>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__stack+0x7>
 306:	00 00       	nop
		writeLCDcharacter(numbers[w]);	// Writing specified integer to display in HEX
		_delay_ms(1000);
	}
	
	_delay_ms(5000);
	clearLCD();						// Clearing the LCD
 308:	2d df       	rcall	.-422    	; 0x164 <clearLCD>
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	a1 e0       	ldi	r26, 0x01	; 1
 310:	81 50       	subi	r24, 0x01	; 1
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	a0 40       	sbci	r26, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <__stack+0x11>
 318:	00 c0       	rjmp	.+0      	; 0x31a <__stack+0x1b>
 31a:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line1, 1);			// Writing array line1 to LCD in the 1st row
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	05 df       	rcall	.-502    	; 0x130 <writeLCDline>
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	96 e8       	ldi	r25, 0x86	; 134
 32a:	a1 e0       	ldi	r26, 0x01	; 1
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	a0 40       	sbci	r26, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <__stack+0x2d>
 334:	00 c0       	rjmp	.+0      	; 0x336 <__stack+0x37>
 336:	00 00       	nop
	_delay_ms(500);
	writeLCDline(line2, 2);			// Writing array line2 to LCD in the 2nd row
 338:	ce 01       	movw	r24, r28
 33a:	41 96       	adiw	r24, 0x11	; 17
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	f7 de       	rcall	.-530    	; 0x130 <writeLCDline>
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9d e0       	ldi	r25, 0x0D	; 13
 346:	a3 e0       	ldi	r26, 0x03	; 3
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	a0 40       	sbci	r26, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <__stack+0x49>
 350:	00 c0       	rjmp	.+0      	; 0x352 <__stack+0x53>
 352:	00 00       	nop
	_delay_ms(1000);

	clearLCD();
 354:	07 df       	rcall	.-498    	; 0x164 <clearLCD>
	BacklightLCD(0);		
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	3c df       	rcall	.-392    	; 0x1d4 <BacklightLCD>

 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	ea 96       	adiw	r28, 0x3a	; 58
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
